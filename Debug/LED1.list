
LED1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f48  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08005054  08005054  00006054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050c8  080050c8  00007064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080050c8  080050c8  00007064  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080050c8  080050c8  00007064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050c8  080050c8  000060c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080050cc  080050cc  000060cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080050d0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  20000064  08005134  00007064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  08005134  000072f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e4c5  00000000  00000000  0000708d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002286  00000000  00000000  00015552  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e10  00000000  00000000  000177d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b06  00000000  00000000  000185e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001865f  00000000  00000000  000190ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010211  00000000  00000000  0003174d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f83f  00000000  00000000  0004195e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d119d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fc4  00000000  00000000  000d11e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000040  00000000  00000000  000d51a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	0800503c 	.word	0x0800503c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	0800503c 	.word	0x0800503c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b08e      	sub	sp, #56	@ 0x38
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fe3b 	bl	8000dcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f89d 	bl	8000294 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 fa3f 	bl	80005dc <MX_GPIO_Init>
  MX_TIM1_Init();
 800015e:	f000 f927 	bl	80003b0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000162:	f000 fa11 	bl	8000588 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000166:	f000 f9c3 	bl	80004f0 <MX_TIM2_Init>
  MX_ADC1_Init();
 800016a:	f000 f8e3 	bl	8000334 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 800016e:	4840      	ldr	r0, [pc, #256]	@ (8000270 <main+0x124>)
 8000170:	f002 fb6c 	bl	800284c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8000174:	483f      	ldr	r0, [pc, #252]	@ (8000274 <main+0x128>)
 8000176:	f002 fbb3 	bl	80028e0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 800017a:	2100      	movs	r1, #0
 800017c:	483c      	ldr	r0, [pc, #240]	@ (8000270 <main+0x124>)
 800017e:	f002 fc87 	bl	8002a90 <HAL_TIM_PWM_Start_IT>
  HAL_UART_Receive_IT(&huart1, (uint8_t*)&Rx, 1);
 8000182:	2201      	movs	r2, #1
 8000184:	493c      	ldr	r1, [pc, #240]	@ (8000278 <main+0x12c>)
 8000186:	483d      	ldr	r0, [pc, #244]	@ (800027c <main+0x130>)
 8000188:	f003 fd04 	bl	8003b94 <HAL_UART_Receive_IT>
  HAL_ADC_Start(&hadc1);
 800018c:	483c      	ldr	r0, [pc, #240]	@ (8000280 <main+0x134>)
 800018e:	f000 ff7b 	bl	8001088 <HAL_ADC_Start>
//	  } code sử dụng uart




	  switch(mode){
 8000192:	4b3c      	ldr	r3, [pc, #240]	@ (8000284 <main+0x138>)
 8000194:	781b      	ldrb	r3, [r3, #0]
 8000196:	3b01      	subs	r3, #1
 8000198:	2b04      	cmp	r3, #4
 800019a:	d8fa      	bhi.n	8000192 <main+0x46>
 800019c:	a201      	add	r2, pc, #4	@ (adr r2, 80001a4 <main+0x58>)
 800019e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001a2:	bf00      	nop
 80001a4:	080001b9 	.word	0x080001b9
 80001a8:	080001d1 	.word	0x080001d1
 80001ac:	080001e9 	.word	0x080001e9
 80001b0:	08000209 	.word	0x08000209
 80001b4:	08000257 	.word	0x08000257
	  case 1:
		  HAL_TIM_Base_Start_IT(&htim2);
 80001b8:	482e      	ldr	r0, [pc, #184]	@ (8000274 <main+0x128>)
 80001ba:	f002 fb91 	bl	80028e0 <HAL_TIM_Base_Start_IT>
		  HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 80001be:	2100      	movs	r1, #0
 80001c0:	482b      	ldr	r0, [pc, #172]	@ (8000270 <main+0x124>)
 80001c2:	f002 fd55 	bl	8002c70 <HAL_TIM_PWM_Stop_IT>
		  setdelay(1000);
 80001c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001ca:	f000 fbdd 	bl	8000988 <setdelay>
		  break;
 80001ce:	e04e      	b.n	800026e <main+0x122>
	  case 2:
		  HAL_TIM_Base_Start_IT(&htim2);
 80001d0:	4828      	ldr	r0, [pc, #160]	@ (8000274 <main+0x128>)
 80001d2:	f002 fb85 	bl	80028e0 <HAL_TIM_Base_Start_IT>
		  HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 80001d6:	2100      	movs	r1, #0
 80001d8:	4825      	ldr	r0, [pc, #148]	@ (8000270 <main+0x124>)
 80001da:	f002 fd49 	bl	8002c70 <HAL_TIM_PWM_Stop_IT>
		  setdelay(500);
 80001de:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80001e2:	f000 fbd1 	bl	8000988 <setdelay>
		  break;
 80001e6:	e042      	b.n	800026e <main+0x122>
	  case 3:
		  HAL_TIM_Base_Stop_IT(&htim2);
 80001e8:	4822      	ldr	r0, [pc, #136]	@ (8000274 <main+0x128>)
 80001ea:	f002 fbcb 	bl	8002984 <HAL_TIM_Base_Stop_IT>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80001ee:	2200      	movs	r2, #0
 80001f0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80001f4:	4824      	ldr	r0, [pc, #144]	@ (8000288 <main+0x13c>)
 80001f6:	f001 fdca 	bl	8001d8e <HAL_GPIO_WritePin>
		  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 80001fa:	2100      	movs	r1, #0
 80001fc:	481c      	ldr	r0, [pc, #112]	@ (8000270 <main+0x124>)
 80001fe:	f002 fc47 	bl	8002a90 <HAL_TIM_PWM_Start_IT>
		  mode3();
 8000202:	f000 fba1 	bl	8000948 <mode3>
		  break;
 8000206:	e032      	b.n	800026e <main+0x122>
	  case 4:
		  HAL_TIM_Base_Stop_IT(&htim2);
 8000208:	481a      	ldr	r0, [pc, #104]	@ (8000274 <main+0x128>)
 800020a:	f002 fbbb 	bl	8002984 <HAL_TIM_Base_Stop_IT>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800020e:	2200      	movs	r2, #0
 8000210:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000214:	481c      	ldr	r0, [pc, #112]	@ (8000288 <main+0x13c>)
 8000216:	f001 fdba 	bl	8001d8e <HAL_GPIO_WritePin>
		  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 800021a:	2100      	movs	r1, #0
 800021c:	4814      	ldr	r0, [pc, #80]	@ (8000270 <main+0x124>)
 800021e:	f002 fc37 	bl	8002a90 <HAL_TIM_PWM_Start_IT>
		  adc = HAL_ADC_GetValue(&hadc1);
 8000222:	4817      	ldr	r0, [pc, #92]	@ (8000280 <main+0x134>)
 8000224:	f000 ffde 	bl	80011e4 <HAL_ADC_GetValue>
 8000228:	4603      	mov	r3, r0
 800022a:	b29a      	uxth	r2, r3
 800022c:	4b17      	ldr	r3, [pc, #92]	@ (800028c <main+0x140>)
 800022e:	801a      	strh	r2, [r3, #0]
		  char buffer_adc [50];
		  int lenght = snprintf(buffer_adc, sizeof(buffer_adc), "adc_value: %lu \r \n", adc);
 8000230:	4b16      	ldr	r3, [pc, #88]	@ (800028c <main+0x140>)
 8000232:	881b      	ldrh	r3, [r3, #0]
 8000234:	4638      	mov	r0, r7
 8000236:	4a16      	ldr	r2, [pc, #88]	@ (8000290 <main+0x144>)
 8000238:	2132      	movs	r1, #50	@ 0x32
 800023a:	f004 fa3b 	bl	80046b4 <sniprintf>
 800023e:	6378      	str	r0, [r7, #52]	@ 0x34
		  HAL_UART_Transmit(&huart1,(uint8_t*)buffer_adc, lenght, 500);
 8000240:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000242:	b29a      	uxth	r2, r3
 8000244:	4639      	mov	r1, r7
 8000246:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800024a:	480c      	ldr	r0, [pc, #48]	@ (800027c <main+0x130>)
 800024c:	f003 fc17 	bl	8003a7e <HAL_UART_Transmit>
		  HAL_Delay(100);
 8000250:	2064      	movs	r0, #100	@ 0x64
 8000252:	f000 fe1d 	bl	8000e90 <HAL_Delay>
	  case 5:
		  HAL_TIM_Base_Start_IT(&htim2);
 8000256:	4807      	ldr	r0, [pc, #28]	@ (8000274 <main+0x128>)
 8000258:	f002 fb42 	bl	80028e0 <HAL_TIM_Base_Start_IT>
		  HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 800025c:	2100      	movs	r1, #0
 800025e:	4804      	ldr	r0, [pc, #16]	@ (8000270 <main+0x124>)
 8000260:	f002 fd06 	bl	8002c70 <HAL_TIM_PWM_Stop_IT>
		  setdelay(200);
 8000264:	20c8      	movs	r0, #200	@ 0xc8
 8000266:	f000 fb8f 	bl	8000988 <setdelay>
		  break;
 800026a:	bf00      	nop
 800026c:	e791      	b.n	8000192 <main+0x46>
	  switch(mode){
 800026e:	e790      	b.n	8000192 <main+0x46>
 8000270:	200000b0 	.word	0x200000b0
 8000274:	200000f8 	.word	0x200000f8
 8000278:	200001a4 	.word	0x200001a4
 800027c:	20000140 	.word	0x20000140
 8000280:	20000080 	.word	0x20000080
 8000284:	20000004 	.word	0x20000004
 8000288:	40010800 	.word	0x40010800
 800028c:	200001a0 	.word	0x200001a0
 8000290:	08005054 	.word	0x08005054

08000294 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b094      	sub	sp, #80	@ 0x50
 8000298:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800029e:	2228      	movs	r2, #40	@ 0x28
 80002a0:	2100      	movs	r1, #0
 80002a2:	4618      	mov	r0, r3
 80002a4:	f004 fa3c 	bl	8004720 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a8:	f107 0314 	add.w	r3, r7, #20
 80002ac:	2200      	movs	r2, #0
 80002ae:	601a      	str	r2, [r3, #0]
 80002b0:	605a      	str	r2, [r3, #4]
 80002b2:	609a      	str	r2, [r3, #8]
 80002b4:	60da      	str	r2, [r3, #12]
 80002b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002b8:	1d3b      	adds	r3, r7, #4
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	605a      	str	r2, [r3, #4]
 80002c0:	609a      	str	r2, [r3, #8]
 80002c2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002c4:	2302      	movs	r3, #2
 80002c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c8:	2301      	movs	r3, #1
 80002ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002cc:	2310      	movs	r3, #16
 80002ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002d0:	2300      	movs	r3, #0
 80002d2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80002d8:	4618      	mov	r0, r3
 80002da:	f001 fda1 	bl	8001e20 <HAL_RCC_OscConfig>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d001      	beq.n	80002e8 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80002e4:	f000 fb5e 	bl	80009a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e8:	230f      	movs	r3, #15
 80002ea:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002ec:	2300      	movs	r3, #0
 80002ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f0:	2300      	movs	r3, #0
 80002f2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002f4:	2300      	movs	r3, #0
 80002f6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f8:	2300      	movs	r3, #0
 80002fa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002fc:	f107 0314 	add.w	r3, r7, #20
 8000300:	2100      	movs	r1, #0
 8000302:	4618      	mov	r0, r3
 8000304:	f002 f80e 	bl	8002324 <HAL_RCC_ClockConfig>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800030e:	f000 fb49 	bl	80009a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000312:	2302      	movs	r3, #2
 8000314:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000316:	2300      	movs	r3, #0
 8000318:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	4618      	mov	r0, r3
 800031e:	f002 f98f 	bl	8002640 <HAL_RCCEx_PeriphCLKConfig>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000328:	f000 fb3c 	bl	80009a4 <Error_Handler>
  }
}
 800032c:	bf00      	nop
 800032e:	3750      	adds	r7, #80	@ 0x50
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}

08000334 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b084      	sub	sp, #16
 8000338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800033a:	1d3b      	adds	r3, r7, #4
 800033c:	2200      	movs	r2, #0
 800033e:	601a      	str	r2, [r3, #0]
 8000340:	605a      	str	r2, [r3, #4]
 8000342:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000344:	4b18      	ldr	r3, [pc, #96]	@ (80003a8 <MX_ADC1_Init+0x74>)
 8000346:	4a19      	ldr	r2, [pc, #100]	@ (80003ac <MX_ADC1_Init+0x78>)
 8000348:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800034a:	4b17      	ldr	r3, [pc, #92]	@ (80003a8 <MX_ADC1_Init+0x74>)
 800034c:	2200      	movs	r2, #0
 800034e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000350:	4b15      	ldr	r3, [pc, #84]	@ (80003a8 <MX_ADC1_Init+0x74>)
 8000352:	2201      	movs	r2, #1
 8000354:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000356:	4b14      	ldr	r3, [pc, #80]	@ (80003a8 <MX_ADC1_Init+0x74>)
 8000358:	2200      	movs	r2, #0
 800035a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800035c:	4b12      	ldr	r3, [pc, #72]	@ (80003a8 <MX_ADC1_Init+0x74>)
 800035e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000362:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000364:	4b10      	ldr	r3, [pc, #64]	@ (80003a8 <MX_ADC1_Init+0x74>)
 8000366:	2200      	movs	r2, #0
 8000368:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800036a:	4b0f      	ldr	r3, [pc, #60]	@ (80003a8 <MX_ADC1_Init+0x74>)
 800036c:	2201      	movs	r2, #1
 800036e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000370:	480d      	ldr	r0, [pc, #52]	@ (80003a8 <MX_ADC1_Init+0x74>)
 8000372:	f000 fdb1 	bl	8000ed8 <HAL_ADC_Init>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800037c:	f000 fb12 	bl	80009a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000380:	2305      	movs	r3, #5
 8000382:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000384:	2301      	movs	r3, #1
 8000386:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8000388:	2301      	movs	r3, #1
 800038a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800038c:	1d3b      	adds	r3, r7, #4
 800038e:	4619      	mov	r1, r3
 8000390:	4805      	ldr	r0, [pc, #20]	@ (80003a8 <MX_ADC1_Init+0x74>)
 8000392:	f001 f805 	bl	80013a0 <HAL_ADC_ConfigChannel>
 8000396:	4603      	mov	r3, r0
 8000398:	2b00      	cmp	r3, #0
 800039a:	d001      	beq.n	80003a0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800039c:	f000 fb02 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003a0:	bf00      	nop
 80003a2:	3710      	adds	r7, #16
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	20000080 	.word	0x20000080
 80003ac:	40012400 	.word	0x40012400

080003b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b096      	sub	sp, #88	@ 0x58
 80003b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003b6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80003ba:	2200      	movs	r2, #0
 80003bc:	601a      	str	r2, [r3, #0]
 80003be:	605a      	str	r2, [r3, #4]
 80003c0:	609a      	str	r2, [r3, #8]
 80003c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003c4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80003c8:	2200      	movs	r2, #0
 80003ca:	601a      	str	r2, [r3, #0]
 80003cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80003d2:	2200      	movs	r2, #0
 80003d4:	601a      	str	r2, [r3, #0]
 80003d6:	605a      	str	r2, [r3, #4]
 80003d8:	609a      	str	r2, [r3, #8]
 80003da:	60da      	str	r2, [r3, #12]
 80003dc:	611a      	str	r2, [r3, #16]
 80003de:	615a      	str	r2, [r3, #20]
 80003e0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	2220      	movs	r2, #32
 80003e6:	2100      	movs	r1, #0
 80003e8:	4618      	mov	r0, r3
 80003ea:	f004 f999 	bl	8004720 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003ee:	4b3e      	ldr	r3, [pc, #248]	@ (80004e8 <MX_TIM1_Init+0x138>)
 80003f0:	4a3e      	ldr	r2, [pc, #248]	@ (80004ec <MX_TIM1_Init+0x13c>)
 80003f2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8-1;
 80003f4:	4b3c      	ldr	r3, [pc, #240]	@ (80004e8 <MX_TIM1_Init+0x138>)
 80003f6:	2207      	movs	r2, #7
 80003f8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003fa:	4b3b      	ldr	r3, [pc, #236]	@ (80004e8 <MX_TIM1_Init+0x138>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000400:	4b39      	ldr	r3, [pc, #228]	@ (80004e8 <MX_TIM1_Init+0x138>)
 8000402:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000406:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000408:	4b37      	ldr	r3, [pc, #220]	@ (80004e8 <MX_TIM1_Init+0x138>)
 800040a:	2200      	movs	r2, #0
 800040c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800040e:	4b36      	ldr	r3, [pc, #216]	@ (80004e8 <MX_TIM1_Init+0x138>)
 8000410:	2200      	movs	r2, #0
 8000412:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000414:	4b34      	ldr	r3, [pc, #208]	@ (80004e8 <MX_TIM1_Init+0x138>)
 8000416:	2280      	movs	r2, #128	@ 0x80
 8000418:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800041a:	4833      	ldr	r0, [pc, #204]	@ (80004e8 <MX_TIM1_Init+0x138>)
 800041c:	f002 f9c6 	bl	80027ac <HAL_TIM_Base_Init>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000426:	f000 fabd 	bl	80009a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800042a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800042e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000430:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000434:	4619      	mov	r1, r3
 8000436:	482c      	ldr	r0, [pc, #176]	@ (80004e8 <MX_TIM1_Init+0x138>)
 8000438:	f002 fe7e 	bl	8003138 <HAL_TIM_ConfigClockSource>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000442:	f000 faaf 	bl	80009a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000446:	4828      	ldr	r0, [pc, #160]	@ (80004e8 <MX_TIM1_Init+0x138>)
 8000448:	f002 faca 	bl	80029e0 <HAL_TIM_PWM_Init>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000452:	f000 faa7 	bl	80009a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000456:	2300      	movs	r3, #0
 8000458:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800045a:	2300      	movs	r3, #0
 800045c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800045e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000462:	4619      	mov	r1, r3
 8000464:	4820      	ldr	r0, [pc, #128]	@ (80004e8 <MX_TIM1_Init+0x138>)
 8000466:	f003 f9f9 	bl	800385c <HAL_TIMEx_MasterConfigSynchronization>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000470:	f000 fa98 	bl	80009a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000474:	2360      	movs	r3, #96	@ 0x60
 8000476:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000478:	2300      	movs	r3, #0
 800047a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800047c:	2300      	movs	r3, #0
 800047e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000480:	2300      	movs	r3, #0
 8000482:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000484:	2300      	movs	r3, #0
 8000486:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000488:	2300      	movs	r3, #0
 800048a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800048c:	2300      	movs	r3, #0
 800048e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000490:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000494:	2200      	movs	r2, #0
 8000496:	4619      	mov	r1, r3
 8000498:	4813      	ldr	r0, [pc, #76]	@ (80004e8 <MX_TIM1_Init+0x138>)
 800049a:	f002 fd8b 	bl	8002fb4 <HAL_TIM_PWM_ConfigChannel>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80004a4:	f000 fa7e 	bl	80009a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80004a8:	2300      	movs	r3, #0
 80004aa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80004ac:	2300      	movs	r3, #0
 80004ae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80004b0:	2300      	movs	r3, #0
 80004b2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80004b4:	2300      	movs	r3, #0
 80004b6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80004b8:	2300      	movs	r3, #0
 80004ba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80004bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004c0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80004c2:	2300      	movs	r3, #0
 80004c4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80004c6:	1d3b      	adds	r3, r7, #4
 80004c8:	4619      	mov	r1, r3
 80004ca:	4807      	ldr	r0, [pc, #28]	@ (80004e8 <MX_TIM1_Init+0x138>)
 80004cc:	f003 fa24 	bl	8003918 <HAL_TIMEx_ConfigBreakDeadTime>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80004d6:	f000 fa65 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80004da:	4803      	ldr	r0, [pc, #12]	@ (80004e8 <MX_TIM1_Init+0x138>)
 80004dc:	f000 fb26 	bl	8000b2c <HAL_TIM_MspPostInit>

}
 80004e0:	bf00      	nop
 80004e2:	3758      	adds	r7, #88	@ 0x58
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	200000b0 	.word	0x200000b0
 80004ec:	40012c00 	.word	0x40012c00

080004f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b086      	sub	sp, #24
 80004f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004f6:	f107 0308 	add.w	r3, r7, #8
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
 80004fe:	605a      	str	r2, [r3, #4]
 8000500:	609a      	str	r2, [r3, #8]
 8000502:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000504:	463b      	mov	r3, r7
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800050c:	4b1d      	ldr	r3, [pc, #116]	@ (8000584 <MX_TIM2_Init+0x94>)
 800050e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000512:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 8000514:	4b1b      	ldr	r3, [pc, #108]	@ (8000584 <MX_TIM2_Init+0x94>)
 8000516:	2207      	movs	r2, #7
 8000518:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800051a:	4b1a      	ldr	r3, [pc, #104]	@ (8000584 <MX_TIM2_Init+0x94>)
 800051c:	2200      	movs	r2, #0
 800051e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000520:	4b18      	ldr	r3, [pc, #96]	@ (8000584 <MX_TIM2_Init+0x94>)
 8000522:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000526:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000528:	4b16      	ldr	r3, [pc, #88]	@ (8000584 <MX_TIM2_Init+0x94>)
 800052a:	2200      	movs	r2, #0
 800052c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800052e:	4b15      	ldr	r3, [pc, #84]	@ (8000584 <MX_TIM2_Init+0x94>)
 8000530:	2280      	movs	r2, #128	@ 0x80
 8000532:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000534:	4813      	ldr	r0, [pc, #76]	@ (8000584 <MX_TIM2_Init+0x94>)
 8000536:	f002 f939 	bl	80027ac <HAL_TIM_Base_Init>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000540:	f000 fa30 	bl	80009a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000544:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000548:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800054a:	f107 0308 	add.w	r3, r7, #8
 800054e:	4619      	mov	r1, r3
 8000550:	480c      	ldr	r0, [pc, #48]	@ (8000584 <MX_TIM2_Init+0x94>)
 8000552:	f002 fdf1 	bl	8003138 <HAL_TIM_ConfigClockSource>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800055c:	f000 fa22 	bl	80009a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000560:	2300      	movs	r3, #0
 8000562:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000564:	2300      	movs	r3, #0
 8000566:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000568:	463b      	mov	r3, r7
 800056a:	4619      	mov	r1, r3
 800056c:	4805      	ldr	r0, [pc, #20]	@ (8000584 <MX_TIM2_Init+0x94>)
 800056e:	f003 f975 	bl	800385c <HAL_TIMEx_MasterConfigSynchronization>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000578:	f000 fa14 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800057c:	bf00      	nop
 800057e:	3718      	adds	r7, #24
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	200000f8 	.word	0x200000f8

08000588 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800058c:	4b11      	ldr	r3, [pc, #68]	@ (80005d4 <MX_USART1_UART_Init+0x4c>)
 800058e:	4a12      	ldr	r2, [pc, #72]	@ (80005d8 <MX_USART1_UART_Init+0x50>)
 8000590:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000592:	4b10      	ldr	r3, [pc, #64]	@ (80005d4 <MX_USART1_UART_Init+0x4c>)
 8000594:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000598:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800059a:	4b0e      	ldr	r3, [pc, #56]	@ (80005d4 <MX_USART1_UART_Init+0x4c>)
 800059c:	2200      	movs	r2, #0
 800059e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005a0:	4b0c      	ldr	r3, [pc, #48]	@ (80005d4 <MX_USART1_UART_Init+0x4c>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005a6:	4b0b      	ldr	r3, [pc, #44]	@ (80005d4 <MX_USART1_UART_Init+0x4c>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005ac:	4b09      	ldr	r3, [pc, #36]	@ (80005d4 <MX_USART1_UART_Init+0x4c>)
 80005ae:	220c      	movs	r2, #12
 80005b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005b2:	4b08      	ldr	r3, [pc, #32]	@ (80005d4 <MX_USART1_UART_Init+0x4c>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005b8:	4b06      	ldr	r3, [pc, #24]	@ (80005d4 <MX_USART1_UART_Init+0x4c>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005be:	4805      	ldr	r0, [pc, #20]	@ (80005d4 <MX_USART1_UART_Init+0x4c>)
 80005c0:	f003 fa0d 	bl	80039de <HAL_UART_Init>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80005ca:	f000 f9eb 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20000140 	.word	0x20000140
 80005d8:	40013800 	.word	0x40013800

080005dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b088      	sub	sp, #32
 80005e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e2:	f107 0310 	add.w	r3, r7, #16
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f0:	4b3e      	ldr	r3, [pc, #248]	@ (80006ec <MX_GPIO_Init+0x110>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	4a3d      	ldr	r2, [pc, #244]	@ (80006ec <MX_GPIO_Init+0x110>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6193      	str	r3, [r2, #24]
 80005fc:	4b3b      	ldr	r3, [pc, #236]	@ (80006ec <MX_GPIO_Init+0x110>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	f003 0310 	and.w	r3, r3, #16
 8000604:	60fb      	str	r3, [r7, #12]
 8000606:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000608:	4b38      	ldr	r3, [pc, #224]	@ (80006ec <MX_GPIO_Init+0x110>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	4a37      	ldr	r2, [pc, #220]	@ (80006ec <MX_GPIO_Init+0x110>)
 800060e:	f043 0320 	orr.w	r3, r3, #32
 8000612:	6193      	str	r3, [r2, #24]
 8000614:	4b35      	ldr	r3, [pc, #212]	@ (80006ec <MX_GPIO_Init+0x110>)
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	f003 0320 	and.w	r3, r3, #32
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000620:	4b32      	ldr	r3, [pc, #200]	@ (80006ec <MX_GPIO_Init+0x110>)
 8000622:	699b      	ldr	r3, [r3, #24]
 8000624:	4a31      	ldr	r2, [pc, #196]	@ (80006ec <MX_GPIO_Init+0x110>)
 8000626:	f043 0304 	orr.w	r3, r3, #4
 800062a:	6193      	str	r3, [r2, #24]
 800062c:	4b2f      	ldr	r3, [pc, #188]	@ (80006ec <MX_GPIO_Init+0x110>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	f003 0304 	and.w	r3, r3, #4
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000638:	4b2c      	ldr	r3, [pc, #176]	@ (80006ec <MX_GPIO_Init+0x110>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	4a2b      	ldr	r2, [pc, #172]	@ (80006ec <MX_GPIO_Init+0x110>)
 800063e:	f043 0308 	orr.w	r3, r3, #8
 8000642:	6193      	str	r3, [r2, #24]
 8000644:	4b29      	ldr	r3, [pc, #164]	@ (80006ec <MX_GPIO_Init+0x110>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	f003 0308 	and.w	r3, r3, #8
 800064c:	603b      	str	r3, [r7, #0]
 800064e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000650:	2200      	movs	r2, #0
 8000652:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000656:	4826      	ldr	r0, [pc, #152]	@ (80006f0 <MX_GPIO_Init+0x114>)
 8000658:	f001 fb99 	bl	8001d8e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800065c:	2200      	movs	r2, #0
 800065e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000662:	4824      	ldr	r0, [pc, #144]	@ (80006f4 <MX_GPIO_Init+0x118>)
 8000664:	f001 fb93 	bl	8001d8e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000668:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800066c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066e:	2301      	movs	r3, #1
 8000670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000676:	2302      	movs	r3, #2
 8000678:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800067a:	f107 0310 	add.w	r3, r7, #16
 800067e:	4619      	mov	r1, r3
 8000680:	481b      	ldr	r0, [pc, #108]	@ (80006f0 <MX_GPIO_Init+0x114>)
 8000682:	f001 f9e9 	bl	8001a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000686:	2308      	movs	r3, #8
 8000688:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800068a:	2300      	movs	r3, #0
 800068c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800068e:	2301      	movs	r3, #1
 8000690:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000692:	f107 0310 	add.w	r3, r7, #16
 8000696:	4619      	mov	r1, r3
 8000698:	4816      	ldr	r0, [pc, #88]	@ (80006f4 <MX_GPIO_Init+0x118>)
 800069a:	f001 f9dd 	bl	8001a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800069e:	2301      	movs	r3, #1
 80006a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80006a2:	4b15      	ldr	r3, [pc, #84]	@ (80006f8 <MX_GPIO_Init+0x11c>)
 80006a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006a6:	2301      	movs	r3, #1
 80006a8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006aa:	f107 0310 	add.w	r3, r7, #16
 80006ae:	4619      	mov	r1, r3
 80006b0:	4812      	ldr	r0, [pc, #72]	@ (80006fc <MX_GPIO_Init+0x120>)
 80006b2:	f001 f9d1 	bl	8001a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80006b6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80006ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006bc:	2301      	movs	r3, #1
 80006be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c4:	2302      	movs	r3, #2
 80006c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c8:	f107 0310 	add.w	r3, r7, #16
 80006cc:	4619      	mov	r1, r3
 80006ce:	4809      	ldr	r0, [pc, #36]	@ (80006f4 <MX_GPIO_Init+0x118>)
 80006d0:	f001 f9c2 	bl	8001a58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80006d4:	2200      	movs	r2, #0
 80006d6:	2100      	movs	r1, #0
 80006d8:	2006      	movs	r0, #6
 80006da:	f001 f8d4 	bl	8001886 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80006de:	2006      	movs	r0, #6
 80006e0:	f001 f8ed 	bl	80018be <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80006e4:	bf00      	nop
 80006e6:	3720      	adds	r7, #32
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	40021000 	.word	0x40021000
 80006f0:	40011000 	.word	0x40011000
 80006f4:	40010800 	.word	0x40010800
 80006f8:	10310000 	.word	0x10310000
 80006fc:	40010c00 	.word	0x40010c00

08000700 <HAL_TIM_PWM_PulseFinishedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1){
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a20      	ldr	r2, [pc, #128]	@ (8000790 <HAL_TIM_PWM_PulseFinishedCallback+0x90>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d138      	bne.n	8000784 <HAL_TIM_PWM_PulseFinishedCallback+0x84>

		if(mode == 4){
 8000712:	4b20      	ldr	r3, [pc, #128]	@ (8000794 <HAL_TIM_PWM_PulseFinishedCallback+0x94>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	2b04      	cmp	r3, #4
 8000718:	d116      	bne.n	8000748 <HAL_TIM_PWM_PulseFinishedCallback+0x48>
			pwm_value =( adc * 999 ) / 4095;
 800071a:	4b1f      	ldr	r3, [pc, #124]	@ (8000798 <HAL_TIM_PWM_PulseFinishedCallback+0x98>)
 800071c:	881b      	ldrh	r3, [r3, #0]
 800071e:	461a      	mov	r2, r3
 8000720:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8000724:	fb02 f303 	mul.w	r3, r2, r3
 8000728:	4a1c      	ldr	r2, [pc, #112]	@ (800079c <HAL_TIM_PWM_PulseFinishedCallback+0x9c>)
 800072a:	fb82 1203 	smull	r1, r2, r2, r3
 800072e:	441a      	add	r2, r3
 8000730:	12d2      	asrs	r2, r2, #11
 8000732:	17db      	asrs	r3, r3, #31
 8000734:	1ad3      	subs	r3, r2, r3
 8000736:	b29a      	uxth	r2, r3
 8000738:	4b19      	ldr	r3, [pc, #100]	@ (80007a0 <HAL_TIM_PWM_PulseFinishedCallback+0xa0>)
 800073a:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_value);
 800073c:	4b18      	ldr	r3, [pc, #96]	@ (80007a0 <HAL_TIM_PWM_PulseFinishedCallback+0xa0>)
 800073e:	881a      	ldrh	r2, [r3, #0]
 8000740:	4b18      	ldr	r3, [pc, #96]	@ (80007a4 <HAL_TIM_PWM_PulseFinishedCallback+0xa4>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	635a      	str	r2, [r3, #52]	@ 0x34

					}
		}

	}
}
 8000746:	e01d      	b.n	8000784 <HAL_TIM_PWM_PulseFinishedCallback+0x84>
					counter ++;
 8000748:	4b17      	ldr	r3, [pc, #92]	@ (80007a8 <HAL_TIM_PWM_PulseFinishedCallback+0xa8>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	3301      	adds	r3, #1
 800074e:	4a16      	ldr	r2, [pc, #88]	@ (80007a8 <HAL_TIM_PWM_PulseFinishedCallback+0xa8>)
 8000750:	6013      	str	r3, [r2, #0]
					if(counter == 50){
 8000752:	4b15      	ldr	r3, [pc, #84]	@ (80007a8 <HAL_TIM_PWM_PulseFinishedCallback+0xa8>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	2b32      	cmp	r3, #50	@ 0x32
 8000758:	d10c      	bne.n	8000774 <HAL_TIM_PWM_PulseFinishedCallback+0x74>
						counter=0;
 800075a:	4b13      	ldr	r3, [pc, #76]	@ (80007a8 <HAL_TIM_PWM_PulseFinishedCallback+0xa8>)
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
						pulse+=10;
 8000760:	4b12      	ldr	r3, [pc, #72]	@ (80007ac <HAL_TIM_PWM_PulseFinishedCallback+0xac>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	330a      	adds	r3, #10
 8000766:	4a11      	ldr	r2, [pc, #68]	@ (80007ac <HAL_TIM_PWM_PulseFinishedCallback+0xac>)
 8000768:	6013      	str	r3, [r2, #0]
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse);
 800076a:	4b10      	ldr	r3, [pc, #64]	@ (80007ac <HAL_TIM_PWM_PulseFinishedCallback+0xac>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b0d      	ldr	r3, [pc, #52]	@ (80007a4 <HAL_TIM_PWM_PulseFinishedCallback+0xa4>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	635a      	str	r2, [r3, #52]	@ 0x34
					if(pulse >= 1000){
 8000774:	4b0d      	ldr	r3, [pc, #52]	@ (80007ac <HAL_TIM_PWM_PulseFinishedCallback+0xac>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800077c:	db02      	blt.n	8000784 <HAL_TIM_PWM_PulseFinishedCallback+0x84>
						pulse = 0;
 800077e:	4b0b      	ldr	r3, [pc, #44]	@ (80007ac <HAL_TIM_PWM_PulseFinishedCallback+0xac>)
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
}
 8000784:	bf00      	nop
 8000786:	370c      	adds	r7, #12
 8000788:	46bd      	mov	sp, r7
 800078a:	bc80      	pop	{r7}
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	40012c00 	.word	0x40012c00
 8000794:	20000004 	.word	0x20000004
 8000798:	200001a0 	.word	0x200001a0
 800079c:	80080081 	.word	0x80080081
 80007a0:	200001a2 	.word	0x200001a2
 80007a4:	200000b0 	.word	0x200000b0
 80007a8:	2000018c 	.word	0x2000018c
 80007ac:	20000188 	.word	0x20000188

080007b0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80007c0:	d112      	bne.n	80007e8 <HAL_TIM_PeriodElapsedCallback+0x38>
		counter2++;
 80007c2:	4b0b      	ldr	r3, [pc, #44]	@ (80007f0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	3301      	adds	r3, #1
 80007c8:	4a09      	ldr	r2, [pc, #36]	@ (80007f0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80007ca:	6013      	str	r3, [r2, #0]
//		if(buttonstate == 0 && flag ==0)
//			flag+=1;
//		else if(buttonstate == 0 && flag ==1 )
//			flag =0;

		if(counter2 >= delay){
 80007cc:	4b08      	ldr	r3, [pc, #32]	@ (80007f0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80007ce:	681a      	ldr	r2, [r3, #0]
 80007d0:	4b08      	ldr	r3, [pc, #32]	@ (80007f4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	429a      	cmp	r2, r3
 80007d6:	db07      	blt.n	80007e8 <HAL_TIM_PeriodElapsedCallback+0x38>
			counter2=0;
 80007d8:	4b05      	ldr	r3, [pc, #20]	@ (80007f0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11);
 80007de:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007e2:	4805      	ldr	r0, [pc, #20]	@ (80007f8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80007e4:	f001 faeb 	bl	8001dbe <HAL_GPIO_TogglePin>
		}
	}
}
 80007e8:	bf00      	nop
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000190 	.word	0x20000190
 80007f4:	20000000 	.word	0x20000000
 80007f8:	40010800 	.word	0x40010800

080007fc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0){
 8000806:	88fb      	ldrh	r3, [r7, #6]
 8000808:	2b01      	cmp	r3, #1
 800080a:	d148      	bne.n	800089e <HAL_GPIO_EXTI_Callback+0xa2>

		if(HAL_GetTick() - lastInterrupt < 100){
 800080c:	f000 fb36 	bl	8000e7c <HAL_GetTick>
 8000810:	4603      	mov	r3, r0
 8000812:	4a24      	ldr	r2, [pc, #144]	@ (80008a4 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000814:	6812      	ldr	r2, [r2, #0]
 8000816:	1a9b      	subs	r3, r3, r2
 8000818:	2b63      	cmp	r3, #99	@ 0x63
 800081a:	d806      	bhi.n	800082a <HAL_GPIO_EXTI_Callback+0x2e>
			lastInterrupt = HAL_GetTick();
 800081c:	f000 fb2e 	bl	8000e7c <HAL_GetTick>
 8000820:	4603      	mov	r3, r0
 8000822:	461a      	mov	r2, r3
 8000824:	4b1f      	ldr	r3, [pc, #124]	@ (80008a4 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000826:	601a      	str	r2, [r3, #0]
			return;
 8000828:	e039      	b.n	800089e <HAL_GPIO_EXTI_Callback+0xa2>
		}
		lastInterrupt = HAL_GetTick();
 800082a:	f000 fb27 	bl	8000e7c <HAL_GetTick>
 800082e:	4603      	mov	r3, r0
 8000830:	461a      	mov	r2, r3
 8000832:	4b1c      	ldr	r3, [pc, #112]	@ (80008a4 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000834:	601a      	str	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET){
 8000836:	2101      	movs	r1, #1
 8000838:	481b      	ldr	r0, [pc, #108]	@ (80008a8 <HAL_GPIO_EXTI_Callback+0xac>)
 800083a:	f001 fa91 	bl	8001d60 <HAL_GPIO_ReadPin>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d106      	bne.n	8000852 <HAL_GPIO_EXTI_Callback+0x56>
			firsttick = HAL_GetTick();
 8000844:	f000 fb1a 	bl	8000e7c <HAL_GetTick>
 8000848:	4603      	mov	r3, r0
 800084a:	461a      	mov	r2, r3
 800084c:	4b17      	ldr	r3, [pc, #92]	@ (80008ac <HAL_GPIO_EXTI_Callback+0xb0>)
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	e025      	b.n	800089e <HAL_GPIO_EXTI_Callback+0xa2>
		}
		else {

				holdtime = HAL_GetTick() - firsttick;
 8000852:	f000 fb13 	bl	8000e7c <HAL_GetTick>
 8000856:	4603      	mov	r3, r0
 8000858:	4a14      	ldr	r2, [pc, #80]	@ (80008ac <HAL_GPIO_EXTI_Callback+0xb0>)
 800085a:	6812      	ldr	r2, [r2, #0]
 800085c:	1a9b      	subs	r3, r3, r2
 800085e:	461a      	mov	r2, r3
 8000860:	4b13      	ldr	r3, [pc, #76]	@ (80008b0 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000862:	601a      	str	r2, [r3, #0]
				if(holdtime < 3000 ){
 8000864:	4b12      	ldr	r3, [pc, #72]	@ (80008b0 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 800086c:	4293      	cmp	r3, r2
 800086e:	dc0d      	bgt.n	800088c <HAL_GPIO_EXTI_Callback+0x90>
					mode++;
 8000870:	4b10      	ldr	r3, [pc, #64]	@ (80008b4 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	3301      	adds	r3, #1
 8000876:	b2da      	uxtb	r2, r3
 8000878:	4b0e      	ldr	r3, [pc, #56]	@ (80008b4 <HAL_GPIO_EXTI_Callback+0xb8>)
 800087a:	701a      	strb	r2, [r3, #0]
					if(mode > 4) mode = 1;
 800087c:	4b0d      	ldr	r3, [pc, #52]	@ (80008b4 <HAL_GPIO_EXTI_Callback+0xb8>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b04      	cmp	r3, #4
 8000882:	d90c      	bls.n	800089e <HAL_GPIO_EXTI_Callback+0xa2>
 8000884:	4b0b      	ldr	r3, [pc, #44]	@ (80008b4 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000886:	2201      	movs	r2, #1
 8000888:	701a      	strb	r2, [r3, #0]
 800088a:	e008      	b.n	800089e <HAL_GPIO_EXTI_Callback+0xa2>
				}
				else if(holdtime >= 3000){
 800088c:	4b08      	ldr	r3, [pc, #32]	@ (80008b0 <HAL_GPIO_EXTI_Callback+0xb4>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8000894:	4293      	cmp	r3, r2
 8000896:	dd02      	ble.n	800089e <HAL_GPIO_EXTI_Callback+0xa2>

					mode = 5 ;
 8000898:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <HAL_GPIO_EXTI_Callback+0xb8>)
 800089a:	2205      	movs	r2, #5
 800089c:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	2000019c 	.word	0x2000019c
 80008a8:	40010c00 	.word	0x40010c00
 80008ac:	20000194 	.word	0x20000194
 80008b0:	20000198 	.word	0x20000198
 80008b4:	20000004 	.word	0x20000004

080008b8 <HAL_UART_RxCpltCallback>:





void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
	if( huart->Instance ==huart1.Instance){
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000934 <HAL_UART_RxCpltCallback+0x7c>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d12f      	bne.n	800092c <HAL_UART_RxCpltCallback+0x74>
		switch(Rx){
 80008cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000938 <HAL_UART_RxCpltCallback+0x80>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b33      	cmp	r3, #51	@ 0x33
 80008d2:	d01e      	beq.n	8000912 <HAL_UART_RxCpltCallback+0x5a>
 80008d4:	2b33      	cmp	r3, #51	@ 0x33
 80008d6:	dc23      	bgt.n	8000920 <HAL_UART_RxCpltCallback+0x68>
 80008d8:	2b31      	cmp	r3, #49	@ 0x31
 80008da:	d002      	beq.n	80008e2 <HAL_UART_RxCpltCallback+0x2a>
 80008dc:	2b32      	cmp	r3, #50	@ 0x32
 80008de:	d00c      	beq.n	80008fa <HAL_UART_RxCpltCallback+0x42>
		case '3':

			mode = 3;
			HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
		default:
			break;
 80008e0:	e01e      	b.n	8000920 <HAL_UART_RxCpltCallback+0x68>
			  HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 80008e2:	2100      	movs	r1, #0
 80008e4:	4815      	ldr	r0, [pc, #84]	@ (800093c <HAL_UART_RxCpltCallback+0x84>)
 80008e6:	f002 f9c3 	bl	8002c70 <HAL_TIM_PWM_Stop_IT>
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 80008ea:	4b15      	ldr	r3, [pc, #84]	@ (8000940 <HAL_UART_RxCpltCallback+0x88>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	2200      	movs	r2, #0
 80008f0:	625a      	str	r2, [r3, #36]	@ 0x24
			mode = 1;
 80008f2:	4b14      	ldr	r3, [pc, #80]	@ (8000944 <HAL_UART_RxCpltCallback+0x8c>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	701a      	strb	r2, [r3, #0]
			break;
 80008f8:	e013      	b.n	8000922 <HAL_UART_RxCpltCallback+0x6a>
			  HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 80008fa:	2100      	movs	r1, #0
 80008fc:	480f      	ldr	r0, [pc, #60]	@ (800093c <HAL_UART_RxCpltCallback+0x84>)
 80008fe:	f002 f9b7 	bl	8002c70 <HAL_TIM_PWM_Stop_IT>
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000902:	4b0f      	ldr	r3, [pc, #60]	@ (8000940 <HAL_UART_RxCpltCallback+0x88>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	2200      	movs	r2, #0
 8000908:	625a      	str	r2, [r3, #36]	@ 0x24
			mode = 2;
 800090a:	4b0e      	ldr	r3, [pc, #56]	@ (8000944 <HAL_UART_RxCpltCallback+0x8c>)
 800090c:	2202      	movs	r2, #2
 800090e:	701a      	strb	r2, [r3, #0]
			break;
 8000910:	e007      	b.n	8000922 <HAL_UART_RxCpltCallback+0x6a>
			mode = 3;
 8000912:	4b0c      	ldr	r3, [pc, #48]	@ (8000944 <HAL_UART_RxCpltCallback+0x8c>)
 8000914:	2203      	movs	r2, #3
 8000916:	701a      	strb	r2, [r3, #0]
			HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8000918:	2100      	movs	r1, #0
 800091a:	4808      	ldr	r0, [pc, #32]	@ (800093c <HAL_UART_RxCpltCallback+0x84>)
 800091c:	f002 f8b8 	bl	8002a90 <HAL_TIM_PWM_Start_IT>
			break;
 8000920:	bf00      	nop
		}
		HAL_UART_Receive_IT(&huart1, (uint8_t*)&Rx, 1);
 8000922:	2201      	movs	r2, #1
 8000924:	4904      	ldr	r1, [pc, #16]	@ (8000938 <HAL_UART_RxCpltCallback+0x80>)
 8000926:	4803      	ldr	r0, [pc, #12]	@ (8000934 <HAL_UART_RxCpltCallback+0x7c>)
 8000928:	f003 f934 	bl	8003b94 <HAL_UART_Receive_IT>
	}

}
 800092c:	bf00      	nop
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	20000140 	.word	0x20000140
 8000938:	200001a4 	.word	0x200001a4
 800093c:	200000b0 	.word	0x200000b0
 8000940:	200000f8 	.word	0x200000f8
 8000944:	20000004 	.word	0x20000004

08000948 <mode3>:
void mode3(){
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
	  if(pulse >= 1000) {
 800094c:	4b0c      	ldr	r3, [pc, #48]	@ (8000980 <mode3+0x38>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000954:	db05      	blt.n	8000962 <mode3+0x1a>
		  pulse =0;
 8000956:	4b0a      	ldr	r3, [pc, #40]	@ (8000980 <mode3+0x38>)
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
		  HAL_Delay(20);
 800095c:	2014      	movs	r0, #20
 800095e:	f000 fa97 	bl	8000e90 <HAL_Delay>
	  }
	  pulse+=10;
 8000962:	4b07      	ldr	r3, [pc, #28]	@ (8000980 <mode3+0x38>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	330a      	adds	r3, #10
 8000968:	4a05      	ldr	r2, [pc, #20]	@ (8000980 <mode3+0x38>)
 800096a:	6013      	str	r3, [r2, #0]
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1 , pulse );
 800096c:	4b04      	ldr	r3, [pc, #16]	@ (8000980 <mode3+0x38>)
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	4b04      	ldr	r3, [pc, #16]	@ (8000984 <mode3+0x3c>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	635a      	str	r2, [r3, #52]	@ 0x34
	  HAL_Delay(20);
 8000976:	2014      	movs	r0, #20
 8000978:	f000 fa8a 	bl	8000e90 <HAL_Delay>
}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000188 	.word	0x20000188
 8000984:	200000b0 	.word	0x200000b0

08000988 <setdelay>:
		  __HAL_TIM_SET_COUNTER(&htim2, 0);
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11 );
	  }

}
void setdelay( int time){
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
	delay = time;
 8000990:	4a03      	ldr	r2, [pc, #12]	@ (80009a0 <setdelay+0x18>)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	6013      	str	r3, [r2, #0]
}
 8000996:	bf00      	nop
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	bc80      	pop	{r7}
 800099e:	4770      	bx	lr
 80009a0:	20000000 	.word	0x20000000

080009a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a8:	b672      	cpsid	i
}
 80009aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ac:	bf00      	nop
 80009ae:	e7fd      	b.n	80009ac <Error_Handler+0x8>

080009b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009b6:	4b15      	ldr	r3, [pc, #84]	@ (8000a0c <HAL_MspInit+0x5c>)
 80009b8:	699b      	ldr	r3, [r3, #24]
 80009ba:	4a14      	ldr	r2, [pc, #80]	@ (8000a0c <HAL_MspInit+0x5c>)
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	6193      	str	r3, [r2, #24]
 80009c2:	4b12      	ldr	r3, [pc, #72]	@ (8000a0c <HAL_MspInit+0x5c>)
 80009c4:	699b      	ldr	r3, [r3, #24]
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	60bb      	str	r3, [r7, #8]
 80009cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ce:	4b0f      	ldr	r3, [pc, #60]	@ (8000a0c <HAL_MspInit+0x5c>)
 80009d0:	69db      	ldr	r3, [r3, #28]
 80009d2:	4a0e      	ldr	r2, [pc, #56]	@ (8000a0c <HAL_MspInit+0x5c>)
 80009d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009d8:	61d3      	str	r3, [r2, #28]
 80009da:	4b0c      	ldr	r3, [pc, #48]	@ (8000a0c <HAL_MspInit+0x5c>)
 80009dc:	69db      	ldr	r3, [r3, #28]
 80009de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000a10 <HAL_MspInit+0x60>)
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	4a04      	ldr	r2, [pc, #16]	@ (8000a10 <HAL_MspInit+0x60>)
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a02:	bf00      	nop
 8000a04:	3714      	adds	r7, #20
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr
 8000a0c:	40021000 	.word	0x40021000
 8000a10:	40010000 	.word	0x40010000

08000a14 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b088      	sub	sp, #32
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	f107 0310 	add.w	r3, r7, #16
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4a18      	ldr	r2, [pc, #96]	@ (8000a90 <HAL_ADC_MspInit+0x7c>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d129      	bne.n	8000a88 <HAL_ADC_MspInit+0x74>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a34:	4b17      	ldr	r3, [pc, #92]	@ (8000a94 <HAL_ADC_MspInit+0x80>)
 8000a36:	699b      	ldr	r3, [r3, #24]
 8000a38:	4a16      	ldr	r2, [pc, #88]	@ (8000a94 <HAL_ADC_MspInit+0x80>)
 8000a3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a3e:	6193      	str	r3, [r2, #24]
 8000a40:	4b14      	ldr	r3, [pc, #80]	@ (8000a94 <HAL_ADC_MspInit+0x80>)
 8000a42:	699b      	ldr	r3, [r3, #24]
 8000a44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4c:	4b11      	ldr	r3, [pc, #68]	@ (8000a94 <HAL_ADC_MspInit+0x80>)
 8000a4e:	699b      	ldr	r3, [r3, #24]
 8000a50:	4a10      	ldr	r2, [pc, #64]	@ (8000a94 <HAL_ADC_MspInit+0x80>)
 8000a52:	f043 0304 	orr.w	r3, r3, #4
 8000a56:	6193      	str	r3, [r2, #24]
 8000a58:	4b0e      	ldr	r3, [pc, #56]	@ (8000a94 <HAL_ADC_MspInit+0x80>)
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	f003 0304 	and.w	r3, r3, #4
 8000a60:	60bb      	str	r3, [r7, #8]
 8000a62:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a64:	2320      	movs	r3, #32
 8000a66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6c:	f107 0310 	add.w	r3, r7, #16
 8000a70:	4619      	mov	r1, r3
 8000a72:	4809      	ldr	r0, [pc, #36]	@ (8000a98 <HAL_ADC_MspInit+0x84>)
 8000a74:	f000 fff0 	bl	8001a58 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	2012      	movs	r0, #18
 8000a7e:	f000 ff02 	bl	8001886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000a82:	2012      	movs	r0, #18
 8000a84:	f000 ff1b 	bl	80018be <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000a88:	bf00      	nop
 8000a8a:	3720      	adds	r7, #32
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40012400 	.word	0x40012400
 8000a94:	40021000 	.word	0x40021000
 8000a98:	40010800 	.word	0x40010800

08000a9c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a1e      	ldr	r2, [pc, #120]	@ (8000b24 <HAL_TIM_Base_MspInit+0x88>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d11c      	bne.n	8000ae8 <HAL_TIM_Base_MspInit+0x4c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000aae:	4b1e      	ldr	r3, [pc, #120]	@ (8000b28 <HAL_TIM_Base_MspInit+0x8c>)
 8000ab0:	699b      	ldr	r3, [r3, #24]
 8000ab2:	4a1d      	ldr	r2, [pc, #116]	@ (8000b28 <HAL_TIM_Base_MspInit+0x8c>)
 8000ab4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000ab8:	6193      	str	r3, [r2, #24]
 8000aba:	4b1b      	ldr	r3, [pc, #108]	@ (8000b28 <HAL_TIM_Base_MspInit+0x8c>)
 8000abc:	699b      	ldr	r3, [r3, #24]
 8000abe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2100      	movs	r1, #0
 8000aca:	2019      	movs	r0, #25
 8000acc:	f000 fedb 	bl	8001886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000ad0:	2019      	movs	r0, #25
 8000ad2:	f000 fef4 	bl	80018be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2100      	movs	r1, #0
 8000ada:	201b      	movs	r0, #27
 8000adc:	f000 fed3 	bl	8001886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000ae0:	201b      	movs	r0, #27
 8000ae2:	f000 feec 	bl	80018be <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ae6:	e018      	b.n	8000b1a <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM2)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000af0:	d113      	bne.n	8000b1a <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000af2:	4b0d      	ldr	r3, [pc, #52]	@ (8000b28 <HAL_TIM_Base_MspInit+0x8c>)
 8000af4:	69db      	ldr	r3, [r3, #28]
 8000af6:	4a0c      	ldr	r2, [pc, #48]	@ (8000b28 <HAL_TIM_Base_MspInit+0x8c>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	61d3      	str	r3, [r2, #28]
 8000afe:	4b0a      	ldr	r3, [pc, #40]	@ (8000b28 <HAL_TIM_Base_MspInit+0x8c>)
 8000b00:	69db      	ldr	r3, [r3, #28]
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	60bb      	str	r3, [r7, #8]
 8000b08:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	201c      	movs	r0, #28
 8000b10:	f000 feb9 	bl	8001886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b14:	201c      	movs	r0, #28
 8000b16:	f000 fed2 	bl	80018be <HAL_NVIC_EnableIRQ>
}
 8000b1a:	bf00      	nop
 8000b1c:	3710      	adds	r7, #16
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40012c00 	.word	0x40012c00
 8000b28:	40021000 	.word	0x40021000

08000b2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b088      	sub	sp, #32
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b34:	f107 0310 	add.w	r3, r7, #16
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a10      	ldr	r2, [pc, #64]	@ (8000b88 <HAL_TIM_MspPostInit+0x5c>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d118      	bne.n	8000b7e <HAL_TIM_MspPostInit+0x52>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b8c <HAL_TIM_MspPostInit+0x60>)
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	4a0e      	ldr	r2, [pc, #56]	@ (8000b8c <HAL_TIM_MspPostInit+0x60>)
 8000b52:	f043 0304 	orr.w	r3, r3, #4
 8000b56:	6193      	str	r3, [r2, #24]
 8000b58:	4b0c      	ldr	r3, [pc, #48]	@ (8000b8c <HAL_TIM_MspPostInit+0x60>)
 8000b5a:	699b      	ldr	r3, [r3, #24]
 8000b5c:	f003 0304 	and.w	r3, r3, #4
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b64:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b72:	f107 0310 	add.w	r3, r7, #16
 8000b76:	4619      	mov	r1, r3
 8000b78:	4805      	ldr	r0, [pc, #20]	@ (8000b90 <HAL_TIM_MspPostInit+0x64>)
 8000b7a:	f000 ff6d 	bl	8001a58 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000b7e:	bf00      	nop
 8000b80:	3720      	adds	r7, #32
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40012c00 	.word	0x40012c00
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	40010800 	.word	0x40010800

08000b94 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b088      	sub	sp, #32
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 0310 	add.w	r3, r7, #16
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a20      	ldr	r2, [pc, #128]	@ (8000c30 <HAL_UART_MspInit+0x9c>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d139      	bne.n	8000c28 <HAL_UART_MspInit+0x94>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bb4:	4b1f      	ldr	r3, [pc, #124]	@ (8000c34 <HAL_UART_MspInit+0xa0>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	4a1e      	ldr	r2, [pc, #120]	@ (8000c34 <HAL_UART_MspInit+0xa0>)
 8000bba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bbe:	6193      	str	r3, [r2, #24]
 8000bc0:	4b1c      	ldr	r3, [pc, #112]	@ (8000c34 <HAL_UART_MspInit+0xa0>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bcc:	4b19      	ldr	r3, [pc, #100]	@ (8000c34 <HAL_UART_MspInit+0xa0>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	4a18      	ldr	r2, [pc, #96]	@ (8000c34 <HAL_UART_MspInit+0xa0>)
 8000bd2:	f043 0304 	orr.w	r3, r3, #4
 8000bd6:	6193      	str	r3, [r2, #24]
 8000bd8:	4b16      	ldr	r3, [pc, #88]	@ (8000c34 <HAL_UART_MspInit+0xa0>)
 8000bda:	699b      	ldr	r3, [r3, #24]
 8000bdc:	f003 0304 	and.w	r3, r3, #4
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000be4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000be8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bee:	2303      	movs	r3, #3
 8000bf0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf2:	f107 0310 	add.w	r3, r7, #16
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	480f      	ldr	r0, [pc, #60]	@ (8000c38 <HAL_UART_MspInit+0xa4>)
 8000bfa:	f000 ff2d 	bl	8001a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bfe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0c:	f107 0310 	add.w	r3, r7, #16
 8000c10:	4619      	mov	r1, r3
 8000c12:	4809      	ldr	r0, [pc, #36]	@ (8000c38 <HAL_UART_MspInit+0xa4>)
 8000c14:	f000 ff20 	bl	8001a58 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	2025      	movs	r0, #37	@ 0x25
 8000c1e:	f000 fe32 	bl	8001886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c22:	2025      	movs	r0, #37	@ 0x25
 8000c24:	f000 fe4b 	bl	80018be <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000c28:	bf00      	nop
 8000c2a:	3720      	adds	r7, #32
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40013800 	.word	0x40013800
 8000c34:	40021000 	.word	0x40021000
 8000c38:	40010800 	.word	0x40010800

08000c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <NMI_Handler+0x4>

08000c44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c48:	bf00      	nop
 8000c4a:	e7fd      	b.n	8000c48 <HardFault_Handler+0x4>

08000c4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <MemManage_Handler+0x4>

08000c54 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c58:	bf00      	nop
 8000c5a:	e7fd      	b.n	8000c58 <BusFault_Handler+0x4>

08000c5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c60:	bf00      	nop
 8000c62:	e7fd      	b.n	8000c60 <UsageFault_Handler+0x4>

08000c64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bc80      	pop	{r7}
 8000c6e:	4770      	bx	lr

08000c70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bc80      	pop	{r7}
 8000c7a:	4770      	bx	lr

08000c7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc80      	pop	{r7}
 8000c86:	4770      	bx	lr

08000c88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c8c:	f000 f8e4 	bl	8000e58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000c98:	2001      	movs	r0, #1
 8000c9a:	f001 f8a9 	bl	8001df0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
	...

08000ca4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000ca8:	4802      	ldr	r0, [pc, #8]	@ (8000cb4 <ADC1_2_IRQHandler+0x10>)
 8000caa:	f000 faa7 	bl	80011fc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000080 	.word	0x20000080

08000cb8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cbc:	4802      	ldr	r0, [pc, #8]	@ (8000cc8 <TIM1_UP_IRQHandler+0x10>)
 8000cbe:	f002 f889 	bl	8002dd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	200000b0 	.word	0x200000b0

08000ccc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cd0:	4802      	ldr	r0, [pc, #8]	@ (8000cdc <TIM1_CC_IRQHandler+0x10>)
 8000cd2:	f002 f87f 	bl	8002dd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	200000b0 	.word	0x200000b0

08000ce0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ce4:	4802      	ldr	r0, [pc, #8]	@ (8000cf0 <TIM2_IRQHandler+0x10>)
 8000ce6:	f002 f875 	bl	8002dd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	200000f8 	.word	0x200000f8

08000cf4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000cf8:	4802      	ldr	r0, [pc, #8]	@ (8000d04 <USART1_IRQHandler+0x10>)
 8000cfa:	f002 ff71 	bl	8003be0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000140 	.word	0x20000140

08000d08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d10:	4a14      	ldr	r2, [pc, #80]	@ (8000d64 <_sbrk+0x5c>)
 8000d12:	4b15      	ldr	r3, [pc, #84]	@ (8000d68 <_sbrk+0x60>)
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d1c:	4b13      	ldr	r3, [pc, #76]	@ (8000d6c <_sbrk+0x64>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d102      	bne.n	8000d2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d24:	4b11      	ldr	r3, [pc, #68]	@ (8000d6c <_sbrk+0x64>)
 8000d26:	4a12      	ldr	r2, [pc, #72]	@ (8000d70 <_sbrk+0x68>)
 8000d28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d2a:	4b10      	ldr	r3, [pc, #64]	@ (8000d6c <_sbrk+0x64>)
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4413      	add	r3, r2
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d207      	bcs.n	8000d48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d38:	f003 fcfa 	bl	8004730 <__errno>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	220c      	movs	r2, #12
 8000d40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d42:	f04f 33ff 	mov.w	r3, #4294967295
 8000d46:	e009      	b.n	8000d5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d48:	4b08      	ldr	r3, [pc, #32]	@ (8000d6c <_sbrk+0x64>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d4e:	4b07      	ldr	r3, [pc, #28]	@ (8000d6c <_sbrk+0x64>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4413      	add	r3, r2
 8000d56:	4a05      	ldr	r2, [pc, #20]	@ (8000d6c <_sbrk+0x64>)
 8000d58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3718      	adds	r7, #24
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20005000 	.word	0x20005000
 8000d68:	00000400 	.word	0x00000400
 8000d6c:	200001a8 	.word	0x200001a8
 8000d70:	200002f8 	.word	0x200002f8

08000d74 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bc80      	pop	{r7}
 8000d7e:	4770      	bx	lr

08000d80 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d80:	f7ff fff8 	bl	8000d74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d84:	480b      	ldr	r0, [pc, #44]	@ (8000db4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d86:	490c      	ldr	r1, [pc, #48]	@ (8000db8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d88:	4a0c      	ldr	r2, [pc, #48]	@ (8000dbc <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d8c:	e002      	b.n	8000d94 <LoopCopyDataInit>

08000d8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d92:	3304      	adds	r3, #4

08000d94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d98:	d3f9      	bcc.n	8000d8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d9a:	4a09      	ldr	r2, [pc, #36]	@ (8000dc0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d9c:	4c09      	ldr	r4, [pc, #36]	@ (8000dc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da0:	e001      	b.n	8000da6 <LoopFillZerobss>

08000da2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000da2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da4:	3204      	adds	r2, #4

08000da6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000da6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da8:	d3fb      	bcc.n	8000da2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000daa:	f003 fcc7 	bl	800473c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dae:	f7ff f9cd 	bl	800014c <main>
  bx lr
 8000db2:	4770      	bx	lr
  ldr r0, =_sdata
 8000db4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db8:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000dbc:	080050d0 	.word	0x080050d0
  ldr r2, =_sbss
 8000dc0:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000dc4:	200002f8 	.word	0x200002f8

08000dc8 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dc8:	e7fe      	b.n	8000dc8 <CAN1_RX1_IRQHandler>
	...

08000dcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd0:	4b08      	ldr	r3, [pc, #32]	@ (8000df4 <HAL_Init+0x28>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a07      	ldr	r2, [pc, #28]	@ (8000df4 <HAL_Init+0x28>)
 8000dd6:	f043 0310 	orr.w	r3, r3, #16
 8000dda:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ddc:	2003      	movs	r0, #3
 8000dde:	f000 fd47 	bl	8001870 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000de2:	200f      	movs	r0, #15
 8000de4:	f000 f808 	bl	8000df8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000de8:	f7ff fde2 	bl	80009b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40022000 	.word	0x40022000

08000df8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e00:	4b12      	ldr	r3, [pc, #72]	@ (8000e4c <HAL_InitTick+0x54>)
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	4b12      	ldr	r3, [pc, #72]	@ (8000e50 <HAL_InitTick+0x58>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	4619      	mov	r1, r3
 8000e0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e16:	4618      	mov	r0, r3
 8000e18:	f000 fd5f 	bl	80018da <HAL_SYSTICK_Config>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	e00e      	b.n	8000e44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2b0f      	cmp	r3, #15
 8000e2a:	d80a      	bhi.n	8000e42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	6879      	ldr	r1, [r7, #4]
 8000e30:	f04f 30ff 	mov.w	r0, #4294967295
 8000e34:	f000 fd27 	bl	8001886 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e38:	4a06      	ldr	r2, [pc, #24]	@ (8000e54 <HAL_InitTick+0x5c>)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	e000      	b.n	8000e44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20000008 	.word	0x20000008
 8000e50:	20000010 	.word	0x20000010
 8000e54:	2000000c 	.word	0x2000000c

08000e58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e5c:	4b05      	ldr	r3, [pc, #20]	@ (8000e74 <HAL_IncTick+0x1c>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	461a      	mov	r2, r3
 8000e62:	4b05      	ldr	r3, [pc, #20]	@ (8000e78 <HAL_IncTick+0x20>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4413      	add	r3, r2
 8000e68:	4a03      	ldr	r2, [pc, #12]	@ (8000e78 <HAL_IncTick+0x20>)
 8000e6a:	6013      	str	r3, [r2, #0]
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr
 8000e74:	20000010 	.word	0x20000010
 8000e78:	200001ac 	.word	0x200001ac

08000e7c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e80:	4b02      	ldr	r3, [pc, #8]	@ (8000e8c <HAL_GetTick+0x10>)
 8000e82:	681b      	ldr	r3, [r3, #0]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr
 8000e8c:	200001ac 	.word	0x200001ac

08000e90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e98:	f7ff fff0 	bl	8000e7c <HAL_GetTick>
 8000e9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ea8:	d005      	beq.n	8000eb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed4 <HAL_Delay+0x44>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000eb6:	bf00      	nop
 8000eb8:	f7ff ffe0 	bl	8000e7c <HAL_GetTick>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	68fa      	ldr	r2, [r7, #12]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d8f7      	bhi.n	8000eb8 <HAL_Delay+0x28>
  {
  }
}
 8000ec8:	bf00      	nop
 8000eca:	bf00      	nop
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000010 	.word	0x20000010

08000ed8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000eec:	2300      	movs	r3, #0
 8000eee:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d101      	bne.n	8000efa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e0be      	b.n	8001078 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d109      	bne.n	8000f1c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2200      	movs	r2, #0
 8000f12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f7ff fd7c 	bl	8000a14 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f000 fb91 	bl	8001644 <ADC_ConversionStop_Disable>
 8000f22:	4603      	mov	r3, r0
 8000f24:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f2a:	f003 0310 	and.w	r3, r3, #16
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	f040 8099 	bne.w	8001066 <HAL_ADC_Init+0x18e>
 8000f34:	7dfb      	ldrb	r3, [r7, #23]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	f040 8095 	bne.w	8001066 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f40:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000f44:	f023 0302 	bic.w	r3, r3, #2
 8000f48:	f043 0202 	orr.w	r2, r3, #2
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f58:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	7b1b      	ldrb	r3, [r3, #12]
 8000f5e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f60:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f62:	68ba      	ldr	r2, [r7, #8]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000f70:	d003      	beq.n	8000f7a <HAL_ADC_Init+0xa2>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d102      	bne.n	8000f80 <HAL_ADC_Init+0xa8>
 8000f7a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f7e:	e000      	b.n	8000f82 <HAL_ADC_Init+0xaa>
 8000f80:	2300      	movs	r3, #0
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	7d1b      	ldrb	r3, [r3, #20]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d119      	bne.n	8000fc4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	7b1b      	ldrb	r3, [r3, #12]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d109      	bne.n	8000fac <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	3b01      	subs	r3, #1
 8000f9e:	035a      	lsls	r2, r3, #13
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000fa8:	613b      	str	r3, [r7, #16]
 8000faa:	e00b      	b.n	8000fc4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fb0:	f043 0220 	orr.w	r2, r3, #32
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fbc:	f043 0201 	orr.w	r2, r3, #1
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	430a      	orrs	r2, r1
 8000fd6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	689a      	ldr	r2, [r3, #8]
 8000fde:	4b28      	ldr	r3, [pc, #160]	@ (8001080 <HAL_ADC_Init+0x1a8>)
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	6812      	ldr	r2, [r2, #0]
 8000fe6:	68b9      	ldr	r1, [r7, #8]
 8000fe8:	430b      	orrs	r3, r1
 8000fea:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000ff4:	d003      	beq.n	8000ffe <HAL_ADC_Init+0x126>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d104      	bne.n	8001008 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	691b      	ldr	r3, [r3, #16]
 8001002:	3b01      	subs	r3, #1
 8001004:	051b      	lsls	r3, r3, #20
 8001006:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800100e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	68fa      	ldr	r2, [r7, #12]
 8001018:	430a      	orrs	r2, r1
 800101a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	689a      	ldr	r2, [r3, #8]
 8001022:	4b18      	ldr	r3, [pc, #96]	@ (8001084 <HAL_ADC_Init+0x1ac>)
 8001024:	4013      	ands	r3, r2
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	429a      	cmp	r2, r3
 800102a:	d10b      	bne.n	8001044 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2200      	movs	r2, #0
 8001030:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001036:	f023 0303 	bic.w	r3, r3, #3
 800103a:	f043 0201 	orr.w	r2, r3, #1
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001042:	e018      	b.n	8001076 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001048:	f023 0312 	bic.w	r3, r3, #18
 800104c:	f043 0210 	orr.w	r2, r3, #16
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001058:	f043 0201 	orr.w	r2, r3, #1
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001060:	2301      	movs	r3, #1
 8001062:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001064:	e007      	b.n	8001076 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800106a:	f043 0210 	orr.w	r2, r3, #16
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001076:	7dfb      	ldrb	r3, [r7, #23]
}
 8001078:	4618      	mov	r0, r3
 800107a:	3718      	adds	r7, #24
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	ffe1f7fd 	.word	0xffe1f7fd
 8001084:	ff1f0efe 	.word	0xff1f0efe

08001088 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001090:	2300      	movs	r3, #0
 8001092:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800109a:	2b01      	cmp	r3, #1
 800109c:	d101      	bne.n	80010a2 <HAL_ADC_Start+0x1a>
 800109e:	2302      	movs	r3, #2
 80010a0:	e098      	b.n	80011d4 <HAL_ADC_Start+0x14c>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2201      	movs	r2, #1
 80010a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f000 fa70 	bl	8001590 <ADC_Enable>
 80010b0:	4603      	mov	r3, r0
 80010b2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	f040 8087 	bne.w	80011ca <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80010c4:	f023 0301 	bic.w	r3, r3, #1
 80010c8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a41      	ldr	r2, [pc, #260]	@ (80011dc <HAL_ADC_Start+0x154>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d105      	bne.n	80010e6 <HAL_ADC_Start+0x5e>
 80010da:	4b41      	ldr	r3, [pc, #260]	@ (80011e0 <HAL_ADC_Start+0x158>)
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d115      	bne.n	8001112 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010ea:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d026      	beq.n	800114e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001104:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001108:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001110:	e01d      	b.n	800114e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001116:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a2f      	ldr	r2, [pc, #188]	@ (80011e0 <HAL_ADC_Start+0x158>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d004      	beq.n	8001132 <HAL_ADC_Start+0xaa>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a2b      	ldr	r2, [pc, #172]	@ (80011dc <HAL_ADC_Start+0x154>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d10d      	bne.n	800114e <HAL_ADC_Start+0xc6>
 8001132:	4b2b      	ldr	r3, [pc, #172]	@ (80011e0 <HAL_ADC_Start+0x158>)
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800113a:	2b00      	cmp	r3, #0
 800113c:	d007      	beq.n	800114e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001142:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001146:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001152:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d006      	beq.n	8001168 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800115e:	f023 0206 	bic.w	r2, r3, #6
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001166:	e002      	b.n	800116e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2200      	movs	r2, #0
 800116c:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f06f 0202 	mvn.w	r2, #2
 800117e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800118a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800118e:	d113      	bne.n	80011b8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001194:	4a11      	ldr	r2, [pc, #68]	@ (80011dc <HAL_ADC_Start+0x154>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d105      	bne.n	80011a6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800119a:	4b11      	ldr	r3, [pc, #68]	@ (80011e0 <HAL_ADC_Start+0x158>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d108      	bne.n	80011b8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	689a      	ldr	r2, [r3, #8]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80011b4:	609a      	str	r2, [r3, #8]
 80011b6:	e00c      	b.n	80011d2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	689a      	ldr	r2, [r3, #8]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	e003      	b.n	80011d2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80011d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40012800 	.word	0x40012800
 80011e0:	40012400 	.word	0x40012400

080011e4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr

080011fc <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	f003 0320 	and.w	r3, r3, #32
 800121a:	2b00      	cmp	r3, #0
 800121c:	d03e      	beq.n	800129c <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	f003 0302 	and.w	r3, r3, #2
 8001224:	2b00      	cmp	r3, #0
 8001226:	d039      	beq.n	800129c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800122c:	f003 0310 	and.w	r3, r3, #16
 8001230:	2b00      	cmp	r3, #0
 8001232:	d105      	bne.n	8001240 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001238:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800124a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800124e:	d11d      	bne.n	800128c <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001254:	2b00      	cmp	r3, #0
 8001256:	d119      	bne.n	800128c <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	685a      	ldr	r2, [r3, #4]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f022 0220 	bic.w	r2, r2, #32
 8001266:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800126c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001278:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d105      	bne.n	800128c <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001284:	f043 0201 	orr.w	r2, r3, #1
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f000 f874 	bl	800137a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f06f 0212 	mvn.w	r2, #18
 800129a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d04d      	beq.n	8001342 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	f003 0304 	and.w	r3, r3, #4
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d048      	beq.n	8001342 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012b4:	f003 0310 	and.w	r3, r3, #16
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d105      	bne.n	80012c8 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012c0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80012d2:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 80012d6:	d012      	beq.n	80012fe <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d125      	bne.n	8001332 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80012f0:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80012f4:	d11d      	bne.n	8001332 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d119      	bne.n	8001332 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	685a      	ldr	r2, [r3, #4]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800130c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001312:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800131e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001322:	2b00      	cmp	r3, #0
 8001324:	d105      	bne.n	8001332 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800132a:	f043 0201 	orr.w	r2, r3, #1
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f000 f9c7 	bl	80016c6 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f06f 020c 	mvn.w	r2, #12
 8001340:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001348:	2b00      	cmp	r3, #0
 800134a:	d012      	beq.n	8001372 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	2b00      	cmp	r3, #0
 8001354:	d00d      	beq.n	8001372 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800135a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f000 f812 	bl	800138c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f06f 0201 	mvn.w	r2, #1
 8001370:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001372:	bf00      	nop
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800137a:	b480      	push	{r7}
 800137c:	b083      	sub	sp, #12
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr

0800138c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001394:	bf00      	nop
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	bc80      	pop	{r7}
 800139c:	4770      	bx	lr
	...

080013a0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013aa:	2300      	movs	r3, #0
 80013ac:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80013ae:	2300      	movs	r3, #0
 80013b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d101      	bne.n	80013c0 <HAL_ADC_ConfigChannel+0x20>
 80013bc:	2302      	movs	r3, #2
 80013be:	e0dc      	b.n	800157a <HAL_ADC_ConfigChannel+0x1da>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2201      	movs	r2, #1
 80013c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	2b06      	cmp	r3, #6
 80013ce:	d81c      	bhi.n	800140a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685a      	ldr	r2, [r3, #4]
 80013da:	4613      	mov	r3, r2
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	4413      	add	r3, r2
 80013e0:	3b05      	subs	r3, #5
 80013e2:	221f      	movs	r2, #31
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	43db      	mvns	r3, r3
 80013ea:	4019      	ands	r1, r3
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	6818      	ldr	r0, [r3, #0]
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685a      	ldr	r2, [r3, #4]
 80013f4:	4613      	mov	r3, r2
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	4413      	add	r3, r2
 80013fa:	3b05      	subs	r3, #5
 80013fc:	fa00 f203 	lsl.w	r2, r0, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	430a      	orrs	r2, r1
 8001406:	635a      	str	r2, [r3, #52]	@ 0x34
 8001408:	e03c      	b.n	8001484 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	2b0c      	cmp	r3, #12
 8001410:	d81c      	bhi.n	800144c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685a      	ldr	r2, [r3, #4]
 800141c:	4613      	mov	r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	4413      	add	r3, r2
 8001422:	3b23      	subs	r3, #35	@ 0x23
 8001424:	221f      	movs	r2, #31
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43db      	mvns	r3, r3
 800142c:	4019      	ands	r1, r3
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	6818      	ldr	r0, [r3, #0]
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685a      	ldr	r2, [r3, #4]
 8001436:	4613      	mov	r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	4413      	add	r3, r2
 800143c:	3b23      	subs	r3, #35	@ 0x23
 800143e:	fa00 f203 	lsl.w	r2, r0, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	430a      	orrs	r2, r1
 8001448:	631a      	str	r2, [r3, #48]	@ 0x30
 800144a:	e01b      	b.n	8001484 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685a      	ldr	r2, [r3, #4]
 8001456:	4613      	mov	r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	4413      	add	r3, r2
 800145c:	3b41      	subs	r3, #65	@ 0x41
 800145e:	221f      	movs	r2, #31
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	43db      	mvns	r3, r3
 8001466:	4019      	ands	r1, r3
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	6818      	ldr	r0, [r3, #0]
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685a      	ldr	r2, [r3, #4]
 8001470:	4613      	mov	r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	4413      	add	r3, r2
 8001476:	3b41      	subs	r3, #65	@ 0x41
 8001478:	fa00 f203 	lsl.w	r2, r0, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	430a      	orrs	r2, r1
 8001482:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2b09      	cmp	r3, #9
 800148a:	d91c      	bls.n	80014c6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	68d9      	ldr	r1, [r3, #12]
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	4613      	mov	r3, r2
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	4413      	add	r3, r2
 800149c:	3b1e      	subs	r3, #30
 800149e:	2207      	movs	r2, #7
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	43db      	mvns	r3, r3
 80014a6:	4019      	ands	r1, r3
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	6898      	ldr	r0, [r3, #8]
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	4613      	mov	r3, r2
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	4413      	add	r3, r2
 80014b6:	3b1e      	subs	r3, #30
 80014b8:	fa00 f203 	lsl.w	r2, r0, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	430a      	orrs	r2, r1
 80014c2:	60da      	str	r2, [r3, #12]
 80014c4:	e019      	b.n	80014fa <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	6919      	ldr	r1, [r3, #16]
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	4613      	mov	r3, r2
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	4413      	add	r3, r2
 80014d6:	2207      	movs	r2, #7
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	43db      	mvns	r3, r3
 80014de:	4019      	ands	r1, r3
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	6898      	ldr	r0, [r3, #8]
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	4613      	mov	r3, r2
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	4413      	add	r3, r2
 80014ee:	fa00 f203 	lsl.w	r2, r0, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	430a      	orrs	r2, r1
 80014f8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2b10      	cmp	r3, #16
 8001500:	d003      	beq.n	800150a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001506:	2b11      	cmp	r3, #17
 8001508:	d132      	bne.n	8001570 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a1d      	ldr	r2, [pc, #116]	@ (8001584 <HAL_ADC_ConfigChannel+0x1e4>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d125      	bne.n	8001560 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d126      	bne.n	8001570 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	689a      	ldr	r2, [r3, #8]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001530:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2b10      	cmp	r3, #16
 8001538:	d11a      	bne.n	8001570 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800153a:	4b13      	ldr	r3, [pc, #76]	@ (8001588 <HAL_ADC_ConfigChannel+0x1e8>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a13      	ldr	r2, [pc, #76]	@ (800158c <HAL_ADC_ConfigChannel+0x1ec>)
 8001540:	fba2 2303 	umull	r2, r3, r2, r3
 8001544:	0c9a      	lsrs	r2, r3, #18
 8001546:	4613      	mov	r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	4413      	add	r3, r2
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001550:	e002      	b.n	8001558 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	3b01      	subs	r3, #1
 8001556:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1f9      	bne.n	8001552 <HAL_ADC_ConfigChannel+0x1b2>
 800155e:	e007      	b.n	8001570 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001564:	f043 0220 	orr.w	r2, r3, #32
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001578:	7bfb      	ldrb	r3, [r7, #15]
}
 800157a:	4618      	mov	r0, r3
 800157c:	3714      	adds	r7, #20
 800157e:	46bd      	mov	sp, r7
 8001580:	bc80      	pop	{r7}
 8001582:	4770      	bx	lr
 8001584:	40012400 	.word	0x40012400
 8001588:	20000008 	.word	0x20000008
 800158c:	431bde83 	.word	0x431bde83

08001590 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001598:	2300      	movs	r3, #0
 800159a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800159c:	2300      	movs	r3, #0
 800159e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d040      	beq.n	8001630 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	689a      	ldr	r2, [r3, #8]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f042 0201 	orr.w	r2, r2, #1
 80015bc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80015be:	4b1f      	ldr	r3, [pc, #124]	@ (800163c <ADC_Enable+0xac>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a1f      	ldr	r2, [pc, #124]	@ (8001640 <ADC_Enable+0xb0>)
 80015c4:	fba2 2303 	umull	r2, r3, r2, r3
 80015c8:	0c9b      	lsrs	r3, r3, #18
 80015ca:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80015cc:	e002      	b.n	80015d4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	3b01      	subs	r3, #1
 80015d2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1f9      	bne.n	80015ce <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80015da:	f7ff fc4f 	bl	8000e7c <HAL_GetTick>
 80015de:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80015e0:	e01f      	b.n	8001622 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80015e2:	f7ff fc4b 	bl	8000e7c <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d918      	bls.n	8001622 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d011      	beq.n	8001622 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001602:	f043 0210 	orr.w	r2, r3, #16
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800160e:	f043 0201 	orr.w	r2, r3, #1
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e007      	b.n	8001632 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f003 0301 	and.w	r3, r3, #1
 800162c:	2b01      	cmp	r3, #1
 800162e:	d1d8      	bne.n	80015e2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000008 	.word	0x20000008
 8001640:	431bde83 	.word	0x431bde83

08001644 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800164c:	2300      	movs	r3, #0
 800164e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	2b01      	cmp	r3, #1
 800165c:	d12e      	bne.n	80016bc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	689a      	ldr	r2, [r3, #8]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f022 0201 	bic.w	r2, r2, #1
 800166c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800166e:	f7ff fc05 	bl	8000e7c <HAL_GetTick>
 8001672:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001674:	e01b      	b.n	80016ae <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001676:	f7ff fc01 	bl	8000e7c <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d914      	bls.n	80016ae <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	2b01      	cmp	r3, #1
 8001690:	d10d      	bne.n	80016ae <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001696:	f043 0210 	orr.w	r2, r3, #16
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016a2:	f043 0201 	orr.w	r2, r3, #1
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e007      	b.n	80016be <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	f003 0301 	and.w	r3, r3, #1
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d0dc      	beq.n	8001676 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr

080016d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016e8:	4b0c      	ldr	r3, [pc, #48]	@ (800171c <__NVIC_SetPriorityGrouping+0x44>)
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ee:	68ba      	ldr	r2, [r7, #8]
 80016f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016f4:	4013      	ands	r3, r2
 80016f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001700:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001704:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001708:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800170a:	4a04      	ldr	r2, [pc, #16]	@ (800171c <__NVIC_SetPriorityGrouping+0x44>)
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	60d3      	str	r3, [r2, #12]
}
 8001710:	bf00      	nop
 8001712:	3714      	adds	r7, #20
 8001714:	46bd      	mov	sp, r7
 8001716:	bc80      	pop	{r7}
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	e000ed00 	.word	0xe000ed00

08001720 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001724:	4b04      	ldr	r3, [pc, #16]	@ (8001738 <__NVIC_GetPriorityGrouping+0x18>)
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	0a1b      	lsrs	r3, r3, #8
 800172a:	f003 0307 	and.w	r3, r3, #7
}
 800172e:	4618      	mov	r0, r3
 8001730:	46bd      	mov	sp, r7
 8001732:	bc80      	pop	{r7}
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174a:	2b00      	cmp	r3, #0
 800174c:	db0b      	blt.n	8001766 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	f003 021f 	and.w	r2, r3, #31
 8001754:	4906      	ldr	r1, [pc, #24]	@ (8001770 <__NVIC_EnableIRQ+0x34>)
 8001756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175a:	095b      	lsrs	r3, r3, #5
 800175c:	2001      	movs	r0, #1
 800175e:	fa00 f202 	lsl.w	r2, r0, r2
 8001762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr
 8001770:	e000e100 	.word	0xe000e100

08001774 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	6039      	str	r1, [r7, #0]
 800177e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001784:	2b00      	cmp	r3, #0
 8001786:	db0a      	blt.n	800179e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	b2da      	uxtb	r2, r3
 800178c:	490c      	ldr	r1, [pc, #48]	@ (80017c0 <__NVIC_SetPriority+0x4c>)
 800178e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001792:	0112      	lsls	r2, r2, #4
 8001794:	b2d2      	uxtb	r2, r2
 8001796:	440b      	add	r3, r1
 8001798:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800179c:	e00a      	b.n	80017b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	b2da      	uxtb	r2, r3
 80017a2:	4908      	ldr	r1, [pc, #32]	@ (80017c4 <__NVIC_SetPriority+0x50>)
 80017a4:	79fb      	ldrb	r3, [r7, #7]
 80017a6:	f003 030f 	and.w	r3, r3, #15
 80017aa:	3b04      	subs	r3, #4
 80017ac:	0112      	lsls	r2, r2, #4
 80017ae:	b2d2      	uxtb	r2, r2
 80017b0:	440b      	add	r3, r1
 80017b2:	761a      	strb	r2, [r3, #24]
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bc80      	pop	{r7}
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	e000e100 	.word	0xe000e100
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b089      	sub	sp, #36	@ 0x24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	f1c3 0307 	rsb	r3, r3, #7
 80017e2:	2b04      	cmp	r3, #4
 80017e4:	bf28      	it	cs
 80017e6:	2304      	movcs	r3, #4
 80017e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	3304      	adds	r3, #4
 80017ee:	2b06      	cmp	r3, #6
 80017f0:	d902      	bls.n	80017f8 <NVIC_EncodePriority+0x30>
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	3b03      	subs	r3, #3
 80017f6:	e000      	b.n	80017fa <NVIC_EncodePriority+0x32>
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	43da      	mvns	r2, r3
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	401a      	ands	r2, r3
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001810:	f04f 31ff 	mov.w	r1, #4294967295
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	fa01 f303 	lsl.w	r3, r1, r3
 800181a:	43d9      	mvns	r1, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001820:	4313      	orrs	r3, r2
         );
}
 8001822:	4618      	mov	r0, r3
 8001824:	3724      	adds	r7, #36	@ 0x24
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr

0800182c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3b01      	subs	r3, #1
 8001838:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800183c:	d301      	bcc.n	8001842 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800183e:	2301      	movs	r3, #1
 8001840:	e00f      	b.n	8001862 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001842:	4a0a      	ldr	r2, [pc, #40]	@ (800186c <SysTick_Config+0x40>)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	3b01      	subs	r3, #1
 8001848:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800184a:	210f      	movs	r1, #15
 800184c:	f04f 30ff 	mov.w	r0, #4294967295
 8001850:	f7ff ff90 	bl	8001774 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001854:	4b05      	ldr	r3, [pc, #20]	@ (800186c <SysTick_Config+0x40>)
 8001856:	2200      	movs	r2, #0
 8001858:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800185a:	4b04      	ldr	r3, [pc, #16]	@ (800186c <SysTick_Config+0x40>)
 800185c:	2207      	movs	r2, #7
 800185e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	e000e010 	.word	0xe000e010

08001870 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f7ff ff2d 	bl	80016d8 <__NVIC_SetPriorityGrouping>
}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001886:	b580      	push	{r7, lr}
 8001888:	b086      	sub	sp, #24
 800188a:	af00      	add	r7, sp, #0
 800188c:	4603      	mov	r3, r0
 800188e:	60b9      	str	r1, [r7, #8]
 8001890:	607a      	str	r2, [r7, #4]
 8001892:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001894:	2300      	movs	r3, #0
 8001896:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001898:	f7ff ff42 	bl	8001720 <__NVIC_GetPriorityGrouping>
 800189c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	68b9      	ldr	r1, [r7, #8]
 80018a2:	6978      	ldr	r0, [r7, #20]
 80018a4:	f7ff ff90 	bl	80017c8 <NVIC_EncodePriority>
 80018a8:	4602      	mov	r2, r0
 80018aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ae:	4611      	mov	r1, r2
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff ff5f 	bl	8001774 <__NVIC_SetPriority>
}
 80018b6:	bf00      	nop
 80018b8:	3718      	adds	r7, #24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b082      	sub	sp, #8
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	4603      	mov	r3, r0
 80018c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff ff35 	bl	800173c <__NVIC_EnableIRQ>
}
 80018d2:	bf00      	nop
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b082      	sub	sp, #8
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f7ff ffa2 	bl	800182c <SysTick_Config>
 80018e8:	4603      	mov	r3, r0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018f2:	b480      	push	{r7}
 80018f4:	b085      	sub	sp, #20
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018fa:	2300      	movs	r3, #0
 80018fc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d008      	beq.n	800191c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2204      	movs	r2, #4
 800190e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e020      	b.n	800195e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f022 020e 	bic.w	r2, r2, #14
 800192a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f022 0201 	bic.w	r2, r2, #1
 800193a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001944:	2101      	movs	r1, #1
 8001946:	fa01 f202 	lsl.w	r2, r1, r2
 800194a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2201      	movs	r2, #1
 8001950:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800195c:	7bfb      	ldrb	r3, [r7, #15]
}
 800195e:	4618      	mov	r0, r3
 8001960:	3714      	adds	r7, #20
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr

08001968 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001970:	2300      	movs	r3, #0
 8001972:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800197a:	b2db      	uxtb	r3, r3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d005      	beq.n	800198c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2204      	movs	r2, #4
 8001984:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	73fb      	strb	r3, [r7, #15]
 800198a:	e051      	b.n	8001a30 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f022 020e 	bic.w	r2, r2, #14
 800199a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f022 0201 	bic.w	r2, r2, #1
 80019aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a22      	ldr	r2, [pc, #136]	@ (8001a3c <HAL_DMA_Abort_IT+0xd4>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d029      	beq.n	8001a0a <HAL_DMA_Abort_IT+0xa2>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a21      	ldr	r2, [pc, #132]	@ (8001a40 <HAL_DMA_Abort_IT+0xd8>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d022      	beq.n	8001a06 <HAL_DMA_Abort_IT+0x9e>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a1f      	ldr	r2, [pc, #124]	@ (8001a44 <HAL_DMA_Abort_IT+0xdc>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d01a      	beq.n	8001a00 <HAL_DMA_Abort_IT+0x98>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a1e      	ldr	r2, [pc, #120]	@ (8001a48 <HAL_DMA_Abort_IT+0xe0>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d012      	beq.n	80019fa <HAL_DMA_Abort_IT+0x92>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a1c      	ldr	r2, [pc, #112]	@ (8001a4c <HAL_DMA_Abort_IT+0xe4>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d00a      	beq.n	80019f4 <HAL_DMA_Abort_IT+0x8c>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a1b      	ldr	r2, [pc, #108]	@ (8001a50 <HAL_DMA_Abort_IT+0xe8>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d102      	bne.n	80019ee <HAL_DMA_Abort_IT+0x86>
 80019e8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80019ec:	e00e      	b.n	8001a0c <HAL_DMA_Abort_IT+0xa4>
 80019ee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80019f2:	e00b      	b.n	8001a0c <HAL_DMA_Abort_IT+0xa4>
 80019f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019f8:	e008      	b.n	8001a0c <HAL_DMA_Abort_IT+0xa4>
 80019fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019fe:	e005      	b.n	8001a0c <HAL_DMA_Abort_IT+0xa4>
 8001a00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a04:	e002      	b.n	8001a0c <HAL_DMA_Abort_IT+0xa4>
 8001a06:	2310      	movs	r3, #16
 8001a08:	e000      	b.n	8001a0c <HAL_DMA_Abort_IT+0xa4>
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	4a11      	ldr	r2, [pc, #68]	@ (8001a54 <HAL_DMA_Abort_IT+0xec>)
 8001a0e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d003      	beq.n	8001a30 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	4798      	blx	r3
    } 
  }
  return status;
 8001a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40020008 	.word	0x40020008
 8001a40:	4002001c 	.word	0x4002001c
 8001a44:	40020030 	.word	0x40020030
 8001a48:	40020044 	.word	0x40020044
 8001a4c:	40020058 	.word	0x40020058
 8001a50:	4002006c 	.word	0x4002006c
 8001a54:	40020000 	.word	0x40020000

08001a58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b08b      	sub	sp, #44	@ 0x2c
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a62:	2300      	movs	r3, #0
 8001a64:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a66:	2300      	movs	r3, #0
 8001a68:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a6a:	e169      	b.n	8001d40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	69fa      	ldr	r2, [r7, #28]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	f040 8158 	bne.w	8001d3a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	4a9a      	ldr	r2, [pc, #616]	@ (8001cf8 <HAL_GPIO_Init+0x2a0>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d05e      	beq.n	8001b52 <HAL_GPIO_Init+0xfa>
 8001a94:	4a98      	ldr	r2, [pc, #608]	@ (8001cf8 <HAL_GPIO_Init+0x2a0>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d875      	bhi.n	8001b86 <HAL_GPIO_Init+0x12e>
 8001a9a:	4a98      	ldr	r2, [pc, #608]	@ (8001cfc <HAL_GPIO_Init+0x2a4>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d058      	beq.n	8001b52 <HAL_GPIO_Init+0xfa>
 8001aa0:	4a96      	ldr	r2, [pc, #600]	@ (8001cfc <HAL_GPIO_Init+0x2a4>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d86f      	bhi.n	8001b86 <HAL_GPIO_Init+0x12e>
 8001aa6:	4a96      	ldr	r2, [pc, #600]	@ (8001d00 <HAL_GPIO_Init+0x2a8>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d052      	beq.n	8001b52 <HAL_GPIO_Init+0xfa>
 8001aac:	4a94      	ldr	r2, [pc, #592]	@ (8001d00 <HAL_GPIO_Init+0x2a8>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d869      	bhi.n	8001b86 <HAL_GPIO_Init+0x12e>
 8001ab2:	4a94      	ldr	r2, [pc, #592]	@ (8001d04 <HAL_GPIO_Init+0x2ac>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d04c      	beq.n	8001b52 <HAL_GPIO_Init+0xfa>
 8001ab8:	4a92      	ldr	r2, [pc, #584]	@ (8001d04 <HAL_GPIO_Init+0x2ac>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d863      	bhi.n	8001b86 <HAL_GPIO_Init+0x12e>
 8001abe:	4a92      	ldr	r2, [pc, #584]	@ (8001d08 <HAL_GPIO_Init+0x2b0>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d046      	beq.n	8001b52 <HAL_GPIO_Init+0xfa>
 8001ac4:	4a90      	ldr	r2, [pc, #576]	@ (8001d08 <HAL_GPIO_Init+0x2b0>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d85d      	bhi.n	8001b86 <HAL_GPIO_Init+0x12e>
 8001aca:	2b12      	cmp	r3, #18
 8001acc:	d82a      	bhi.n	8001b24 <HAL_GPIO_Init+0xcc>
 8001ace:	2b12      	cmp	r3, #18
 8001ad0:	d859      	bhi.n	8001b86 <HAL_GPIO_Init+0x12e>
 8001ad2:	a201      	add	r2, pc, #4	@ (adr r2, 8001ad8 <HAL_GPIO_Init+0x80>)
 8001ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ad8:	08001b53 	.word	0x08001b53
 8001adc:	08001b2d 	.word	0x08001b2d
 8001ae0:	08001b3f 	.word	0x08001b3f
 8001ae4:	08001b81 	.word	0x08001b81
 8001ae8:	08001b87 	.word	0x08001b87
 8001aec:	08001b87 	.word	0x08001b87
 8001af0:	08001b87 	.word	0x08001b87
 8001af4:	08001b87 	.word	0x08001b87
 8001af8:	08001b87 	.word	0x08001b87
 8001afc:	08001b87 	.word	0x08001b87
 8001b00:	08001b87 	.word	0x08001b87
 8001b04:	08001b87 	.word	0x08001b87
 8001b08:	08001b87 	.word	0x08001b87
 8001b0c:	08001b87 	.word	0x08001b87
 8001b10:	08001b87 	.word	0x08001b87
 8001b14:	08001b87 	.word	0x08001b87
 8001b18:	08001b87 	.word	0x08001b87
 8001b1c:	08001b35 	.word	0x08001b35
 8001b20:	08001b49 	.word	0x08001b49
 8001b24:	4a79      	ldr	r2, [pc, #484]	@ (8001d0c <HAL_GPIO_Init+0x2b4>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d013      	beq.n	8001b52 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b2a:	e02c      	b.n	8001b86 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	623b      	str	r3, [r7, #32]
          break;
 8001b32:	e029      	b.n	8001b88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	3304      	adds	r3, #4
 8001b3a:	623b      	str	r3, [r7, #32]
          break;
 8001b3c:	e024      	b.n	8001b88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	3308      	adds	r3, #8
 8001b44:	623b      	str	r3, [r7, #32]
          break;
 8001b46:	e01f      	b.n	8001b88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	330c      	adds	r3, #12
 8001b4e:	623b      	str	r3, [r7, #32]
          break;
 8001b50:	e01a      	b.n	8001b88 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d102      	bne.n	8001b60 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b5a:	2304      	movs	r3, #4
 8001b5c:	623b      	str	r3, [r7, #32]
          break;
 8001b5e:	e013      	b.n	8001b88 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d105      	bne.n	8001b74 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b68:	2308      	movs	r3, #8
 8001b6a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	69fa      	ldr	r2, [r7, #28]
 8001b70:	611a      	str	r2, [r3, #16]
          break;
 8001b72:	e009      	b.n	8001b88 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b74:	2308      	movs	r3, #8
 8001b76:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	69fa      	ldr	r2, [r7, #28]
 8001b7c:	615a      	str	r2, [r3, #20]
          break;
 8001b7e:	e003      	b.n	8001b88 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b80:	2300      	movs	r3, #0
 8001b82:	623b      	str	r3, [r7, #32]
          break;
 8001b84:	e000      	b.n	8001b88 <HAL_GPIO_Init+0x130>
          break;
 8001b86:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	2bff      	cmp	r3, #255	@ 0xff
 8001b8c:	d801      	bhi.n	8001b92 <HAL_GPIO_Init+0x13a>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	e001      	b.n	8001b96 <HAL_GPIO_Init+0x13e>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	3304      	adds	r3, #4
 8001b96:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	2bff      	cmp	r3, #255	@ 0xff
 8001b9c:	d802      	bhi.n	8001ba4 <HAL_GPIO_Init+0x14c>
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	e002      	b.n	8001baa <HAL_GPIO_Init+0x152>
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba6:	3b08      	subs	r3, #8
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	210f      	movs	r1, #15
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	401a      	ands	r2, r3
 8001bbc:	6a39      	ldr	r1, [r7, #32]
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc4:	431a      	orrs	r2, r3
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f000 80b1 	beq.w	8001d3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bd8:	4b4d      	ldr	r3, [pc, #308]	@ (8001d10 <HAL_GPIO_Init+0x2b8>)
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	4a4c      	ldr	r2, [pc, #304]	@ (8001d10 <HAL_GPIO_Init+0x2b8>)
 8001bde:	f043 0301 	orr.w	r3, r3, #1
 8001be2:	6193      	str	r3, [r2, #24]
 8001be4:	4b4a      	ldr	r3, [pc, #296]	@ (8001d10 <HAL_GPIO_Init+0x2b8>)
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	f003 0301 	and.w	r3, r3, #1
 8001bec:	60bb      	str	r3, [r7, #8]
 8001bee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bf0:	4a48      	ldr	r2, [pc, #288]	@ (8001d14 <HAL_GPIO_Init+0x2bc>)
 8001bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf4:	089b      	lsrs	r3, r3, #2
 8001bf6:	3302      	adds	r3, #2
 8001bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bfc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c00:	f003 0303 	and.w	r3, r3, #3
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	220f      	movs	r2, #15
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	4013      	ands	r3, r2
 8001c12:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a40      	ldr	r2, [pc, #256]	@ (8001d18 <HAL_GPIO_Init+0x2c0>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d013      	beq.n	8001c44 <HAL_GPIO_Init+0x1ec>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a3f      	ldr	r2, [pc, #252]	@ (8001d1c <HAL_GPIO_Init+0x2c4>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d00d      	beq.n	8001c40 <HAL_GPIO_Init+0x1e8>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4a3e      	ldr	r2, [pc, #248]	@ (8001d20 <HAL_GPIO_Init+0x2c8>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d007      	beq.n	8001c3c <HAL_GPIO_Init+0x1e4>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4a3d      	ldr	r2, [pc, #244]	@ (8001d24 <HAL_GPIO_Init+0x2cc>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d101      	bne.n	8001c38 <HAL_GPIO_Init+0x1e0>
 8001c34:	2303      	movs	r3, #3
 8001c36:	e006      	b.n	8001c46 <HAL_GPIO_Init+0x1ee>
 8001c38:	2304      	movs	r3, #4
 8001c3a:	e004      	b.n	8001c46 <HAL_GPIO_Init+0x1ee>
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	e002      	b.n	8001c46 <HAL_GPIO_Init+0x1ee>
 8001c40:	2301      	movs	r3, #1
 8001c42:	e000      	b.n	8001c46 <HAL_GPIO_Init+0x1ee>
 8001c44:	2300      	movs	r3, #0
 8001c46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c48:	f002 0203 	and.w	r2, r2, #3
 8001c4c:	0092      	lsls	r2, r2, #2
 8001c4e:	4093      	lsls	r3, r2
 8001c50:	68fa      	ldr	r2, [r7, #12]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c56:	492f      	ldr	r1, [pc, #188]	@ (8001d14 <HAL_GPIO_Init+0x2bc>)
 8001c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c5a:	089b      	lsrs	r3, r3, #2
 8001c5c:	3302      	adds	r3, #2
 8001c5e:	68fa      	ldr	r2, [r7, #12]
 8001c60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d006      	beq.n	8001c7e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c70:	4b2d      	ldr	r3, [pc, #180]	@ (8001d28 <HAL_GPIO_Init+0x2d0>)
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	492c      	ldr	r1, [pc, #176]	@ (8001d28 <HAL_GPIO_Init+0x2d0>)
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	608b      	str	r3, [r1, #8]
 8001c7c:	e006      	b.n	8001c8c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c7e:	4b2a      	ldr	r3, [pc, #168]	@ (8001d28 <HAL_GPIO_Init+0x2d0>)
 8001c80:	689a      	ldr	r2, [r3, #8]
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	43db      	mvns	r3, r3
 8001c86:	4928      	ldr	r1, [pc, #160]	@ (8001d28 <HAL_GPIO_Init+0x2d0>)
 8001c88:	4013      	ands	r3, r2
 8001c8a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d006      	beq.n	8001ca6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c98:	4b23      	ldr	r3, [pc, #140]	@ (8001d28 <HAL_GPIO_Init+0x2d0>)
 8001c9a:	68da      	ldr	r2, [r3, #12]
 8001c9c:	4922      	ldr	r1, [pc, #136]	@ (8001d28 <HAL_GPIO_Init+0x2d0>)
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	60cb      	str	r3, [r1, #12]
 8001ca4:	e006      	b.n	8001cb4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ca6:	4b20      	ldr	r3, [pc, #128]	@ (8001d28 <HAL_GPIO_Init+0x2d0>)
 8001ca8:	68da      	ldr	r2, [r3, #12]
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	43db      	mvns	r3, r3
 8001cae:	491e      	ldr	r1, [pc, #120]	@ (8001d28 <HAL_GPIO_Init+0x2d0>)
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d006      	beq.n	8001cce <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001cc0:	4b19      	ldr	r3, [pc, #100]	@ (8001d28 <HAL_GPIO_Init+0x2d0>)
 8001cc2:	685a      	ldr	r2, [r3, #4]
 8001cc4:	4918      	ldr	r1, [pc, #96]	@ (8001d28 <HAL_GPIO_Init+0x2d0>)
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	604b      	str	r3, [r1, #4]
 8001ccc:	e006      	b.n	8001cdc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cce:	4b16      	ldr	r3, [pc, #88]	@ (8001d28 <HAL_GPIO_Init+0x2d0>)
 8001cd0:	685a      	ldr	r2, [r3, #4]
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	4914      	ldr	r1, [pc, #80]	@ (8001d28 <HAL_GPIO_Init+0x2d0>)
 8001cd8:	4013      	ands	r3, r2
 8001cda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d021      	beq.n	8001d2c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8001d28 <HAL_GPIO_Init+0x2d0>)
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	490e      	ldr	r1, [pc, #56]	@ (8001d28 <HAL_GPIO_Init+0x2d0>)
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	600b      	str	r3, [r1, #0]
 8001cf4:	e021      	b.n	8001d3a <HAL_GPIO_Init+0x2e2>
 8001cf6:	bf00      	nop
 8001cf8:	10320000 	.word	0x10320000
 8001cfc:	10310000 	.word	0x10310000
 8001d00:	10220000 	.word	0x10220000
 8001d04:	10210000 	.word	0x10210000
 8001d08:	10120000 	.word	0x10120000
 8001d0c:	10110000 	.word	0x10110000
 8001d10:	40021000 	.word	0x40021000
 8001d14:	40010000 	.word	0x40010000
 8001d18:	40010800 	.word	0x40010800
 8001d1c:	40010c00 	.word	0x40010c00
 8001d20:	40011000 	.word	0x40011000
 8001d24:	40011400 	.word	0x40011400
 8001d28:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d5c <HAL_GPIO_Init+0x304>)
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	43db      	mvns	r3, r3
 8001d34:	4909      	ldr	r1, [pc, #36]	@ (8001d5c <HAL_GPIO_Init+0x304>)
 8001d36:	4013      	ands	r3, r2
 8001d38:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d46:	fa22 f303 	lsr.w	r3, r2, r3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f47f ae8e 	bne.w	8001a6c <HAL_GPIO_Init+0x14>
  }
}
 8001d50:	bf00      	nop
 8001d52:	bf00      	nop
 8001d54:	372c      	adds	r7, #44	@ 0x2c
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr
 8001d5c:	40010400 	.word	0x40010400

08001d60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	460b      	mov	r3, r1
 8001d6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	887b      	ldrh	r3, [r7, #2]
 8001d72:	4013      	ands	r3, r2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d002      	beq.n	8001d7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	73fb      	strb	r3, [r7, #15]
 8001d7c:	e001      	b.n	8001d82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3714      	adds	r7, #20
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bc80      	pop	{r7}
 8001d8c:	4770      	bx	lr

08001d8e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b083      	sub	sp, #12
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
 8001d96:	460b      	mov	r3, r1
 8001d98:	807b      	strh	r3, [r7, #2]
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d9e:	787b      	ldrb	r3, [r7, #1]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d003      	beq.n	8001dac <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001da4:	887a      	ldrh	r2, [r7, #2]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001daa:	e003      	b.n	8001db4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001dac:	887b      	ldrh	r3, [r7, #2]
 8001dae:	041a      	lsls	r2, r3, #16
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	611a      	str	r2, [r3, #16]
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bc80      	pop	{r7}
 8001dbc:	4770      	bx	lr

08001dbe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b085      	sub	sp, #20
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001dd0:	887a      	ldrh	r2, [r7, #2]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	041a      	lsls	r2, r3, #16
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	43d9      	mvns	r1, r3
 8001ddc:	887b      	ldrh	r3, [r7, #2]
 8001dde:	400b      	ands	r3, r1
 8001de0:	431a      	orrs	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	611a      	str	r2, [r3, #16]
}
 8001de6:	bf00      	nop
 8001de8:	3714      	adds	r7, #20
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr

08001df0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001dfa:	4b08      	ldr	r3, [pc, #32]	@ (8001e1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dfc:	695a      	ldr	r2, [r3, #20]
 8001dfe:	88fb      	ldrh	r3, [r7, #6]
 8001e00:	4013      	ands	r3, r2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d006      	beq.n	8001e14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e06:	4a05      	ldr	r2, [pc, #20]	@ (8001e1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e08:	88fb      	ldrh	r3, [r7, #6]
 8001e0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e0c:	88fb      	ldrh	r3, [r7, #6]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7fe fcf4 	bl	80007fc <HAL_GPIO_EXTI_Callback>
  }
}
 8001e14:	bf00      	nop
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40010400 	.word	0x40010400

08001e20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e272      	b.n	8002318 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f000 8087 	beq.w	8001f4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e40:	4b92      	ldr	r3, [pc, #584]	@ (800208c <HAL_RCC_OscConfig+0x26c>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f003 030c 	and.w	r3, r3, #12
 8001e48:	2b04      	cmp	r3, #4
 8001e4a:	d00c      	beq.n	8001e66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e4c:	4b8f      	ldr	r3, [pc, #572]	@ (800208c <HAL_RCC_OscConfig+0x26c>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 030c 	and.w	r3, r3, #12
 8001e54:	2b08      	cmp	r3, #8
 8001e56:	d112      	bne.n	8001e7e <HAL_RCC_OscConfig+0x5e>
 8001e58:	4b8c      	ldr	r3, [pc, #560]	@ (800208c <HAL_RCC_OscConfig+0x26c>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e64:	d10b      	bne.n	8001e7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e66:	4b89      	ldr	r3, [pc, #548]	@ (800208c <HAL_RCC_OscConfig+0x26c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d06c      	beq.n	8001f4c <HAL_RCC_OscConfig+0x12c>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d168      	bne.n	8001f4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e24c      	b.n	8002318 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e86:	d106      	bne.n	8001e96 <HAL_RCC_OscConfig+0x76>
 8001e88:	4b80      	ldr	r3, [pc, #512]	@ (800208c <HAL_RCC_OscConfig+0x26c>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a7f      	ldr	r2, [pc, #508]	@ (800208c <HAL_RCC_OscConfig+0x26c>)
 8001e8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e92:	6013      	str	r3, [r2, #0]
 8001e94:	e02e      	b.n	8001ef4 <HAL_RCC_OscConfig+0xd4>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d10c      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x98>
 8001e9e:	4b7b      	ldr	r3, [pc, #492]	@ (800208c <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a7a      	ldr	r2, [pc, #488]	@ (800208c <HAL_RCC_OscConfig+0x26c>)
 8001ea4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ea8:	6013      	str	r3, [r2, #0]
 8001eaa:	4b78      	ldr	r3, [pc, #480]	@ (800208c <HAL_RCC_OscConfig+0x26c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a77      	ldr	r2, [pc, #476]	@ (800208c <HAL_RCC_OscConfig+0x26c>)
 8001eb0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001eb4:	6013      	str	r3, [r2, #0]
 8001eb6:	e01d      	b.n	8001ef4 <HAL_RCC_OscConfig+0xd4>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ec0:	d10c      	bne.n	8001edc <HAL_RCC_OscConfig+0xbc>
 8001ec2:	4b72      	ldr	r3, [pc, #456]	@ (800208c <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a71      	ldr	r2, [pc, #452]	@ (800208c <HAL_RCC_OscConfig+0x26c>)
 8001ec8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ecc:	6013      	str	r3, [r2, #0]
 8001ece:	4b6f      	ldr	r3, [pc, #444]	@ (800208c <HAL_RCC_OscConfig+0x26c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a6e      	ldr	r2, [pc, #440]	@ (800208c <HAL_RCC_OscConfig+0x26c>)
 8001ed4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ed8:	6013      	str	r3, [r2, #0]
 8001eda:	e00b      	b.n	8001ef4 <HAL_RCC_OscConfig+0xd4>
 8001edc:	4b6b      	ldr	r3, [pc, #428]	@ (800208c <HAL_RCC_OscConfig+0x26c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a6a      	ldr	r2, [pc, #424]	@ (800208c <HAL_RCC_OscConfig+0x26c>)
 8001ee2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ee6:	6013      	str	r3, [r2, #0]
 8001ee8:	4b68      	ldr	r3, [pc, #416]	@ (800208c <HAL_RCC_OscConfig+0x26c>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a67      	ldr	r2, [pc, #412]	@ (800208c <HAL_RCC_OscConfig+0x26c>)
 8001eee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ef2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d013      	beq.n	8001f24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efc:	f7fe ffbe 	bl	8000e7c <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f04:	f7fe ffba 	bl	8000e7c <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b64      	cmp	r3, #100	@ 0x64
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e200      	b.n	8002318 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f16:	4b5d      	ldr	r3, [pc, #372]	@ (800208c <HAL_RCC_OscConfig+0x26c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d0f0      	beq.n	8001f04 <HAL_RCC_OscConfig+0xe4>
 8001f22:	e014      	b.n	8001f4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f24:	f7fe ffaa 	bl	8000e7c <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f2c:	f7fe ffa6 	bl	8000e7c <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b64      	cmp	r3, #100	@ 0x64
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e1ec      	b.n	8002318 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f3e:	4b53      	ldr	r3, [pc, #332]	@ (800208c <HAL_RCC_OscConfig+0x26c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1f0      	bne.n	8001f2c <HAL_RCC_OscConfig+0x10c>
 8001f4a:	e000      	b.n	8001f4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d063      	beq.n	8002022 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f5a:	4b4c      	ldr	r3, [pc, #304]	@ (800208c <HAL_RCC_OscConfig+0x26c>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f003 030c 	and.w	r3, r3, #12
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d00b      	beq.n	8001f7e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f66:	4b49      	ldr	r3, [pc, #292]	@ (800208c <HAL_RCC_OscConfig+0x26c>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f003 030c 	and.w	r3, r3, #12
 8001f6e:	2b08      	cmp	r3, #8
 8001f70:	d11c      	bne.n	8001fac <HAL_RCC_OscConfig+0x18c>
 8001f72:	4b46      	ldr	r3, [pc, #280]	@ (800208c <HAL_RCC_OscConfig+0x26c>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d116      	bne.n	8001fac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f7e:	4b43      	ldr	r3, [pc, #268]	@ (800208c <HAL_RCC_OscConfig+0x26c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d005      	beq.n	8001f96 <HAL_RCC_OscConfig+0x176>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d001      	beq.n	8001f96 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e1c0      	b.n	8002318 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f96:	4b3d      	ldr	r3, [pc, #244]	@ (800208c <HAL_RCC_OscConfig+0x26c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	695b      	ldr	r3, [r3, #20]
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	4939      	ldr	r1, [pc, #228]	@ (800208c <HAL_RCC_OscConfig+0x26c>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001faa:	e03a      	b.n	8002022 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d020      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fb4:	4b36      	ldr	r3, [pc, #216]	@ (8002090 <HAL_RCC_OscConfig+0x270>)
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fba:	f7fe ff5f 	bl	8000e7c <HAL_GetTick>
 8001fbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc0:	e008      	b.n	8001fd4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fc2:	f7fe ff5b 	bl	8000e7c <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e1a1      	b.n	8002318 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd4:	4b2d      	ldr	r3, [pc, #180]	@ (800208c <HAL_RCC_OscConfig+0x26c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d0f0      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe0:	4b2a      	ldr	r3, [pc, #168]	@ (800208c <HAL_RCC_OscConfig+0x26c>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	695b      	ldr	r3, [r3, #20]
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	4927      	ldr	r1, [pc, #156]	@ (800208c <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	600b      	str	r3, [r1, #0]
 8001ff4:	e015      	b.n	8002022 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ff6:	4b26      	ldr	r3, [pc, #152]	@ (8002090 <HAL_RCC_OscConfig+0x270>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffc:	f7fe ff3e 	bl	8000e7c <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002004:	f7fe ff3a 	bl	8000e7c <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e180      	b.n	8002318 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002016:	4b1d      	ldr	r3, [pc, #116]	@ (800208c <HAL_RCC_OscConfig+0x26c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1f0      	bne.n	8002004 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0308 	and.w	r3, r3, #8
 800202a:	2b00      	cmp	r3, #0
 800202c:	d03a      	beq.n	80020a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d019      	beq.n	800206a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002036:	4b17      	ldr	r3, [pc, #92]	@ (8002094 <HAL_RCC_OscConfig+0x274>)
 8002038:	2201      	movs	r2, #1
 800203a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800203c:	f7fe ff1e 	bl	8000e7c <HAL_GetTick>
 8002040:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002044:	f7fe ff1a 	bl	8000e7c <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e160      	b.n	8002318 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002056:	4b0d      	ldr	r3, [pc, #52]	@ (800208c <HAL_RCC_OscConfig+0x26c>)
 8002058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d0f0      	beq.n	8002044 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002062:	2001      	movs	r0, #1
 8002064:	f000 face 	bl	8002604 <RCC_Delay>
 8002068:	e01c      	b.n	80020a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800206a:	4b0a      	ldr	r3, [pc, #40]	@ (8002094 <HAL_RCC_OscConfig+0x274>)
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002070:	f7fe ff04 	bl	8000e7c <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002076:	e00f      	b.n	8002098 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002078:	f7fe ff00 	bl	8000e7c <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d908      	bls.n	8002098 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e146      	b.n	8002318 <HAL_RCC_OscConfig+0x4f8>
 800208a:	bf00      	nop
 800208c:	40021000 	.word	0x40021000
 8002090:	42420000 	.word	0x42420000
 8002094:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002098:	4b92      	ldr	r3, [pc, #584]	@ (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 800209a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800209c:	f003 0302 	and.w	r3, r3, #2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d1e9      	bne.n	8002078 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f000 80a6 	beq.w	80021fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020b2:	2300      	movs	r3, #0
 80020b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020b6:	4b8b      	ldr	r3, [pc, #556]	@ (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d10d      	bne.n	80020de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020c2:	4b88      	ldr	r3, [pc, #544]	@ (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	4a87      	ldr	r2, [pc, #540]	@ (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 80020c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020cc:	61d3      	str	r3, [r2, #28]
 80020ce:	4b85      	ldr	r3, [pc, #532]	@ (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020d6:	60bb      	str	r3, [r7, #8]
 80020d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020da:	2301      	movs	r3, #1
 80020dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020de:	4b82      	ldr	r3, [pc, #520]	@ (80022e8 <HAL_RCC_OscConfig+0x4c8>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d118      	bne.n	800211c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020ea:	4b7f      	ldr	r3, [pc, #508]	@ (80022e8 <HAL_RCC_OscConfig+0x4c8>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a7e      	ldr	r2, [pc, #504]	@ (80022e8 <HAL_RCC_OscConfig+0x4c8>)
 80020f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020f6:	f7fe fec1 	bl	8000e7c <HAL_GetTick>
 80020fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020fc:	e008      	b.n	8002110 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020fe:	f7fe febd 	bl	8000e7c <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b64      	cmp	r3, #100	@ 0x64
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e103      	b.n	8002318 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002110:	4b75      	ldr	r3, [pc, #468]	@ (80022e8 <HAL_RCC_OscConfig+0x4c8>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002118:	2b00      	cmp	r3, #0
 800211a:	d0f0      	beq.n	80020fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d106      	bne.n	8002132 <HAL_RCC_OscConfig+0x312>
 8002124:	4b6f      	ldr	r3, [pc, #444]	@ (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 8002126:	6a1b      	ldr	r3, [r3, #32]
 8002128:	4a6e      	ldr	r2, [pc, #440]	@ (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 800212a:	f043 0301 	orr.w	r3, r3, #1
 800212e:	6213      	str	r3, [r2, #32]
 8002130:	e02d      	b.n	800218e <HAL_RCC_OscConfig+0x36e>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d10c      	bne.n	8002154 <HAL_RCC_OscConfig+0x334>
 800213a:	4b6a      	ldr	r3, [pc, #424]	@ (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 800213c:	6a1b      	ldr	r3, [r3, #32]
 800213e:	4a69      	ldr	r2, [pc, #420]	@ (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 8002140:	f023 0301 	bic.w	r3, r3, #1
 8002144:	6213      	str	r3, [r2, #32]
 8002146:	4b67      	ldr	r3, [pc, #412]	@ (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 8002148:	6a1b      	ldr	r3, [r3, #32]
 800214a:	4a66      	ldr	r2, [pc, #408]	@ (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 800214c:	f023 0304 	bic.w	r3, r3, #4
 8002150:	6213      	str	r3, [r2, #32]
 8002152:	e01c      	b.n	800218e <HAL_RCC_OscConfig+0x36e>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	2b05      	cmp	r3, #5
 800215a:	d10c      	bne.n	8002176 <HAL_RCC_OscConfig+0x356>
 800215c:	4b61      	ldr	r3, [pc, #388]	@ (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 800215e:	6a1b      	ldr	r3, [r3, #32]
 8002160:	4a60      	ldr	r2, [pc, #384]	@ (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 8002162:	f043 0304 	orr.w	r3, r3, #4
 8002166:	6213      	str	r3, [r2, #32]
 8002168:	4b5e      	ldr	r3, [pc, #376]	@ (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	4a5d      	ldr	r2, [pc, #372]	@ (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 800216e:	f043 0301 	orr.w	r3, r3, #1
 8002172:	6213      	str	r3, [r2, #32]
 8002174:	e00b      	b.n	800218e <HAL_RCC_OscConfig+0x36e>
 8002176:	4b5b      	ldr	r3, [pc, #364]	@ (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 8002178:	6a1b      	ldr	r3, [r3, #32]
 800217a:	4a5a      	ldr	r2, [pc, #360]	@ (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 800217c:	f023 0301 	bic.w	r3, r3, #1
 8002180:	6213      	str	r3, [r2, #32]
 8002182:	4b58      	ldr	r3, [pc, #352]	@ (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 8002184:	6a1b      	ldr	r3, [r3, #32]
 8002186:	4a57      	ldr	r2, [pc, #348]	@ (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 8002188:	f023 0304 	bic.w	r3, r3, #4
 800218c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d015      	beq.n	80021c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002196:	f7fe fe71 	bl	8000e7c <HAL_GetTick>
 800219a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800219c:	e00a      	b.n	80021b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800219e:	f7fe fe6d 	bl	8000e7c <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d901      	bls.n	80021b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e0b1      	b.n	8002318 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b4:	4b4b      	ldr	r3, [pc, #300]	@ (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 80021b6:	6a1b      	ldr	r3, [r3, #32]
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d0ee      	beq.n	800219e <HAL_RCC_OscConfig+0x37e>
 80021c0:	e014      	b.n	80021ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c2:	f7fe fe5b 	bl	8000e7c <HAL_GetTick>
 80021c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021c8:	e00a      	b.n	80021e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ca:	f7fe fe57 	bl	8000e7c <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021d8:	4293      	cmp	r3, r2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e09b      	b.n	8002318 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021e0:	4b40      	ldr	r3, [pc, #256]	@ (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 80021e2:	6a1b      	ldr	r3, [r3, #32]
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1ee      	bne.n	80021ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021ec:	7dfb      	ldrb	r3, [r7, #23]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d105      	bne.n	80021fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021f2:	4b3c      	ldr	r3, [pc, #240]	@ (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	4a3b      	ldr	r2, [pc, #236]	@ (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 80021f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	2b00      	cmp	r3, #0
 8002204:	f000 8087 	beq.w	8002316 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002208:	4b36      	ldr	r3, [pc, #216]	@ (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f003 030c 	and.w	r3, r3, #12
 8002210:	2b08      	cmp	r3, #8
 8002212:	d061      	beq.n	80022d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	69db      	ldr	r3, [r3, #28]
 8002218:	2b02      	cmp	r3, #2
 800221a:	d146      	bne.n	80022aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800221c:	4b33      	ldr	r3, [pc, #204]	@ (80022ec <HAL_RCC_OscConfig+0x4cc>)
 800221e:	2200      	movs	r2, #0
 8002220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002222:	f7fe fe2b 	bl	8000e7c <HAL_GetTick>
 8002226:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002228:	e008      	b.n	800223c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800222a:	f7fe fe27 	bl	8000e7c <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e06d      	b.n	8002318 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800223c:	4b29      	ldr	r3, [pc, #164]	@ (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d1f0      	bne.n	800222a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a1b      	ldr	r3, [r3, #32]
 800224c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002250:	d108      	bne.n	8002264 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002252:	4b24      	ldr	r3, [pc, #144]	@ (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	4921      	ldr	r1, [pc, #132]	@ (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 8002260:	4313      	orrs	r3, r2
 8002262:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002264:	4b1f      	ldr	r3, [pc, #124]	@ (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a19      	ldr	r1, [r3, #32]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002274:	430b      	orrs	r3, r1
 8002276:	491b      	ldr	r1, [pc, #108]	@ (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 8002278:	4313      	orrs	r3, r2
 800227a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800227c:	4b1b      	ldr	r3, [pc, #108]	@ (80022ec <HAL_RCC_OscConfig+0x4cc>)
 800227e:	2201      	movs	r2, #1
 8002280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002282:	f7fe fdfb 	bl	8000e7c <HAL_GetTick>
 8002286:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002288:	e008      	b.n	800229c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800228a:	f7fe fdf7 	bl	8000e7c <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e03d      	b.n	8002318 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800229c:	4b11      	ldr	r3, [pc, #68]	@ (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0f0      	beq.n	800228a <HAL_RCC_OscConfig+0x46a>
 80022a8:	e035      	b.n	8002316 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022aa:	4b10      	ldr	r3, [pc, #64]	@ (80022ec <HAL_RCC_OscConfig+0x4cc>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b0:	f7fe fde4 	bl	8000e7c <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b8:	f7fe fde0 	bl	8000e7c <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e026      	b.n	8002318 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ca:	4b06      	ldr	r3, [pc, #24]	@ (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1f0      	bne.n	80022b8 <HAL_RCC_OscConfig+0x498>
 80022d6:	e01e      	b.n	8002316 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	69db      	ldr	r3, [r3, #28]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d107      	bne.n	80022f0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e019      	b.n	8002318 <HAL_RCC_OscConfig+0x4f8>
 80022e4:	40021000 	.word	0x40021000
 80022e8:	40007000 	.word	0x40007000
 80022ec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002320 <HAL_RCC_OscConfig+0x500>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	429a      	cmp	r2, r3
 8002302:	d106      	bne.n	8002312 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800230e:	429a      	cmp	r2, r3
 8002310:	d001      	beq.n	8002316 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e000      	b.n	8002318 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3718      	adds	r7, #24
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40021000 	.word	0x40021000

08002324 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d101      	bne.n	8002338 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e0d0      	b.n	80024da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002338:	4b6a      	ldr	r3, [pc, #424]	@ (80024e4 <HAL_RCC_ClockConfig+0x1c0>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0307 	and.w	r3, r3, #7
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	429a      	cmp	r2, r3
 8002344:	d910      	bls.n	8002368 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002346:	4b67      	ldr	r3, [pc, #412]	@ (80024e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f023 0207 	bic.w	r2, r3, #7
 800234e:	4965      	ldr	r1, [pc, #404]	@ (80024e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	4313      	orrs	r3, r2
 8002354:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002356:	4b63      	ldr	r3, [pc, #396]	@ (80024e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0307 	and.w	r3, r3, #7
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	429a      	cmp	r2, r3
 8002362:	d001      	beq.n	8002368 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e0b8      	b.n	80024da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d020      	beq.n	80023b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0304 	and.w	r3, r3, #4
 800237c:	2b00      	cmp	r3, #0
 800237e:	d005      	beq.n	800238c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002380:	4b59      	ldr	r3, [pc, #356]	@ (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	4a58      	ldr	r2, [pc, #352]	@ (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002386:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800238a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0308 	and.w	r3, r3, #8
 8002394:	2b00      	cmp	r3, #0
 8002396:	d005      	beq.n	80023a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002398:	4b53      	ldr	r3, [pc, #332]	@ (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	4a52      	ldr	r2, [pc, #328]	@ (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 800239e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80023a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023a4:	4b50      	ldr	r3, [pc, #320]	@ (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	494d      	ldr	r1, [pc, #308]	@ (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d040      	beq.n	8002444 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d107      	bne.n	80023da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ca:	4b47      	ldr	r3, [pc, #284]	@ (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d115      	bne.n	8002402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e07f      	b.n	80024da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d107      	bne.n	80023f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023e2:	4b41      	ldr	r3, [pc, #260]	@ (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d109      	bne.n	8002402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e073      	b.n	80024da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023f2:	4b3d      	ldr	r3, [pc, #244]	@ (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e06b      	b.n	80024da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002402:	4b39      	ldr	r3, [pc, #228]	@ (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f023 0203 	bic.w	r2, r3, #3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	4936      	ldr	r1, [pc, #216]	@ (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002410:	4313      	orrs	r3, r2
 8002412:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002414:	f7fe fd32 	bl	8000e7c <HAL_GetTick>
 8002418:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800241a:	e00a      	b.n	8002432 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800241c:	f7fe fd2e 	bl	8000e7c <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	f241 3288 	movw	r2, #5000	@ 0x1388
 800242a:	4293      	cmp	r3, r2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e053      	b.n	80024da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002432:	4b2d      	ldr	r3, [pc, #180]	@ (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f003 020c 	and.w	r2, r3, #12
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	429a      	cmp	r2, r3
 8002442:	d1eb      	bne.n	800241c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002444:	4b27      	ldr	r3, [pc, #156]	@ (80024e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0307 	and.w	r3, r3, #7
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	429a      	cmp	r2, r3
 8002450:	d210      	bcs.n	8002474 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002452:	4b24      	ldr	r3, [pc, #144]	@ (80024e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f023 0207 	bic.w	r2, r3, #7
 800245a:	4922      	ldr	r1, [pc, #136]	@ (80024e4 <HAL_RCC_ClockConfig+0x1c0>)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	4313      	orrs	r3, r2
 8002460:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002462:	4b20      	ldr	r3, [pc, #128]	@ (80024e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0307 	and.w	r3, r3, #7
 800246a:	683a      	ldr	r2, [r7, #0]
 800246c:	429a      	cmp	r2, r3
 800246e:	d001      	beq.n	8002474 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e032      	b.n	80024da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b00      	cmp	r3, #0
 800247e:	d008      	beq.n	8002492 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002480:	4b19      	ldr	r3, [pc, #100]	@ (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	4916      	ldr	r1, [pc, #88]	@ (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 800248e:	4313      	orrs	r3, r2
 8002490:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0308 	and.w	r3, r3, #8
 800249a:	2b00      	cmp	r3, #0
 800249c:	d009      	beq.n	80024b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800249e:	4b12      	ldr	r3, [pc, #72]	@ (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	490e      	ldr	r1, [pc, #56]	@ (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024b2:	f000 f821 	bl	80024f8 <HAL_RCC_GetSysClockFreq>
 80024b6:	4602      	mov	r2, r0
 80024b8:	4b0b      	ldr	r3, [pc, #44]	@ (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	091b      	lsrs	r3, r3, #4
 80024be:	f003 030f 	and.w	r3, r3, #15
 80024c2:	490a      	ldr	r1, [pc, #40]	@ (80024ec <HAL_RCC_ClockConfig+0x1c8>)
 80024c4:	5ccb      	ldrb	r3, [r1, r3]
 80024c6:	fa22 f303 	lsr.w	r3, r2, r3
 80024ca:	4a09      	ldr	r2, [pc, #36]	@ (80024f0 <HAL_RCC_ClockConfig+0x1cc>)
 80024cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024ce:	4b09      	ldr	r3, [pc, #36]	@ (80024f4 <HAL_RCC_ClockConfig+0x1d0>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7fe fc90 	bl	8000df8 <HAL_InitTick>

  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	40022000 	.word	0x40022000
 80024e8:	40021000 	.word	0x40021000
 80024ec:	08005068 	.word	0x08005068
 80024f0:	20000008 	.word	0x20000008
 80024f4:	2000000c 	.word	0x2000000c

080024f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b087      	sub	sp, #28
 80024fc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024fe:	2300      	movs	r3, #0
 8002500:	60fb      	str	r3, [r7, #12]
 8002502:	2300      	movs	r3, #0
 8002504:	60bb      	str	r3, [r7, #8]
 8002506:	2300      	movs	r3, #0
 8002508:	617b      	str	r3, [r7, #20]
 800250a:	2300      	movs	r3, #0
 800250c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800250e:	2300      	movs	r3, #0
 8002510:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002512:	4b1e      	ldr	r3, [pc, #120]	@ (800258c <HAL_RCC_GetSysClockFreq+0x94>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f003 030c 	and.w	r3, r3, #12
 800251e:	2b04      	cmp	r3, #4
 8002520:	d002      	beq.n	8002528 <HAL_RCC_GetSysClockFreq+0x30>
 8002522:	2b08      	cmp	r3, #8
 8002524:	d003      	beq.n	800252e <HAL_RCC_GetSysClockFreq+0x36>
 8002526:	e027      	b.n	8002578 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002528:	4b19      	ldr	r3, [pc, #100]	@ (8002590 <HAL_RCC_GetSysClockFreq+0x98>)
 800252a:	613b      	str	r3, [r7, #16]
      break;
 800252c:	e027      	b.n	800257e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	0c9b      	lsrs	r3, r3, #18
 8002532:	f003 030f 	and.w	r3, r3, #15
 8002536:	4a17      	ldr	r2, [pc, #92]	@ (8002594 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002538:	5cd3      	ldrb	r3, [r2, r3]
 800253a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d010      	beq.n	8002568 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002546:	4b11      	ldr	r3, [pc, #68]	@ (800258c <HAL_RCC_GetSysClockFreq+0x94>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	0c5b      	lsrs	r3, r3, #17
 800254c:	f003 0301 	and.w	r3, r3, #1
 8002550:	4a11      	ldr	r2, [pc, #68]	@ (8002598 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002552:	5cd3      	ldrb	r3, [r2, r3]
 8002554:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a0d      	ldr	r2, [pc, #52]	@ (8002590 <HAL_RCC_GetSysClockFreq+0x98>)
 800255a:	fb03 f202 	mul.w	r2, r3, r2
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	fbb2 f3f3 	udiv	r3, r2, r3
 8002564:	617b      	str	r3, [r7, #20]
 8002566:	e004      	b.n	8002572 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a0c      	ldr	r2, [pc, #48]	@ (800259c <HAL_RCC_GetSysClockFreq+0xa4>)
 800256c:	fb02 f303 	mul.w	r3, r2, r3
 8002570:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	613b      	str	r3, [r7, #16]
      break;
 8002576:	e002      	b.n	800257e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002578:	4b05      	ldr	r3, [pc, #20]	@ (8002590 <HAL_RCC_GetSysClockFreq+0x98>)
 800257a:	613b      	str	r3, [r7, #16]
      break;
 800257c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800257e:	693b      	ldr	r3, [r7, #16]
}
 8002580:	4618      	mov	r0, r3
 8002582:	371c      	adds	r7, #28
 8002584:	46bd      	mov	sp, r7
 8002586:	bc80      	pop	{r7}
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	40021000 	.word	0x40021000
 8002590:	007a1200 	.word	0x007a1200
 8002594:	08005080 	.word	0x08005080
 8002598:	08005090 	.word	0x08005090
 800259c:	003d0900 	.word	0x003d0900

080025a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025a4:	4b02      	ldr	r3, [pc, #8]	@ (80025b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80025a6:	681b      	ldr	r3, [r3, #0]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bc80      	pop	{r7}
 80025ae:	4770      	bx	lr
 80025b0:	20000008 	.word	0x20000008

080025b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025b8:	f7ff fff2 	bl	80025a0 <HAL_RCC_GetHCLKFreq>
 80025bc:	4602      	mov	r2, r0
 80025be:	4b05      	ldr	r3, [pc, #20]	@ (80025d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	0a1b      	lsrs	r3, r3, #8
 80025c4:	f003 0307 	and.w	r3, r3, #7
 80025c8:	4903      	ldr	r1, [pc, #12]	@ (80025d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025ca:	5ccb      	ldrb	r3, [r1, r3]
 80025cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	40021000 	.word	0x40021000
 80025d8:	08005078 	.word	0x08005078

080025dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025e0:	f7ff ffde 	bl	80025a0 <HAL_RCC_GetHCLKFreq>
 80025e4:	4602      	mov	r2, r0
 80025e6:	4b05      	ldr	r3, [pc, #20]	@ (80025fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	0adb      	lsrs	r3, r3, #11
 80025ec:	f003 0307 	and.w	r3, r3, #7
 80025f0:	4903      	ldr	r1, [pc, #12]	@ (8002600 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025f2:	5ccb      	ldrb	r3, [r1, r3]
 80025f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	40021000 	.word	0x40021000
 8002600:	08005078 	.word	0x08005078

08002604 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800260c:	4b0a      	ldr	r3, [pc, #40]	@ (8002638 <RCC_Delay+0x34>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a0a      	ldr	r2, [pc, #40]	@ (800263c <RCC_Delay+0x38>)
 8002612:	fba2 2303 	umull	r2, r3, r2, r3
 8002616:	0a5b      	lsrs	r3, r3, #9
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	fb02 f303 	mul.w	r3, r2, r3
 800261e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002620:	bf00      	nop
  }
  while (Delay --);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	1e5a      	subs	r2, r3, #1
 8002626:	60fa      	str	r2, [r7, #12]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1f9      	bne.n	8002620 <RCC_Delay+0x1c>
}
 800262c:	bf00      	nop
 800262e:	bf00      	nop
 8002630:	3714      	adds	r7, #20
 8002632:	46bd      	mov	sp, r7
 8002634:	bc80      	pop	{r7}
 8002636:	4770      	bx	lr
 8002638:	20000008 	.word	0x20000008
 800263c:	10624dd3 	.word	0x10624dd3

08002640 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002648:	2300      	movs	r3, #0
 800264a:	613b      	str	r3, [r7, #16]
 800264c:	2300      	movs	r3, #0
 800264e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	2b00      	cmp	r3, #0
 800265a:	d07d      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800265c:	2300      	movs	r3, #0
 800265e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002660:	4b4f      	ldr	r3, [pc, #316]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002662:	69db      	ldr	r3, [r3, #28]
 8002664:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10d      	bne.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800266c:	4b4c      	ldr	r3, [pc, #304]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800266e:	69db      	ldr	r3, [r3, #28]
 8002670:	4a4b      	ldr	r2, [pc, #300]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002672:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002676:	61d3      	str	r3, [r2, #28]
 8002678:	4b49      	ldr	r3, [pc, #292]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800267a:	69db      	ldr	r3, [r3, #28]
 800267c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002680:	60bb      	str	r3, [r7, #8]
 8002682:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002684:	2301      	movs	r3, #1
 8002686:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002688:	4b46      	ldr	r3, [pc, #280]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002690:	2b00      	cmp	r3, #0
 8002692:	d118      	bne.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002694:	4b43      	ldr	r3, [pc, #268]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a42      	ldr	r2, [pc, #264]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800269a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800269e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026a0:	f7fe fbec 	bl	8000e7c <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a6:	e008      	b.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026a8:	f7fe fbe8 	bl	8000e7c <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b64      	cmp	r3, #100	@ 0x64
 80026b4:	d901      	bls.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e06d      	b.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ba:	4b3a      	ldr	r3, [pc, #232]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d0f0      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026c6:	4b36      	ldr	r3, [pc, #216]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026c8:	6a1b      	ldr	r3, [r3, #32]
 80026ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026ce:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d02e      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d027      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026e4:	4b2e      	ldr	r3, [pc, #184]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026e6:	6a1b      	ldr	r3, [r3, #32]
 80026e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026ec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026ee:	4b2e      	ldr	r3, [pc, #184]	@ (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80026f0:	2201      	movs	r2, #1
 80026f2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026f4:	4b2c      	ldr	r3, [pc, #176]	@ (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80026fa:	4a29      	ldr	r2, [pc, #164]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b00      	cmp	r3, #0
 8002708:	d014      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270a:	f7fe fbb7 	bl	8000e7c <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002710:	e00a      	b.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002712:	f7fe fbb3 	bl	8000e7c <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002720:	4293      	cmp	r3, r2
 8002722:	d901      	bls.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e036      	b.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002728:	4b1d      	ldr	r3, [pc, #116]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d0ee      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002734:	4b1a      	ldr	r3, [pc, #104]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002736:	6a1b      	ldr	r3, [r3, #32]
 8002738:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	4917      	ldr	r1, [pc, #92]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002742:	4313      	orrs	r3, r2
 8002744:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002746:	7dfb      	ldrb	r3, [r7, #23]
 8002748:	2b01      	cmp	r3, #1
 800274a:	d105      	bne.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800274c:	4b14      	ldr	r3, [pc, #80]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800274e:	69db      	ldr	r3, [r3, #28]
 8002750:	4a13      	ldr	r2, [pc, #76]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002752:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002756:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d008      	beq.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002764:	4b0e      	ldr	r3, [pc, #56]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	490b      	ldr	r1, [pc, #44]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002772:	4313      	orrs	r3, r2
 8002774:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0310 	and.w	r3, r3, #16
 800277e:	2b00      	cmp	r3, #0
 8002780:	d008      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002782:	4b07      	ldr	r3, [pc, #28]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	4904      	ldr	r1, [pc, #16]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002790:	4313      	orrs	r3, r2
 8002792:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3718      	adds	r7, #24
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	40021000 	.word	0x40021000
 80027a4:	40007000 	.word	0x40007000
 80027a8:	42420440 	.word	0x42420440

080027ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e041      	b.n	8002842 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d106      	bne.n	80027d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f7fe f962 	bl	8000a9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2202      	movs	r2, #2
 80027dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	3304      	adds	r3, #4
 80027e8:	4619      	mov	r1, r3
 80027ea:	4610      	mov	r0, r2
 80027ec:	f000 fd86 	bl	80032fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
	...

0800284c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800285a:	b2db      	uxtb	r3, r3
 800285c:	2b01      	cmp	r3, #1
 800285e:	d001      	beq.n	8002864 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e032      	b.n	80028ca <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2202      	movs	r2, #2
 8002868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a18      	ldr	r2, [pc, #96]	@ (80028d4 <HAL_TIM_Base_Start+0x88>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d00e      	beq.n	8002894 <HAL_TIM_Base_Start+0x48>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800287e:	d009      	beq.n	8002894 <HAL_TIM_Base_Start+0x48>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a14      	ldr	r2, [pc, #80]	@ (80028d8 <HAL_TIM_Base_Start+0x8c>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d004      	beq.n	8002894 <HAL_TIM_Base_Start+0x48>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a13      	ldr	r2, [pc, #76]	@ (80028dc <HAL_TIM_Base_Start+0x90>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d111      	bne.n	80028b8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f003 0307 	and.w	r3, r3, #7
 800289e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2b06      	cmp	r3, #6
 80028a4:	d010      	beq.n	80028c8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f042 0201 	orr.w	r2, r2, #1
 80028b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028b6:	e007      	b.n	80028c8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f042 0201 	orr.w	r2, r2, #1
 80028c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3714      	adds	r7, #20
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bc80      	pop	{r7}
 80028d2:	4770      	bx	lr
 80028d4:	40012c00 	.word	0x40012c00
 80028d8:	40000400 	.word	0x40000400
 80028dc:	40000800 	.word	0x40000800

080028e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d001      	beq.n	80028f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e03a      	b.n	800296e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2202      	movs	r2, #2
 80028fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	68da      	ldr	r2, [r3, #12]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f042 0201 	orr.w	r2, r2, #1
 800290e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a18      	ldr	r2, [pc, #96]	@ (8002978 <HAL_TIM_Base_Start_IT+0x98>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d00e      	beq.n	8002938 <HAL_TIM_Base_Start_IT+0x58>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002922:	d009      	beq.n	8002938 <HAL_TIM_Base_Start_IT+0x58>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a14      	ldr	r2, [pc, #80]	@ (800297c <HAL_TIM_Base_Start_IT+0x9c>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d004      	beq.n	8002938 <HAL_TIM_Base_Start_IT+0x58>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a13      	ldr	r2, [pc, #76]	@ (8002980 <HAL_TIM_Base_Start_IT+0xa0>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d111      	bne.n	800295c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 0307 	and.w	r3, r3, #7
 8002942:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2b06      	cmp	r3, #6
 8002948:	d010      	beq.n	800296c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f042 0201 	orr.w	r2, r2, #1
 8002958:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800295a:	e007      	b.n	800296c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f042 0201 	orr.w	r2, r2, #1
 800296a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3714      	adds	r7, #20
 8002972:	46bd      	mov	sp, r7
 8002974:	bc80      	pop	{r7}
 8002976:	4770      	bx	lr
 8002978:	40012c00 	.word	0x40012c00
 800297c:	40000400 	.word	0x40000400
 8002980:	40000800 	.word	0x40000800

08002984 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68da      	ldr	r2, [r3, #12]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 0201 	bic.w	r2, r2, #1
 800299a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	6a1a      	ldr	r2, [r3, #32]
 80029a2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80029a6:	4013      	ands	r3, r2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d10f      	bne.n	80029cc <HAL_TIM_Base_Stop_IT+0x48>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6a1a      	ldr	r2, [r3, #32]
 80029b2:	f240 4344 	movw	r3, #1092	@ 0x444
 80029b6:	4013      	ands	r3, r2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d107      	bne.n	80029cc <HAL_TIM_Base_Stop_IT+0x48>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 0201 	bic.w	r2, r2, #1
 80029ca:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	bc80      	pop	{r7}
 80029de:	4770      	bx	lr

080029e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e041      	b.n	8002a76 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d106      	bne.n	8002a0c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 f839 	bl	8002a7e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2202      	movs	r2, #2
 8002a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	3304      	adds	r3, #4
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4610      	mov	r0, r2
 8002a20:	f000 fc6c 	bl	80032fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b083      	sub	sp, #12
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a86:	bf00      	nop
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bc80      	pop	{r7}
 8002a8e:	4770      	bx	lr

08002a90 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d109      	bne.n	8002ab8 <HAL_TIM_PWM_Start_IT+0x28>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	bf14      	ite	ne
 8002ab0:	2301      	movne	r3, #1
 8002ab2:	2300      	moveq	r3, #0
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	e022      	b.n	8002afe <HAL_TIM_PWM_Start_IT+0x6e>
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	2b04      	cmp	r3, #4
 8002abc:	d109      	bne.n	8002ad2 <HAL_TIM_PWM_Start_IT+0x42>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	bf14      	ite	ne
 8002aca:	2301      	movne	r3, #1
 8002acc:	2300      	moveq	r3, #0
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	e015      	b.n	8002afe <HAL_TIM_PWM_Start_IT+0x6e>
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	2b08      	cmp	r3, #8
 8002ad6:	d109      	bne.n	8002aec <HAL_TIM_PWM_Start_IT+0x5c>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	bf14      	ite	ne
 8002ae4:	2301      	movne	r3, #1
 8002ae6:	2300      	moveq	r3, #0
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	e008      	b.n	8002afe <HAL_TIM_PWM_Start_IT+0x6e>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	bf14      	ite	ne
 8002af8:	2301      	movne	r3, #1
 8002afa:	2300      	moveq	r3, #0
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e0a9      	b.n	8002c5a <HAL_TIM_PWM_Start_IT+0x1ca>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d104      	bne.n	8002b16 <HAL_TIM_PWM_Start_IT+0x86>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2202      	movs	r2, #2
 8002b10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b14:	e013      	b.n	8002b3e <HAL_TIM_PWM_Start_IT+0xae>
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	2b04      	cmp	r3, #4
 8002b1a:	d104      	bne.n	8002b26 <HAL_TIM_PWM_Start_IT+0x96>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2202      	movs	r2, #2
 8002b20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b24:	e00b      	b.n	8002b3e <HAL_TIM_PWM_Start_IT+0xae>
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	2b08      	cmp	r3, #8
 8002b2a:	d104      	bne.n	8002b36 <HAL_TIM_PWM_Start_IT+0xa6>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2202      	movs	r2, #2
 8002b30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b34:	e003      	b.n	8002b3e <HAL_TIM_PWM_Start_IT+0xae>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2202      	movs	r2, #2
 8002b3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	2b0c      	cmp	r3, #12
 8002b42:	d841      	bhi.n	8002bc8 <HAL_TIM_PWM_Start_IT+0x138>
 8002b44:	a201      	add	r2, pc, #4	@ (adr r2, 8002b4c <HAL_TIM_PWM_Start_IT+0xbc>)
 8002b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b4a:	bf00      	nop
 8002b4c:	08002b81 	.word	0x08002b81
 8002b50:	08002bc9 	.word	0x08002bc9
 8002b54:	08002bc9 	.word	0x08002bc9
 8002b58:	08002bc9 	.word	0x08002bc9
 8002b5c:	08002b93 	.word	0x08002b93
 8002b60:	08002bc9 	.word	0x08002bc9
 8002b64:	08002bc9 	.word	0x08002bc9
 8002b68:	08002bc9 	.word	0x08002bc9
 8002b6c:	08002ba5 	.word	0x08002ba5
 8002b70:	08002bc9 	.word	0x08002bc9
 8002b74:	08002bc9 	.word	0x08002bc9
 8002b78:	08002bc9 	.word	0x08002bc9
 8002b7c:	08002bb7 	.word	0x08002bb7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68da      	ldr	r2, [r3, #12]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f042 0202 	orr.w	r2, r2, #2
 8002b8e:	60da      	str	r2, [r3, #12]
      break;
 8002b90:	e01d      	b.n	8002bce <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68da      	ldr	r2, [r3, #12]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f042 0204 	orr.w	r2, r2, #4
 8002ba0:	60da      	str	r2, [r3, #12]
      break;
 8002ba2:	e014      	b.n	8002bce <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68da      	ldr	r2, [r3, #12]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f042 0208 	orr.w	r2, r2, #8
 8002bb2:	60da      	str	r2, [r3, #12]
      break;
 8002bb4:	e00b      	b.n	8002bce <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68da      	ldr	r2, [r3, #12]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f042 0210 	orr.w	r2, r2, #16
 8002bc4:	60da      	str	r2, [r3, #12]
      break;
 8002bc6:	e002      	b.n	8002bce <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	73fb      	strb	r3, [r7, #15]
      break;
 8002bcc:	bf00      	nop
  }

  if (status == HAL_OK)
 8002bce:	7bfb      	ldrb	r3, [r7, #15]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d141      	bne.n	8002c58 <HAL_TIM_PWM_Start_IT+0x1c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	6839      	ldr	r1, [r7, #0]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f000 fe19 	bl	8003814 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a1f      	ldr	r2, [pc, #124]	@ (8002c64 <HAL_TIM_PWM_Start_IT+0x1d4>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d107      	bne.n	8002bfc <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002bfa:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a18      	ldr	r2, [pc, #96]	@ (8002c64 <HAL_TIM_PWM_Start_IT+0x1d4>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d00e      	beq.n	8002c24 <HAL_TIM_PWM_Start_IT+0x194>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c0e:	d009      	beq.n	8002c24 <HAL_TIM_PWM_Start_IT+0x194>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a14      	ldr	r2, [pc, #80]	@ (8002c68 <HAL_TIM_PWM_Start_IT+0x1d8>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d004      	beq.n	8002c24 <HAL_TIM_PWM_Start_IT+0x194>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a13      	ldr	r2, [pc, #76]	@ (8002c6c <HAL_TIM_PWM_Start_IT+0x1dc>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d111      	bne.n	8002c48 <HAL_TIM_PWM_Start_IT+0x1b8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f003 0307 	and.w	r3, r3, #7
 8002c2e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	2b06      	cmp	r3, #6
 8002c34:	d010      	beq.n	8002c58 <HAL_TIM_PWM_Start_IT+0x1c8>
      {
        __HAL_TIM_ENABLE(htim);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f042 0201 	orr.w	r2, r2, #1
 8002c44:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c46:	e007      	b.n	8002c58 <HAL_TIM_PWM_Start_IT+0x1c8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f042 0201 	orr.w	r2, r2, #1
 8002c56:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3710      	adds	r7, #16
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	40012c00 	.word	0x40012c00
 8002c68:	40000400 	.word	0x40000400
 8002c6c:	40000800 	.word	0x40000800

08002c70 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	2b0c      	cmp	r3, #12
 8002c82:	d841      	bhi.n	8002d08 <HAL_TIM_PWM_Stop_IT+0x98>
 8002c84:	a201      	add	r2, pc, #4	@ (adr r2, 8002c8c <HAL_TIM_PWM_Stop_IT+0x1c>)
 8002c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c8a:	bf00      	nop
 8002c8c:	08002cc1 	.word	0x08002cc1
 8002c90:	08002d09 	.word	0x08002d09
 8002c94:	08002d09 	.word	0x08002d09
 8002c98:	08002d09 	.word	0x08002d09
 8002c9c:	08002cd3 	.word	0x08002cd3
 8002ca0:	08002d09 	.word	0x08002d09
 8002ca4:	08002d09 	.word	0x08002d09
 8002ca8:	08002d09 	.word	0x08002d09
 8002cac:	08002ce5 	.word	0x08002ce5
 8002cb0:	08002d09 	.word	0x08002d09
 8002cb4:	08002d09 	.word	0x08002d09
 8002cb8:	08002d09 	.word	0x08002d09
 8002cbc:	08002cf7 	.word	0x08002cf7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68da      	ldr	r2, [r3, #12]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f022 0202 	bic.w	r2, r2, #2
 8002cce:	60da      	str	r2, [r3, #12]
      break;
 8002cd0:	e01d      	b.n	8002d0e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68da      	ldr	r2, [r3, #12]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 0204 	bic.w	r2, r2, #4
 8002ce0:	60da      	str	r2, [r3, #12]
      break;
 8002ce2:	e014      	b.n	8002d0e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68da      	ldr	r2, [r3, #12]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0208 	bic.w	r2, r2, #8
 8002cf2:	60da      	str	r2, [r3, #12]
      break;
 8002cf4:	e00b      	b.n	8002d0e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68da      	ldr	r2, [r3, #12]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 0210 	bic.w	r2, r2, #16
 8002d04:	60da      	str	r2, [r3, #12]
      break;
 8002d06:	e002      	b.n	8002d0e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d0c:	bf00      	nop
  }

  if (status == HAL_OK)
 8002d0e:	7bfb      	ldrb	r3, [r7, #15]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d157      	bne.n	8002dc4 <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	6839      	ldr	r1, [r7, #0]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f000 fd79 	bl	8003814 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a2a      	ldr	r2, [pc, #168]	@ (8002dd0 <HAL_TIM_PWM_Stop_IT+0x160>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d117      	bne.n	8002d5c <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	6a1a      	ldr	r2, [r3, #32]
 8002d32:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002d36:	4013      	ands	r3, r2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d10f      	bne.n	8002d5c <HAL_TIM_PWM_Stop_IT+0xec>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6a1a      	ldr	r2, [r3, #32]
 8002d42:	f240 4344 	movw	r3, #1092	@ 0x444
 8002d46:	4013      	ands	r3, r2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d107      	bne.n	8002d5c <HAL_TIM_PWM_Stop_IT+0xec>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002d5a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6a1a      	ldr	r2, [r3, #32]
 8002d62:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002d66:	4013      	ands	r3, r2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d10f      	bne.n	8002d8c <HAL_TIM_PWM_Stop_IT+0x11c>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6a1a      	ldr	r2, [r3, #32]
 8002d72:	f240 4344 	movw	r3, #1092	@ 0x444
 8002d76:	4013      	ands	r3, r2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d107      	bne.n	8002d8c <HAL_TIM_PWM_Stop_IT+0x11c>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f022 0201 	bic.w	r2, r2, #1
 8002d8a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d104      	bne.n	8002d9c <HAL_TIM_PWM_Stop_IT+0x12c>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2201      	movs	r2, #1
 8002d96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d9a:	e013      	b.n	8002dc4 <HAL_TIM_PWM_Stop_IT+0x154>
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	2b04      	cmp	r3, #4
 8002da0:	d104      	bne.n	8002dac <HAL_TIM_PWM_Stop_IT+0x13c>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2201      	movs	r2, #1
 8002da6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002daa:	e00b      	b.n	8002dc4 <HAL_TIM_PWM_Stop_IT+0x154>
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	2b08      	cmp	r3, #8
 8002db0:	d104      	bne.n	8002dbc <HAL_TIM_PWM_Stop_IT+0x14c>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2201      	movs	r2, #1
 8002db6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002dba:	e003      	b.n	8002dc4 <HAL_TIM_PWM_Stop_IT+0x154>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8002dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	40012c00 	.word	0x40012c00

08002dd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d020      	beq.n	8002e38 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d01b      	beq.n	8002e38 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f06f 0202 	mvn.w	r2, #2
 8002e08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	f003 0303 	and.w	r3, r3, #3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 fa5a 	bl	80032d8 <HAL_TIM_IC_CaptureCallback>
 8002e24:	e005      	b.n	8002e32 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 fa4d 	bl	80032c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f7fd fc67 	bl	8000700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	f003 0304 	and.w	r3, r3, #4
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d020      	beq.n	8002e84 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f003 0304 	and.w	r3, r3, #4
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d01b      	beq.n	8002e84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f06f 0204 	mvn.w	r2, #4
 8002e54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2202      	movs	r2, #2
 8002e5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d003      	beq.n	8002e72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 fa34 	bl	80032d8 <HAL_TIM_IC_CaptureCallback>
 8002e70:	e005      	b.n	8002e7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 fa27 	bl	80032c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f7fd fc41 	bl	8000700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	f003 0308 	and.w	r3, r3, #8
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d020      	beq.n	8002ed0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f003 0308 	and.w	r3, r3, #8
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d01b      	beq.n	8002ed0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f06f 0208 	mvn.w	r2, #8
 8002ea0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2204      	movs	r2, #4
 8002ea6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	69db      	ldr	r3, [r3, #28]
 8002eae:	f003 0303 	and.w	r3, r3, #3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d003      	beq.n	8002ebe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 fa0e 	bl	80032d8 <HAL_TIM_IC_CaptureCallback>
 8002ebc:	e005      	b.n	8002eca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 fa01 	bl	80032c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f7fd fc1b 	bl	8000700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	f003 0310 	and.w	r3, r3, #16
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d020      	beq.n	8002f1c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f003 0310 	and.w	r3, r3, #16
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d01b      	beq.n	8002f1c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f06f 0210 	mvn.w	r2, #16
 8002eec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2208      	movs	r2, #8
 8002ef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 f9e8 	bl	80032d8 <HAL_TIM_IC_CaptureCallback>
 8002f08:	e005      	b.n	8002f16 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 f9db 	bl	80032c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f7fd fbf5 	bl	8000700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00c      	beq.n	8002f40 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f003 0301 	and.w	r3, r3, #1
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d007      	beq.n	8002f40 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f06f 0201 	mvn.w	r2, #1
 8002f38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f7fd fc38 	bl	80007b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00c      	beq.n	8002f64 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d007      	beq.n	8002f64 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002f5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 fd34 	bl	80039cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00c      	beq.n	8002f88 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d007      	beq.n	8002f88 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 f9b1 	bl	80032ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	f003 0320 	and.w	r3, r3, #32
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00c      	beq.n	8002fac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f003 0320 	and.w	r3, r3, #32
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d007      	beq.n	8002fac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f06f 0220 	mvn.w	r2, #32
 8002fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 fd07 	bl	80039ba <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fac:	bf00      	nop
 8002fae:	3710      	adds	r7, #16
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d101      	bne.n	8002fd2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002fce:	2302      	movs	r3, #2
 8002fd0:	e0ae      	b.n	8003130 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2b0c      	cmp	r3, #12
 8002fde:	f200 809f 	bhi.w	8003120 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002fe2:	a201      	add	r2, pc, #4	@ (adr r2, 8002fe8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe8:	0800301d 	.word	0x0800301d
 8002fec:	08003121 	.word	0x08003121
 8002ff0:	08003121 	.word	0x08003121
 8002ff4:	08003121 	.word	0x08003121
 8002ff8:	0800305d 	.word	0x0800305d
 8002ffc:	08003121 	.word	0x08003121
 8003000:	08003121 	.word	0x08003121
 8003004:	08003121 	.word	0x08003121
 8003008:	0800309f 	.word	0x0800309f
 800300c:	08003121 	.word	0x08003121
 8003010:	08003121 	.word	0x08003121
 8003014:	08003121 	.word	0x08003121
 8003018:	080030df 	.word	0x080030df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68b9      	ldr	r1, [r7, #8]
 8003022:	4618      	mov	r0, r3
 8003024:	f000 f9d8 	bl	80033d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	699a      	ldr	r2, [r3, #24]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f042 0208 	orr.w	r2, r2, #8
 8003036:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	699a      	ldr	r2, [r3, #24]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f022 0204 	bic.w	r2, r2, #4
 8003046:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6999      	ldr	r1, [r3, #24]
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	691a      	ldr	r2, [r3, #16]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	430a      	orrs	r2, r1
 8003058:	619a      	str	r2, [r3, #24]
      break;
 800305a:	e064      	b.n	8003126 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68b9      	ldr	r1, [r7, #8]
 8003062:	4618      	mov	r0, r3
 8003064:	f000 fa1e 	bl	80034a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	699a      	ldr	r2, [r3, #24]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003076:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	699a      	ldr	r2, [r3, #24]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003086:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6999      	ldr	r1, [r3, #24]
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	021a      	lsls	r2, r3, #8
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	430a      	orrs	r2, r1
 800309a:	619a      	str	r2, [r3, #24]
      break;
 800309c:	e043      	b.n	8003126 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68b9      	ldr	r1, [r7, #8]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f000 fa67 	bl	8003578 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	69da      	ldr	r2, [r3, #28]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f042 0208 	orr.w	r2, r2, #8
 80030b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	69da      	ldr	r2, [r3, #28]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f022 0204 	bic.w	r2, r2, #4
 80030c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	69d9      	ldr	r1, [r3, #28]
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	691a      	ldr	r2, [r3, #16]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	430a      	orrs	r2, r1
 80030da:	61da      	str	r2, [r3, #28]
      break;
 80030dc:	e023      	b.n	8003126 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68b9      	ldr	r1, [r7, #8]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f000 fab1 	bl	800364c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	69da      	ldr	r2, [r3, #28]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	69da      	ldr	r2, [r3, #28]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003108:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	69d9      	ldr	r1, [r3, #28]
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	021a      	lsls	r2, r3, #8
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	430a      	orrs	r2, r1
 800311c:	61da      	str	r2, [r3, #28]
      break;
 800311e:	e002      	b.n	8003126 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	75fb      	strb	r3, [r7, #23]
      break;
 8003124:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800312e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003130:	4618      	mov	r0, r3
 8003132:	3718      	adds	r7, #24
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003142:	2300      	movs	r3, #0
 8003144:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800314c:	2b01      	cmp	r3, #1
 800314e:	d101      	bne.n	8003154 <HAL_TIM_ConfigClockSource+0x1c>
 8003150:	2302      	movs	r3, #2
 8003152:	e0b4      	b.n	80032be <HAL_TIM_ConfigClockSource+0x186>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2202      	movs	r2, #2
 8003160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003172:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800317a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68ba      	ldr	r2, [r7, #8]
 8003182:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800318c:	d03e      	beq.n	800320c <HAL_TIM_ConfigClockSource+0xd4>
 800318e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003192:	f200 8087 	bhi.w	80032a4 <HAL_TIM_ConfigClockSource+0x16c>
 8003196:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800319a:	f000 8086 	beq.w	80032aa <HAL_TIM_ConfigClockSource+0x172>
 800319e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031a2:	d87f      	bhi.n	80032a4 <HAL_TIM_ConfigClockSource+0x16c>
 80031a4:	2b70      	cmp	r3, #112	@ 0x70
 80031a6:	d01a      	beq.n	80031de <HAL_TIM_ConfigClockSource+0xa6>
 80031a8:	2b70      	cmp	r3, #112	@ 0x70
 80031aa:	d87b      	bhi.n	80032a4 <HAL_TIM_ConfigClockSource+0x16c>
 80031ac:	2b60      	cmp	r3, #96	@ 0x60
 80031ae:	d050      	beq.n	8003252 <HAL_TIM_ConfigClockSource+0x11a>
 80031b0:	2b60      	cmp	r3, #96	@ 0x60
 80031b2:	d877      	bhi.n	80032a4 <HAL_TIM_ConfigClockSource+0x16c>
 80031b4:	2b50      	cmp	r3, #80	@ 0x50
 80031b6:	d03c      	beq.n	8003232 <HAL_TIM_ConfigClockSource+0xfa>
 80031b8:	2b50      	cmp	r3, #80	@ 0x50
 80031ba:	d873      	bhi.n	80032a4 <HAL_TIM_ConfigClockSource+0x16c>
 80031bc:	2b40      	cmp	r3, #64	@ 0x40
 80031be:	d058      	beq.n	8003272 <HAL_TIM_ConfigClockSource+0x13a>
 80031c0:	2b40      	cmp	r3, #64	@ 0x40
 80031c2:	d86f      	bhi.n	80032a4 <HAL_TIM_ConfigClockSource+0x16c>
 80031c4:	2b30      	cmp	r3, #48	@ 0x30
 80031c6:	d064      	beq.n	8003292 <HAL_TIM_ConfigClockSource+0x15a>
 80031c8:	2b30      	cmp	r3, #48	@ 0x30
 80031ca:	d86b      	bhi.n	80032a4 <HAL_TIM_ConfigClockSource+0x16c>
 80031cc:	2b20      	cmp	r3, #32
 80031ce:	d060      	beq.n	8003292 <HAL_TIM_ConfigClockSource+0x15a>
 80031d0:	2b20      	cmp	r3, #32
 80031d2:	d867      	bhi.n	80032a4 <HAL_TIM_ConfigClockSource+0x16c>
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d05c      	beq.n	8003292 <HAL_TIM_ConfigClockSource+0x15a>
 80031d8:	2b10      	cmp	r3, #16
 80031da:	d05a      	beq.n	8003292 <HAL_TIM_ConfigClockSource+0x15a>
 80031dc:	e062      	b.n	80032a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80031ee:	f000 faf2 	bl	80037d6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003200:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68ba      	ldr	r2, [r7, #8]
 8003208:	609a      	str	r2, [r3, #8]
      break;
 800320a:	e04f      	b.n	80032ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800321c:	f000 fadb 	bl	80037d6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	689a      	ldr	r2, [r3, #8]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800322e:	609a      	str	r2, [r3, #8]
      break;
 8003230:	e03c      	b.n	80032ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800323e:	461a      	mov	r2, r3
 8003240:	f000 fa52 	bl	80036e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2150      	movs	r1, #80	@ 0x50
 800324a:	4618      	mov	r0, r3
 800324c:	f000 faa9 	bl	80037a2 <TIM_ITRx_SetConfig>
      break;
 8003250:	e02c      	b.n	80032ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800325e:	461a      	mov	r2, r3
 8003260:	f000 fa70 	bl	8003744 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2160      	movs	r1, #96	@ 0x60
 800326a:	4618      	mov	r0, r3
 800326c:	f000 fa99 	bl	80037a2 <TIM_ITRx_SetConfig>
      break;
 8003270:	e01c      	b.n	80032ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800327e:	461a      	mov	r2, r3
 8003280:	f000 fa32 	bl	80036e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2140      	movs	r1, #64	@ 0x40
 800328a:	4618      	mov	r0, r3
 800328c:	f000 fa89 	bl	80037a2 <TIM_ITRx_SetConfig>
      break;
 8003290:	e00c      	b.n	80032ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4619      	mov	r1, r3
 800329c:	4610      	mov	r0, r2
 800329e:	f000 fa80 	bl	80037a2 <TIM_ITRx_SetConfig>
      break;
 80032a2:	e003      	b.n	80032ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	73fb      	strb	r3, [r7, #15]
      break;
 80032a8:	e000      	b.n	80032ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 80032aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80032bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3710      	adds	r7, #16
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032c6:	b480      	push	{r7}
 80032c8:	b083      	sub	sp, #12
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032ce:	bf00      	nop
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bc80      	pop	{r7}
 80032d6:	4770      	bx	lr

080032d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bc80      	pop	{r7}
 80032e8:	4770      	bx	lr

080032ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032ea:	b480      	push	{r7}
 80032ec:	b083      	sub	sp, #12
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032f2:	bf00      	nop
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bc80      	pop	{r7}
 80032fa:	4770      	bx	lr

080032fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a2f      	ldr	r2, [pc, #188]	@ (80033cc <TIM_Base_SetConfig+0xd0>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d00b      	beq.n	800332c <TIM_Base_SetConfig+0x30>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800331a:	d007      	beq.n	800332c <TIM_Base_SetConfig+0x30>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4a2c      	ldr	r2, [pc, #176]	@ (80033d0 <TIM_Base_SetConfig+0xd4>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d003      	beq.n	800332c <TIM_Base_SetConfig+0x30>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a2b      	ldr	r2, [pc, #172]	@ (80033d4 <TIM_Base_SetConfig+0xd8>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d108      	bne.n	800333e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003332:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	4313      	orrs	r3, r2
 800333c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a22      	ldr	r2, [pc, #136]	@ (80033cc <TIM_Base_SetConfig+0xd0>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d00b      	beq.n	800335e <TIM_Base_SetConfig+0x62>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800334c:	d007      	beq.n	800335e <TIM_Base_SetConfig+0x62>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a1f      	ldr	r2, [pc, #124]	@ (80033d0 <TIM_Base_SetConfig+0xd4>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d003      	beq.n	800335e <TIM_Base_SetConfig+0x62>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a1e      	ldr	r2, [pc, #120]	@ (80033d4 <TIM_Base_SetConfig+0xd8>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d108      	bne.n	8003370 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003364:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	4313      	orrs	r3, r2
 800336e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	4313      	orrs	r3, r2
 800337c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	689a      	ldr	r2, [r3, #8]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a0d      	ldr	r2, [pc, #52]	@ (80033cc <TIM_Base_SetConfig+0xd0>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d103      	bne.n	80033a4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	691a      	ldr	r2, [r3, #16]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d005      	beq.n	80033c2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	f023 0201 	bic.w	r2, r3, #1
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	611a      	str	r2, [r3, #16]
  }
}
 80033c2:	bf00      	nop
 80033c4:	3714      	adds	r7, #20
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bc80      	pop	{r7}
 80033ca:	4770      	bx	lr
 80033cc:	40012c00 	.word	0x40012c00
 80033d0:	40000400 	.word	0x40000400
 80033d4:	40000800 	.word	0x40000800

080033d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033d8:	b480      	push	{r7}
 80033da:	b087      	sub	sp, #28
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a1b      	ldr	r3, [r3, #32]
 80033e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a1b      	ldr	r3, [r3, #32]
 80033ec:	f023 0201 	bic.w	r2, r3, #1
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003406:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f023 0303 	bic.w	r3, r3, #3
 800340e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	4313      	orrs	r3, r2
 8003418:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	f023 0302 	bic.w	r3, r3, #2
 8003420:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	4313      	orrs	r3, r2
 800342a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a1c      	ldr	r2, [pc, #112]	@ (80034a0 <TIM_OC1_SetConfig+0xc8>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d10c      	bne.n	800344e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f023 0308 	bic.w	r3, r3, #8
 800343a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	4313      	orrs	r3, r2
 8003444:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	f023 0304 	bic.w	r3, r3, #4
 800344c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a13      	ldr	r2, [pc, #76]	@ (80034a0 <TIM_OC1_SetConfig+0xc8>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d111      	bne.n	800347a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800345c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003464:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	4313      	orrs	r3, r2
 800346e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	4313      	orrs	r3, r2
 8003478:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685a      	ldr	r2, [r3, #4]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	697a      	ldr	r2, [r7, #20]
 8003492:	621a      	str	r2, [r3, #32]
}
 8003494:	bf00      	nop
 8003496:	371c      	adds	r7, #28
 8003498:	46bd      	mov	sp, r7
 800349a:	bc80      	pop	{r7}
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	40012c00 	.word	0x40012c00

080034a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b087      	sub	sp, #28
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	f023 0210 	bic.w	r2, r3, #16
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	021b      	lsls	r3, r3, #8
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	f023 0320 	bic.w	r3, r3, #32
 80034ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	011b      	lsls	r3, r3, #4
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a1d      	ldr	r2, [pc, #116]	@ (8003574 <TIM_OC2_SetConfig+0xd0>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d10d      	bne.n	8003520 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800350a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	011b      	lsls	r3, r3, #4
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	4313      	orrs	r3, r2
 8003516:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800351e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a14      	ldr	r2, [pc, #80]	@ (8003574 <TIM_OC2_SetConfig+0xd0>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d113      	bne.n	8003550 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800352e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003536:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	4313      	orrs	r3, r2
 8003542:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	4313      	orrs	r3, r2
 800354e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685a      	ldr	r2, [r3, #4]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	621a      	str	r2, [r3, #32]
}
 800356a:	bf00      	nop
 800356c:	371c      	adds	r7, #28
 800356e:	46bd      	mov	sp, r7
 8003570:	bc80      	pop	{r7}
 8003572:	4770      	bx	lr
 8003574:	40012c00 	.word	0x40012c00

08003578 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003578:	b480      	push	{r7}
 800357a:	b087      	sub	sp, #28
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a1b      	ldr	r3, [r3, #32]
 800358c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	69db      	ldr	r3, [r3, #28]
 800359e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f023 0303 	bic.w	r3, r3, #3
 80035ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80035c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	021b      	lsls	r3, r3, #8
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a1d      	ldr	r2, [pc, #116]	@ (8003648 <TIM_OC3_SetConfig+0xd0>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d10d      	bne.n	80035f2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80035dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	021b      	lsls	r3, r3, #8
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80035f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a14      	ldr	r2, [pc, #80]	@ (8003648 <TIM_OC3_SetConfig+0xd0>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d113      	bne.n	8003622 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003600:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003608:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	011b      	lsls	r3, r3, #4
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	4313      	orrs	r3, r2
 8003614:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	011b      	lsls	r3, r3, #4
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	4313      	orrs	r3, r2
 8003620:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	685a      	ldr	r2, [r3, #4]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	697a      	ldr	r2, [r7, #20]
 800363a:	621a      	str	r2, [r3, #32]
}
 800363c:	bf00      	nop
 800363e:	371c      	adds	r7, #28
 8003640:	46bd      	mov	sp, r7
 8003642:	bc80      	pop	{r7}
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	40012c00 	.word	0x40012c00

0800364c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800364c:	b480      	push	{r7}
 800364e:	b087      	sub	sp, #28
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a1b      	ldr	r3, [r3, #32]
 8003660:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	69db      	ldr	r3, [r3, #28]
 8003672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800367a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003682:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	021b      	lsls	r3, r3, #8
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	4313      	orrs	r3, r2
 800368e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003696:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	031b      	lsls	r3, r3, #12
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a0f      	ldr	r2, [pc, #60]	@ (80036e4 <TIM_OC4_SetConfig+0x98>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d109      	bne.n	80036c0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80036b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	695b      	ldr	r3, [r3, #20]
 80036b8:	019b      	lsls	r3, r3, #6
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	4313      	orrs	r3, r2
 80036be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	685a      	ldr	r2, [r3, #4]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	621a      	str	r2, [r3, #32]
}
 80036da:	bf00      	nop
 80036dc:	371c      	adds	r7, #28
 80036de:	46bd      	mov	sp, r7
 80036e0:	bc80      	pop	{r7}
 80036e2:	4770      	bx	lr
 80036e4:	40012c00 	.word	0x40012c00

080036e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b087      	sub	sp, #28
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6a1b      	ldr	r3, [r3, #32]
 80036f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6a1b      	ldr	r3, [r3, #32]
 80036fe:	f023 0201 	bic.w	r2, r3, #1
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003712:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	011b      	lsls	r3, r3, #4
 8003718:	693a      	ldr	r2, [r7, #16]
 800371a:	4313      	orrs	r3, r2
 800371c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	f023 030a 	bic.w	r3, r3, #10
 8003724:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003726:	697a      	ldr	r2, [r7, #20]
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	4313      	orrs	r3, r2
 800372c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	621a      	str	r2, [r3, #32]
}
 800373a:	bf00      	nop
 800373c:	371c      	adds	r7, #28
 800373e:	46bd      	mov	sp, r7
 8003740:	bc80      	pop	{r7}
 8003742:	4770      	bx	lr

08003744 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003744:	b480      	push	{r7}
 8003746:	b087      	sub	sp, #28
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6a1b      	ldr	r3, [r3, #32]
 8003754:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	f023 0210 	bic.w	r2, r3, #16
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800376e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	031b      	lsls	r3, r3, #12
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	4313      	orrs	r3, r2
 8003778:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003780:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	011b      	lsls	r3, r3, #4
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	4313      	orrs	r3, r2
 800378a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	697a      	ldr	r2, [r7, #20]
 8003796:	621a      	str	r2, [r3, #32]
}
 8003798:	bf00      	nop
 800379a:	371c      	adds	r7, #28
 800379c:	46bd      	mov	sp, r7
 800379e:	bc80      	pop	{r7}
 80037a0:	4770      	bx	lr

080037a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037a2:	b480      	push	{r7}
 80037a4:	b085      	sub	sp, #20
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
 80037aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	4313      	orrs	r3, r2
 80037c0:	f043 0307 	orr.w	r3, r3, #7
 80037c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	609a      	str	r2, [r3, #8]
}
 80037cc:	bf00      	nop
 80037ce:	3714      	adds	r7, #20
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bc80      	pop	{r7}
 80037d4:	4770      	bx	lr

080037d6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037d6:	b480      	push	{r7}
 80037d8:	b087      	sub	sp, #28
 80037da:	af00      	add	r7, sp, #0
 80037dc:	60f8      	str	r0, [r7, #12]
 80037de:	60b9      	str	r1, [r7, #8]
 80037e0:	607a      	str	r2, [r7, #4]
 80037e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80037f0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	021a      	lsls	r2, r3, #8
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	431a      	orrs	r2, r3
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	4313      	orrs	r3, r2
 8003802:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	609a      	str	r2, [r3, #8]
}
 800380a:	bf00      	nop
 800380c:	371c      	adds	r7, #28
 800380e:	46bd      	mov	sp, r7
 8003810:	bc80      	pop	{r7}
 8003812:	4770      	bx	lr

08003814 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003814:	b480      	push	{r7}
 8003816:	b087      	sub	sp, #28
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	f003 031f 	and.w	r3, r3, #31
 8003826:	2201      	movs	r2, #1
 8003828:	fa02 f303 	lsl.w	r3, r2, r3
 800382c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6a1a      	ldr	r2, [r3, #32]
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	43db      	mvns	r3, r3
 8003836:	401a      	ands	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6a1a      	ldr	r2, [r3, #32]
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	f003 031f 	and.w	r3, r3, #31
 8003846:	6879      	ldr	r1, [r7, #4]
 8003848:	fa01 f303 	lsl.w	r3, r1, r3
 800384c:	431a      	orrs	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	621a      	str	r2, [r3, #32]
}
 8003852:	bf00      	nop
 8003854:	371c      	adds	r7, #28
 8003856:	46bd      	mov	sp, r7
 8003858:	bc80      	pop	{r7}
 800385a:	4770      	bx	lr

0800385c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800385c:	b480      	push	{r7}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800386c:	2b01      	cmp	r3, #1
 800386e:	d101      	bne.n	8003874 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003870:	2302      	movs	r3, #2
 8003872:	e046      	b.n	8003902 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2202      	movs	r2, #2
 8003880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800389a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a16      	ldr	r2, [pc, #88]	@ (800390c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d00e      	beq.n	80038d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038c0:	d009      	beq.n	80038d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a12      	ldr	r2, [pc, #72]	@ (8003910 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d004      	beq.n	80038d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a10      	ldr	r2, [pc, #64]	@ (8003914 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d10c      	bne.n	80038f0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	68ba      	ldr	r2, [r7, #8]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68ba      	ldr	r2, [r7, #8]
 80038ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3714      	adds	r7, #20
 8003906:	46bd      	mov	sp, r7
 8003908:	bc80      	pop	{r7}
 800390a:	4770      	bx	lr
 800390c:	40012c00 	.word	0x40012c00
 8003910:	40000400 	.word	0x40000400
 8003914:	40000800 	.word	0x40000800

08003918 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003922:	2300      	movs	r3, #0
 8003924:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800392c:	2b01      	cmp	r3, #1
 800392e:	d101      	bne.n	8003934 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003930:	2302      	movs	r3, #2
 8003932:	e03d      	b.n	80039b0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	4313      	orrs	r3, r2
 8003948:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	4313      	orrs	r3, r2
 8003956:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	4313      	orrs	r3, r2
 8003964:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4313      	orrs	r3, r2
 8003972:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	4313      	orrs	r3, r2
 8003980:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	695b      	ldr	r3, [r3, #20]
 800398c:	4313      	orrs	r3, r2
 800398e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	69db      	ldr	r3, [r3, #28]
 800399a:	4313      	orrs	r3, r2
 800399c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3714      	adds	r7, #20
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bc80      	pop	{r7}
 80039b8:	4770      	bx	lr

080039ba <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039ba:	b480      	push	{r7}
 80039bc:	b083      	sub	sp, #12
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039c2:	bf00      	nop
 80039c4:	370c      	adds	r7, #12
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bc80      	pop	{r7}
 80039ca:	4770      	bx	lr

080039cc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	bc80      	pop	{r7}
 80039dc:	4770      	bx	lr

080039de <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b082      	sub	sp, #8
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d101      	bne.n	80039f0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e042      	b.n	8003a76 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d106      	bne.n	8003a0a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f7fd f8c5 	bl	8000b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2224      	movs	r2, #36	@ 0x24
 8003a0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68da      	ldr	r2, [r3, #12]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a20:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 fdb8 	bl	8004598 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	691a      	ldr	r2, [r3, #16]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a36:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	695a      	ldr	r2, [r3, #20]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a46:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68da      	ldr	r2, [r3, #12]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a56:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2220      	movs	r2, #32
 8003a62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2220      	movs	r2, #32
 8003a6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3708      	adds	r7, #8
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b08a      	sub	sp, #40	@ 0x28
 8003a82:	af02      	add	r7, sp, #8
 8003a84:	60f8      	str	r0, [r7, #12]
 8003a86:	60b9      	str	r1, [r7, #8]
 8003a88:	603b      	str	r3, [r7, #0]
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b20      	cmp	r3, #32
 8003a9c:	d175      	bne.n	8003b8a <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d002      	beq.n	8003aaa <HAL_UART_Transmit+0x2c>
 8003aa4:	88fb      	ldrh	r3, [r7, #6]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e06e      	b.n	8003b8c <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2221      	movs	r2, #33	@ 0x21
 8003ab8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003abc:	f7fd f9de 	bl	8000e7c <HAL_GetTick>
 8003ac0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	88fa      	ldrh	r2, [r7, #6]
 8003ac6:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	88fa      	ldrh	r2, [r7, #6]
 8003acc:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ad6:	d108      	bne.n	8003aea <HAL_UART_Transmit+0x6c>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d104      	bne.n	8003aea <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	61bb      	str	r3, [r7, #24]
 8003ae8:	e003      	b.n	8003af2 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003aee:	2300      	movs	r3, #0
 8003af0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003af2:	e02e      	b.n	8003b52 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	9300      	str	r3, [sp, #0]
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	2200      	movs	r2, #0
 8003afc:	2180      	movs	r1, #128	@ 0x80
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f000 fb1d 	bl	800413e <UART_WaitOnFlagUntilTimeout>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d005      	beq.n	8003b16 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2220      	movs	r2, #32
 8003b0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e03a      	b.n	8003b8c <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d10b      	bne.n	8003b34 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	881b      	ldrh	r3, [r3, #0]
 8003b20:	461a      	mov	r2, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b2a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	3302      	adds	r3, #2
 8003b30:	61bb      	str	r3, [r7, #24]
 8003b32:	e007      	b.n	8003b44 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	781a      	ldrb	r2, [r3, #0]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	3301      	adds	r3, #1
 8003b42:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d1cb      	bne.n	8003af4 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	9300      	str	r3, [sp, #0]
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	2200      	movs	r2, #0
 8003b64:	2140      	movs	r1, #64	@ 0x40
 8003b66:	68f8      	ldr	r0, [r7, #12]
 8003b68:	f000 fae9 	bl	800413e <UART_WaitOnFlagUntilTimeout>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d005      	beq.n	8003b7e <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2220      	movs	r2, #32
 8003b76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e006      	b.n	8003b8c <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2220      	movs	r2, #32
 8003b82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003b86:	2300      	movs	r3, #0
 8003b88:	e000      	b.n	8003b8c <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003b8a:	2302      	movs	r3, #2
  }
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3720      	adds	r7, #32
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b20      	cmp	r3, #32
 8003bac:	d112      	bne.n	8003bd4 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d002      	beq.n	8003bba <HAL_UART_Receive_IT+0x26>
 8003bb4:	88fb      	ldrh	r3, [r7, #6]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d101      	bne.n	8003bbe <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e00b      	b.n	8003bd6 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003bc4:	88fb      	ldrh	r3, [r7, #6]
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	68b9      	ldr	r1, [r7, #8]
 8003bca:	68f8      	ldr	r0, [r7, #12]
 8003bcc:	f000 fb10 	bl	80041f0 <UART_Start_Receive_IT>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	e000      	b.n	8003bd6 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003bd4:	2302      	movs	r3, #2
  }
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
	...

08003be0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b0ba      	sub	sp, #232	@ 0xe8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003c06:	2300      	movs	r3, #0
 8003c08:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c16:	f003 030f 	and.w	r3, r3, #15
 8003c1a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003c1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d10f      	bne.n	8003c46 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c2a:	f003 0320 	and.w	r3, r3, #32
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d009      	beq.n	8003c46 <HAL_UART_IRQHandler+0x66>
 8003c32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c36:	f003 0320 	and.w	r3, r3, #32
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d003      	beq.n	8003c46 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 fbec 	bl	800441c <UART_Receive_IT>
      return;
 8003c44:	e25b      	b.n	80040fe <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003c46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f000 80de 	beq.w	8003e0c <HAL_UART_IRQHandler+0x22c>
 8003c50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c54:	f003 0301 	and.w	r3, r3, #1
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d106      	bne.n	8003c6a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c60:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f000 80d1 	beq.w	8003e0c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00b      	beq.n	8003c8e <HAL_UART_IRQHandler+0xae>
 8003c76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d005      	beq.n	8003c8e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c86:	f043 0201 	orr.w	r2, r3, #1
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c92:	f003 0304 	and.w	r3, r3, #4
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00b      	beq.n	8003cb2 <HAL_UART_IRQHandler+0xd2>
 8003c9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d005      	beq.n	8003cb2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003caa:	f043 0202 	orr.w	r2, r3, #2
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00b      	beq.n	8003cd6 <HAL_UART_IRQHandler+0xf6>
 8003cbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d005      	beq.n	8003cd6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cce:	f043 0204 	orr.w	r2, r3, #4
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cda:	f003 0308 	and.w	r3, r3, #8
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d011      	beq.n	8003d06 <HAL_UART_IRQHandler+0x126>
 8003ce2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ce6:	f003 0320 	and.w	r3, r3, #32
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d105      	bne.n	8003cfa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003cee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d005      	beq.n	8003d06 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cfe:	f043 0208 	orr.w	r2, r3, #8
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f000 81f2 	beq.w	80040f4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d14:	f003 0320 	and.w	r3, r3, #32
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d008      	beq.n	8003d2e <HAL_UART_IRQHandler+0x14e>
 8003d1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d20:	f003 0320 	and.w	r3, r3, #32
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d002      	beq.n	8003d2e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 fb77 	bl	800441c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	bf14      	ite	ne
 8003d3c:	2301      	movne	r3, #1
 8003d3e:	2300      	moveq	r3, #0
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d4a:	f003 0308 	and.w	r3, r3, #8
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d103      	bne.n	8003d5a <HAL_UART_IRQHandler+0x17a>
 8003d52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d04f      	beq.n	8003dfa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 fa81 	bl	8004262 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d041      	beq.n	8003df2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	3314      	adds	r3, #20
 8003d74:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d78:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003d7c:	e853 3f00 	ldrex	r3, [r3]
 8003d80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003d84:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	3314      	adds	r3, #20
 8003d96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003d9a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003d9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003da6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003daa:	e841 2300 	strex	r3, r2, [r1]
 8003dae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003db2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1d9      	bne.n	8003d6e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d013      	beq.n	8003dea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dc6:	4a7e      	ldr	r2, [pc, #504]	@ (8003fc0 <HAL_UART_IRQHandler+0x3e0>)
 8003dc8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7fd fdca 	bl	8001968 <HAL_DMA_Abort_IT>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d016      	beq.n	8003e08 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003de4:	4610      	mov	r0, r2
 8003de6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003de8:	e00e      	b.n	8003e08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 f993 	bl	8004116 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003df0:	e00a      	b.n	8003e08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 f98f 	bl	8004116 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003df8:	e006      	b.n	8003e08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 f98b 	bl	8004116 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003e06:	e175      	b.n	80040f4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e08:	bf00      	nop
    return;
 8003e0a:	e173      	b.n	80040f4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	f040 814f 	bne.w	80040b4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e1a:	f003 0310 	and.w	r3, r3, #16
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	f000 8148 	beq.w	80040b4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003e24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e28:	f003 0310 	and.w	r3, r3, #16
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f000 8141 	beq.w	80040b4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e32:	2300      	movs	r3, #0
 8003e34:	60bb      	str	r3, [r7, #8]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	60bb      	str	r3, [r7, #8]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	60bb      	str	r3, [r7, #8]
 8003e46:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	f000 80b6 	beq.w	8003fc4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e64:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	f000 8145 	beq.w	80040f8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003e72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e76:	429a      	cmp	r2, r3
 8003e78:	f080 813e 	bcs.w	80040f8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e82:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	2b20      	cmp	r3, #32
 8003e8c:	f000 8088 	beq.w	8003fa0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	330c      	adds	r3, #12
 8003e96:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003e9e:	e853 3f00 	ldrex	r3, [r3]
 8003ea2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003ea6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003eaa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003eae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	330c      	adds	r3, #12
 8003eb8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003ebc:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003ec0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003ec8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003ecc:	e841 2300 	strex	r3, r2, [r1]
 8003ed0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003ed4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1d9      	bne.n	8003e90 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	3314      	adds	r3, #20
 8003ee2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ee6:	e853 3f00 	ldrex	r3, [r3]
 8003eea:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003eec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003eee:	f023 0301 	bic.w	r3, r3, #1
 8003ef2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	3314      	adds	r3, #20
 8003efc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003f00:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003f04:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f06:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003f08:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003f0c:	e841 2300 	strex	r3, r2, [r1]
 8003f10:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003f12:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d1e1      	bne.n	8003edc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	3314      	adds	r3, #20
 8003f1e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f20:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f22:	e853 3f00 	ldrex	r3, [r3]
 8003f26:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003f28:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	3314      	adds	r3, #20
 8003f38:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003f3c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003f3e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f40:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003f42:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003f44:	e841 2300 	strex	r3, r2, [r1]
 8003f48:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003f4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d1e3      	bne.n	8003f18 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2220      	movs	r2, #32
 8003f54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	330c      	adds	r3, #12
 8003f64:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f68:	e853 3f00 	ldrex	r3, [r3]
 8003f6c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003f6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f70:	f023 0310 	bic.w	r3, r3, #16
 8003f74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	330c      	adds	r3, #12
 8003f7e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003f82:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003f84:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f86:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003f88:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003f8a:	e841 2300 	strex	r3, r2, [r1]
 8003f8e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003f90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1e3      	bne.n	8003f5e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7fd fca9 	bl	80018f2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2202      	movs	r2, #2
 8003fa4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 f8b6 	bl	8004128 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003fbc:	e09c      	b.n	80040f8 <HAL_UART_IRQHandler+0x518>
 8003fbe:	bf00      	nop
 8003fc0:	08004327 	.word	0x08004327
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	f000 808e 	beq.w	80040fc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003fe0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f000 8089 	beq.w	80040fc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	330c      	adds	r3, #12
 8003ff0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ff4:	e853 3f00 	ldrex	r3, [r3]
 8003ff8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ffa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ffc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004000:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	330c      	adds	r3, #12
 800400a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800400e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004010:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004012:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004014:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004016:	e841 2300 	strex	r3, r2, [r1]
 800401a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800401c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1e3      	bne.n	8003fea <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	3314      	adds	r3, #20
 8004028:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800402c:	e853 3f00 	ldrex	r3, [r3]
 8004030:	623b      	str	r3, [r7, #32]
   return(result);
 8004032:	6a3b      	ldr	r3, [r7, #32]
 8004034:	f023 0301 	bic.w	r3, r3, #1
 8004038:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	3314      	adds	r3, #20
 8004042:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004046:	633a      	str	r2, [r7, #48]	@ 0x30
 8004048:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800404a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800404c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800404e:	e841 2300 	strex	r3, r2, [r1]
 8004052:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1e3      	bne.n	8004022 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2220      	movs	r2, #32
 800405e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	330c      	adds	r3, #12
 800406e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	e853 3f00 	ldrex	r3, [r3]
 8004076:	60fb      	str	r3, [r7, #12]
   return(result);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f023 0310 	bic.w	r3, r3, #16
 800407e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	330c      	adds	r3, #12
 8004088:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800408c:	61fa      	str	r2, [r7, #28]
 800408e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004090:	69b9      	ldr	r1, [r7, #24]
 8004092:	69fa      	ldr	r2, [r7, #28]
 8004094:	e841 2300 	strex	r3, r2, [r1]
 8004098:	617b      	str	r3, [r7, #20]
   return(result);
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1e3      	bne.n	8004068 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2202      	movs	r2, #2
 80040a4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80040a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80040aa:	4619      	mov	r1, r3
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 f83b 	bl	8004128 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80040b2:	e023      	b.n	80040fc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80040b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d009      	beq.n	80040d4 <HAL_UART_IRQHandler+0x4f4>
 80040c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d003      	beq.n	80040d4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 f93e 	bl	800434e <UART_Transmit_IT>
    return;
 80040d2:	e014      	b.n	80040fe <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80040d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00e      	beq.n	80040fe <HAL_UART_IRQHandler+0x51e>
 80040e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d008      	beq.n	80040fe <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 f97d 	bl	80043ec <UART_EndTransmit_IT>
    return;
 80040f2:	e004      	b.n	80040fe <HAL_UART_IRQHandler+0x51e>
    return;
 80040f4:	bf00      	nop
 80040f6:	e002      	b.n	80040fe <HAL_UART_IRQHandler+0x51e>
      return;
 80040f8:	bf00      	nop
 80040fa:	e000      	b.n	80040fe <HAL_UART_IRQHandler+0x51e>
      return;
 80040fc:	bf00      	nop
  }
}
 80040fe:	37e8      	adds	r7, #232	@ 0xe8
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800410c:	bf00      	nop
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	bc80      	pop	{r7}
 8004114:	4770      	bx	lr

08004116 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004116:	b480      	push	{r7}
 8004118:	b083      	sub	sp, #12
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800411e:	bf00      	nop
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	bc80      	pop	{r7}
 8004126:	4770      	bx	lr

08004128 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	460b      	mov	r3, r1
 8004132:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004134:	bf00      	nop
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	bc80      	pop	{r7}
 800413c:	4770      	bx	lr

0800413e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b086      	sub	sp, #24
 8004142:	af00      	add	r7, sp, #0
 8004144:	60f8      	str	r0, [r7, #12]
 8004146:	60b9      	str	r1, [r7, #8]
 8004148:	603b      	str	r3, [r7, #0]
 800414a:	4613      	mov	r3, r2
 800414c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800414e:	e03b      	b.n	80041c8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004150:	6a3b      	ldr	r3, [r7, #32]
 8004152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004156:	d037      	beq.n	80041c8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004158:	f7fc fe90 	bl	8000e7c <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	6a3a      	ldr	r2, [r7, #32]
 8004164:	429a      	cmp	r2, r3
 8004166:	d302      	bcc.n	800416e <UART_WaitOnFlagUntilTimeout+0x30>
 8004168:	6a3b      	ldr	r3, [r7, #32]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d101      	bne.n	8004172 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e03a      	b.n	80041e8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	f003 0304 	and.w	r3, r3, #4
 800417c:	2b00      	cmp	r3, #0
 800417e:	d023      	beq.n	80041c8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	2b80      	cmp	r3, #128	@ 0x80
 8004184:	d020      	beq.n	80041c8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	2b40      	cmp	r3, #64	@ 0x40
 800418a:	d01d      	beq.n	80041c8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0308 	and.w	r3, r3, #8
 8004196:	2b08      	cmp	r3, #8
 8004198:	d116      	bne.n	80041c8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800419a:	2300      	movs	r3, #0
 800419c:	617b      	str	r3, [r7, #20]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	617b      	str	r3, [r7, #20]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	617b      	str	r3, [r7, #20]
 80041ae:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f000 f856 	bl	8004262 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2208      	movs	r2, #8
 80041ba:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e00f      	b.n	80041e8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	4013      	ands	r3, r2
 80041d2:	68ba      	ldr	r2, [r7, #8]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	bf0c      	ite	eq
 80041d8:	2301      	moveq	r3, #1
 80041da:	2300      	movne	r3, #0
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	461a      	mov	r2, r3
 80041e0:	79fb      	ldrb	r3, [r7, #7]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d0b4      	beq.n	8004150 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3718      	adds	r7, #24
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b085      	sub	sp, #20
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	4613      	mov	r3, r2
 80041fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	68ba      	ldr	r2, [r7, #8]
 8004202:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	88fa      	ldrh	r2, [r7, #6]
 8004208:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	88fa      	ldrh	r2, [r7, #6]
 800420e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2200      	movs	r2, #0
 8004214:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2222      	movs	r2, #34	@ 0x22
 800421a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d007      	beq.n	8004236 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68da      	ldr	r2, [r3, #12]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004234:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	695a      	ldr	r2, [r3, #20]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f042 0201 	orr.w	r2, r2, #1
 8004244:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	68da      	ldr	r2, [r3, #12]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f042 0220 	orr.w	r2, r2, #32
 8004254:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	3714      	adds	r7, #20
 800425c:	46bd      	mov	sp, r7
 800425e:	bc80      	pop	{r7}
 8004260:	4770      	bx	lr

08004262 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004262:	b480      	push	{r7}
 8004264:	b095      	sub	sp, #84	@ 0x54
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	330c      	adds	r3, #12
 8004270:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004272:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004274:	e853 3f00 	ldrex	r3, [r3]
 8004278:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800427a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800427c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004280:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	330c      	adds	r3, #12
 8004288:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800428a:	643a      	str	r2, [r7, #64]	@ 0x40
 800428c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800428e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004290:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004292:	e841 2300 	strex	r3, r2, [r1]
 8004296:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1e5      	bne.n	800426a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	3314      	adds	r3, #20
 80042a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a6:	6a3b      	ldr	r3, [r7, #32]
 80042a8:	e853 3f00 	ldrex	r3, [r3]
 80042ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	f023 0301 	bic.w	r3, r3, #1
 80042b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	3314      	adds	r3, #20
 80042bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042c6:	e841 2300 	strex	r3, r2, [r1]
 80042ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80042cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1e5      	bne.n	800429e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d119      	bne.n	800430e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	330c      	adds	r3, #12
 80042e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	e853 3f00 	ldrex	r3, [r3]
 80042e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	f023 0310 	bic.w	r3, r3, #16
 80042f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	330c      	adds	r3, #12
 80042f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042fa:	61ba      	str	r2, [r7, #24]
 80042fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fe:	6979      	ldr	r1, [r7, #20]
 8004300:	69ba      	ldr	r2, [r7, #24]
 8004302:	e841 2300 	strex	r3, r2, [r1]
 8004306:	613b      	str	r3, [r7, #16]
   return(result);
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1e5      	bne.n	80042da <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2220      	movs	r2, #32
 8004312:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800431c:	bf00      	nop
 800431e:	3754      	adds	r7, #84	@ 0x54
 8004320:	46bd      	mov	sp, r7
 8004322:	bc80      	pop	{r7}
 8004324:	4770      	bx	lr

08004326 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	b084      	sub	sp, #16
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004332:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2200      	movs	r2, #0
 8004338:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2200      	movs	r2, #0
 800433e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f7ff fee8 	bl	8004116 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004346:	bf00      	nop
 8004348:	3710      	adds	r7, #16
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}

0800434e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800434e:	b480      	push	{r7}
 8004350:	b085      	sub	sp, #20
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b21      	cmp	r3, #33	@ 0x21
 8004360:	d13e      	bne.n	80043e0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800436a:	d114      	bne.n	8004396 <UART_Transmit_IT+0x48>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d110      	bne.n	8004396 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a1b      	ldr	r3, [r3, #32]
 8004378:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	881b      	ldrh	r3, [r3, #0]
 800437e:	461a      	mov	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004388:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	1c9a      	adds	r2, r3, #2
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	621a      	str	r2, [r3, #32]
 8004394:	e008      	b.n	80043a8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a1b      	ldr	r3, [r3, #32]
 800439a:	1c59      	adds	r1, r3, #1
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	6211      	str	r1, [r2, #32]
 80043a0:	781a      	ldrb	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	3b01      	subs	r3, #1
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	4619      	mov	r1, r3
 80043b6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d10f      	bne.n	80043dc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68da      	ldr	r2, [r3, #12]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80043ca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68da      	ldr	r2, [r3, #12]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80043da:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80043dc:	2300      	movs	r3, #0
 80043de:	e000      	b.n	80043e2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80043e0:	2302      	movs	r3, #2
  }
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3714      	adds	r7, #20
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bc80      	pop	{r7}
 80043ea:	4770      	bx	lr

080043ec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68da      	ldr	r2, [r3, #12]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004402:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2220      	movs	r2, #32
 8004408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f7ff fe79 	bl	8004104 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3708      	adds	r7, #8
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b08c      	sub	sp, #48	@ 0x30
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800442a:	b2db      	uxtb	r3, r3
 800442c:	2b22      	cmp	r3, #34	@ 0x22
 800442e:	f040 80ae 	bne.w	800458e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800443a:	d117      	bne.n	800446c <UART_Receive_IT+0x50>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d113      	bne.n	800446c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004444:	2300      	movs	r3, #0
 8004446:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800444c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	b29b      	uxth	r3, r3
 8004456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800445a:	b29a      	uxth	r2, r3
 800445c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800445e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004464:	1c9a      	adds	r2, r3, #2
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	629a      	str	r2, [r3, #40]	@ 0x28
 800446a:	e026      	b.n	80044ba <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004470:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004472:	2300      	movs	r3, #0
 8004474:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800447e:	d007      	beq.n	8004490 <UART_Receive_IT+0x74>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d10a      	bne.n	800449e <UART_Receive_IT+0x82>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d106      	bne.n	800449e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	b2da      	uxtb	r2, r3
 8004498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800449a:	701a      	strb	r2, [r3, #0]
 800449c:	e008      	b.n	80044b0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044aa:	b2da      	uxtb	r2, r3
 80044ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044ae:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044b4:	1c5a      	adds	r2, r3, #1
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044be:	b29b      	uxth	r3, r3
 80044c0:	3b01      	subs	r3, #1
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	4619      	mov	r1, r3
 80044c8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d15d      	bne.n	800458a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68da      	ldr	r2, [r3, #12]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 0220 	bic.w	r2, r2, #32
 80044dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68da      	ldr	r2, [r3, #12]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80044ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	695a      	ldr	r2, [r3, #20]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f022 0201 	bic.w	r2, r2, #1
 80044fc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2220      	movs	r2, #32
 8004502:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004510:	2b01      	cmp	r3, #1
 8004512:	d135      	bne.n	8004580 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	330c      	adds	r3, #12
 8004520:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	e853 3f00 	ldrex	r3, [r3]
 8004528:	613b      	str	r3, [r7, #16]
   return(result);
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	f023 0310 	bic.w	r3, r3, #16
 8004530:	627b      	str	r3, [r7, #36]	@ 0x24
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	330c      	adds	r3, #12
 8004538:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800453a:	623a      	str	r2, [r7, #32]
 800453c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453e:	69f9      	ldr	r1, [r7, #28]
 8004540:	6a3a      	ldr	r2, [r7, #32]
 8004542:	e841 2300 	strex	r3, r2, [r1]
 8004546:	61bb      	str	r3, [r7, #24]
   return(result);
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1e5      	bne.n	800451a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0310 	and.w	r3, r3, #16
 8004558:	2b10      	cmp	r3, #16
 800455a:	d10a      	bne.n	8004572 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800455c:	2300      	movs	r3, #0
 800455e:	60fb      	str	r3, [r7, #12]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	60fb      	str	r3, [r7, #12]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	60fb      	str	r3, [r7, #12]
 8004570:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004576:	4619      	mov	r1, r3
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f7ff fdd5 	bl	8004128 <HAL_UARTEx_RxEventCallback>
 800457e:	e002      	b.n	8004586 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f7fc f999 	bl	80008b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004586:	2300      	movs	r3, #0
 8004588:	e002      	b.n	8004590 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800458a:	2300      	movs	r3, #0
 800458c:	e000      	b.n	8004590 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800458e:	2302      	movs	r3, #2
  }
}
 8004590:	4618      	mov	r0, r3
 8004592:	3730      	adds	r7, #48	@ 0x30
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68da      	ldr	r2, [r3, #12]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	430a      	orrs	r2, r1
 80045b4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	689a      	ldr	r2, [r3, #8]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	431a      	orrs	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	695b      	ldr	r3, [r3, #20]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80045d2:	f023 030c 	bic.w	r3, r3, #12
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	6812      	ldr	r2, [r2, #0]
 80045da:	68b9      	ldr	r1, [r7, #8]
 80045dc:	430b      	orrs	r3, r1
 80045de:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	699a      	ldr	r2, [r3, #24]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	430a      	orrs	r2, r1
 80045f4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a2c      	ldr	r2, [pc, #176]	@ (80046ac <UART_SetConfig+0x114>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d103      	bne.n	8004608 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004600:	f7fd ffec 	bl	80025dc <HAL_RCC_GetPCLK2Freq>
 8004604:	60f8      	str	r0, [r7, #12]
 8004606:	e002      	b.n	800460e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004608:	f7fd ffd4 	bl	80025b4 <HAL_RCC_GetPCLK1Freq>
 800460c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	4613      	mov	r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	4413      	add	r3, r2
 8004616:	009a      	lsls	r2, r3, #2
 8004618:	441a      	add	r2, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	fbb2 f3f3 	udiv	r3, r2, r3
 8004624:	4a22      	ldr	r2, [pc, #136]	@ (80046b0 <UART_SetConfig+0x118>)
 8004626:	fba2 2303 	umull	r2, r3, r2, r3
 800462a:	095b      	lsrs	r3, r3, #5
 800462c:	0119      	lsls	r1, r3, #4
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	4613      	mov	r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	4413      	add	r3, r2
 8004636:	009a      	lsls	r2, r3, #2
 8004638:	441a      	add	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	fbb2 f2f3 	udiv	r2, r2, r3
 8004644:	4b1a      	ldr	r3, [pc, #104]	@ (80046b0 <UART_SetConfig+0x118>)
 8004646:	fba3 0302 	umull	r0, r3, r3, r2
 800464a:	095b      	lsrs	r3, r3, #5
 800464c:	2064      	movs	r0, #100	@ 0x64
 800464e:	fb00 f303 	mul.w	r3, r0, r3
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	011b      	lsls	r3, r3, #4
 8004656:	3332      	adds	r3, #50	@ 0x32
 8004658:	4a15      	ldr	r2, [pc, #84]	@ (80046b0 <UART_SetConfig+0x118>)
 800465a:	fba2 2303 	umull	r2, r3, r2, r3
 800465e:	095b      	lsrs	r3, r3, #5
 8004660:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004664:	4419      	add	r1, r3
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	4613      	mov	r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	4413      	add	r3, r2
 800466e:	009a      	lsls	r2, r3, #2
 8004670:	441a      	add	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	fbb2 f2f3 	udiv	r2, r2, r3
 800467c:	4b0c      	ldr	r3, [pc, #48]	@ (80046b0 <UART_SetConfig+0x118>)
 800467e:	fba3 0302 	umull	r0, r3, r3, r2
 8004682:	095b      	lsrs	r3, r3, #5
 8004684:	2064      	movs	r0, #100	@ 0x64
 8004686:	fb00 f303 	mul.w	r3, r0, r3
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	011b      	lsls	r3, r3, #4
 800468e:	3332      	adds	r3, #50	@ 0x32
 8004690:	4a07      	ldr	r2, [pc, #28]	@ (80046b0 <UART_SetConfig+0x118>)
 8004692:	fba2 2303 	umull	r2, r3, r2, r3
 8004696:	095b      	lsrs	r3, r3, #5
 8004698:	f003 020f 	and.w	r2, r3, #15
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	440a      	add	r2, r1
 80046a2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80046a4:	bf00      	nop
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	40013800 	.word	0x40013800
 80046b0:	51eb851f 	.word	0x51eb851f

080046b4 <sniprintf>:
 80046b4:	b40c      	push	{r2, r3}
 80046b6:	b530      	push	{r4, r5, lr}
 80046b8:	4b18      	ldr	r3, [pc, #96]	@ (800471c <sniprintf+0x68>)
 80046ba:	1e0c      	subs	r4, r1, #0
 80046bc:	681d      	ldr	r5, [r3, #0]
 80046be:	b09d      	sub	sp, #116	@ 0x74
 80046c0:	da08      	bge.n	80046d4 <sniprintf+0x20>
 80046c2:	238b      	movs	r3, #139	@ 0x8b
 80046c4:	f04f 30ff 	mov.w	r0, #4294967295
 80046c8:	602b      	str	r3, [r5, #0]
 80046ca:	b01d      	add	sp, #116	@ 0x74
 80046cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80046d0:	b002      	add	sp, #8
 80046d2:	4770      	bx	lr
 80046d4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80046d8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80046dc:	f04f 0300 	mov.w	r3, #0
 80046e0:	931b      	str	r3, [sp, #108]	@ 0x6c
 80046e2:	bf0c      	ite	eq
 80046e4:	4623      	moveq	r3, r4
 80046e6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80046ea:	9304      	str	r3, [sp, #16]
 80046ec:	9307      	str	r3, [sp, #28]
 80046ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80046f2:	9002      	str	r0, [sp, #8]
 80046f4:	9006      	str	r0, [sp, #24]
 80046f6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80046fa:	4628      	mov	r0, r5
 80046fc:	ab21      	add	r3, sp, #132	@ 0x84
 80046fe:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004700:	a902      	add	r1, sp, #8
 8004702:	9301      	str	r3, [sp, #4]
 8004704:	f000 f992 	bl	8004a2c <_svfiprintf_r>
 8004708:	1c43      	adds	r3, r0, #1
 800470a:	bfbc      	itt	lt
 800470c:	238b      	movlt	r3, #139	@ 0x8b
 800470e:	602b      	strlt	r3, [r5, #0]
 8004710:	2c00      	cmp	r4, #0
 8004712:	d0da      	beq.n	80046ca <sniprintf+0x16>
 8004714:	2200      	movs	r2, #0
 8004716:	9b02      	ldr	r3, [sp, #8]
 8004718:	701a      	strb	r2, [r3, #0]
 800471a:	e7d6      	b.n	80046ca <sniprintf+0x16>
 800471c:	20000014 	.word	0x20000014

08004720 <memset>:
 8004720:	4603      	mov	r3, r0
 8004722:	4402      	add	r2, r0
 8004724:	4293      	cmp	r3, r2
 8004726:	d100      	bne.n	800472a <memset+0xa>
 8004728:	4770      	bx	lr
 800472a:	f803 1b01 	strb.w	r1, [r3], #1
 800472e:	e7f9      	b.n	8004724 <memset+0x4>

08004730 <__errno>:
 8004730:	4b01      	ldr	r3, [pc, #4]	@ (8004738 <__errno+0x8>)
 8004732:	6818      	ldr	r0, [r3, #0]
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	20000014 	.word	0x20000014

0800473c <__libc_init_array>:
 800473c:	b570      	push	{r4, r5, r6, lr}
 800473e:	2600      	movs	r6, #0
 8004740:	4d0c      	ldr	r5, [pc, #48]	@ (8004774 <__libc_init_array+0x38>)
 8004742:	4c0d      	ldr	r4, [pc, #52]	@ (8004778 <__libc_init_array+0x3c>)
 8004744:	1b64      	subs	r4, r4, r5
 8004746:	10a4      	asrs	r4, r4, #2
 8004748:	42a6      	cmp	r6, r4
 800474a:	d109      	bne.n	8004760 <__libc_init_array+0x24>
 800474c:	f000 fc76 	bl	800503c <_init>
 8004750:	2600      	movs	r6, #0
 8004752:	4d0a      	ldr	r5, [pc, #40]	@ (800477c <__libc_init_array+0x40>)
 8004754:	4c0a      	ldr	r4, [pc, #40]	@ (8004780 <__libc_init_array+0x44>)
 8004756:	1b64      	subs	r4, r4, r5
 8004758:	10a4      	asrs	r4, r4, #2
 800475a:	42a6      	cmp	r6, r4
 800475c:	d105      	bne.n	800476a <__libc_init_array+0x2e>
 800475e:	bd70      	pop	{r4, r5, r6, pc}
 8004760:	f855 3b04 	ldr.w	r3, [r5], #4
 8004764:	4798      	blx	r3
 8004766:	3601      	adds	r6, #1
 8004768:	e7ee      	b.n	8004748 <__libc_init_array+0xc>
 800476a:	f855 3b04 	ldr.w	r3, [r5], #4
 800476e:	4798      	blx	r3
 8004770:	3601      	adds	r6, #1
 8004772:	e7f2      	b.n	800475a <__libc_init_array+0x1e>
 8004774:	080050c8 	.word	0x080050c8
 8004778:	080050c8 	.word	0x080050c8
 800477c:	080050c8 	.word	0x080050c8
 8004780:	080050cc 	.word	0x080050cc

08004784 <__retarget_lock_acquire_recursive>:
 8004784:	4770      	bx	lr

08004786 <__retarget_lock_release_recursive>:
 8004786:	4770      	bx	lr

08004788 <_free_r>:
 8004788:	b538      	push	{r3, r4, r5, lr}
 800478a:	4605      	mov	r5, r0
 800478c:	2900      	cmp	r1, #0
 800478e:	d040      	beq.n	8004812 <_free_r+0x8a>
 8004790:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004794:	1f0c      	subs	r4, r1, #4
 8004796:	2b00      	cmp	r3, #0
 8004798:	bfb8      	it	lt
 800479a:	18e4      	addlt	r4, r4, r3
 800479c:	f000 f8de 	bl	800495c <__malloc_lock>
 80047a0:	4a1c      	ldr	r2, [pc, #112]	@ (8004814 <_free_r+0x8c>)
 80047a2:	6813      	ldr	r3, [r2, #0]
 80047a4:	b933      	cbnz	r3, 80047b4 <_free_r+0x2c>
 80047a6:	6063      	str	r3, [r4, #4]
 80047a8:	6014      	str	r4, [r2, #0]
 80047aa:	4628      	mov	r0, r5
 80047ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80047b0:	f000 b8da 	b.w	8004968 <__malloc_unlock>
 80047b4:	42a3      	cmp	r3, r4
 80047b6:	d908      	bls.n	80047ca <_free_r+0x42>
 80047b8:	6820      	ldr	r0, [r4, #0]
 80047ba:	1821      	adds	r1, r4, r0
 80047bc:	428b      	cmp	r3, r1
 80047be:	bf01      	itttt	eq
 80047c0:	6819      	ldreq	r1, [r3, #0]
 80047c2:	685b      	ldreq	r3, [r3, #4]
 80047c4:	1809      	addeq	r1, r1, r0
 80047c6:	6021      	streq	r1, [r4, #0]
 80047c8:	e7ed      	b.n	80047a6 <_free_r+0x1e>
 80047ca:	461a      	mov	r2, r3
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	b10b      	cbz	r3, 80047d4 <_free_r+0x4c>
 80047d0:	42a3      	cmp	r3, r4
 80047d2:	d9fa      	bls.n	80047ca <_free_r+0x42>
 80047d4:	6811      	ldr	r1, [r2, #0]
 80047d6:	1850      	adds	r0, r2, r1
 80047d8:	42a0      	cmp	r0, r4
 80047da:	d10b      	bne.n	80047f4 <_free_r+0x6c>
 80047dc:	6820      	ldr	r0, [r4, #0]
 80047de:	4401      	add	r1, r0
 80047e0:	1850      	adds	r0, r2, r1
 80047e2:	4283      	cmp	r3, r0
 80047e4:	6011      	str	r1, [r2, #0]
 80047e6:	d1e0      	bne.n	80047aa <_free_r+0x22>
 80047e8:	6818      	ldr	r0, [r3, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	4408      	add	r0, r1
 80047ee:	6010      	str	r0, [r2, #0]
 80047f0:	6053      	str	r3, [r2, #4]
 80047f2:	e7da      	b.n	80047aa <_free_r+0x22>
 80047f4:	d902      	bls.n	80047fc <_free_r+0x74>
 80047f6:	230c      	movs	r3, #12
 80047f8:	602b      	str	r3, [r5, #0]
 80047fa:	e7d6      	b.n	80047aa <_free_r+0x22>
 80047fc:	6820      	ldr	r0, [r4, #0]
 80047fe:	1821      	adds	r1, r4, r0
 8004800:	428b      	cmp	r3, r1
 8004802:	bf01      	itttt	eq
 8004804:	6819      	ldreq	r1, [r3, #0]
 8004806:	685b      	ldreq	r3, [r3, #4]
 8004808:	1809      	addeq	r1, r1, r0
 800480a:	6021      	streq	r1, [r4, #0]
 800480c:	6063      	str	r3, [r4, #4]
 800480e:	6054      	str	r4, [r2, #4]
 8004810:	e7cb      	b.n	80047aa <_free_r+0x22>
 8004812:	bd38      	pop	{r3, r4, r5, pc}
 8004814:	200002f4 	.word	0x200002f4

08004818 <sbrk_aligned>:
 8004818:	b570      	push	{r4, r5, r6, lr}
 800481a:	4e0f      	ldr	r6, [pc, #60]	@ (8004858 <sbrk_aligned+0x40>)
 800481c:	460c      	mov	r4, r1
 800481e:	6831      	ldr	r1, [r6, #0]
 8004820:	4605      	mov	r5, r0
 8004822:	b911      	cbnz	r1, 800482a <sbrk_aligned+0x12>
 8004824:	f000 fba8 	bl	8004f78 <_sbrk_r>
 8004828:	6030      	str	r0, [r6, #0]
 800482a:	4621      	mov	r1, r4
 800482c:	4628      	mov	r0, r5
 800482e:	f000 fba3 	bl	8004f78 <_sbrk_r>
 8004832:	1c43      	adds	r3, r0, #1
 8004834:	d103      	bne.n	800483e <sbrk_aligned+0x26>
 8004836:	f04f 34ff 	mov.w	r4, #4294967295
 800483a:	4620      	mov	r0, r4
 800483c:	bd70      	pop	{r4, r5, r6, pc}
 800483e:	1cc4      	adds	r4, r0, #3
 8004840:	f024 0403 	bic.w	r4, r4, #3
 8004844:	42a0      	cmp	r0, r4
 8004846:	d0f8      	beq.n	800483a <sbrk_aligned+0x22>
 8004848:	1a21      	subs	r1, r4, r0
 800484a:	4628      	mov	r0, r5
 800484c:	f000 fb94 	bl	8004f78 <_sbrk_r>
 8004850:	3001      	adds	r0, #1
 8004852:	d1f2      	bne.n	800483a <sbrk_aligned+0x22>
 8004854:	e7ef      	b.n	8004836 <sbrk_aligned+0x1e>
 8004856:	bf00      	nop
 8004858:	200002f0 	.word	0x200002f0

0800485c <_malloc_r>:
 800485c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004860:	1ccd      	adds	r5, r1, #3
 8004862:	f025 0503 	bic.w	r5, r5, #3
 8004866:	3508      	adds	r5, #8
 8004868:	2d0c      	cmp	r5, #12
 800486a:	bf38      	it	cc
 800486c:	250c      	movcc	r5, #12
 800486e:	2d00      	cmp	r5, #0
 8004870:	4606      	mov	r6, r0
 8004872:	db01      	blt.n	8004878 <_malloc_r+0x1c>
 8004874:	42a9      	cmp	r1, r5
 8004876:	d904      	bls.n	8004882 <_malloc_r+0x26>
 8004878:	230c      	movs	r3, #12
 800487a:	6033      	str	r3, [r6, #0]
 800487c:	2000      	movs	r0, #0
 800487e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004882:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004958 <_malloc_r+0xfc>
 8004886:	f000 f869 	bl	800495c <__malloc_lock>
 800488a:	f8d8 3000 	ldr.w	r3, [r8]
 800488e:	461c      	mov	r4, r3
 8004890:	bb44      	cbnz	r4, 80048e4 <_malloc_r+0x88>
 8004892:	4629      	mov	r1, r5
 8004894:	4630      	mov	r0, r6
 8004896:	f7ff ffbf 	bl	8004818 <sbrk_aligned>
 800489a:	1c43      	adds	r3, r0, #1
 800489c:	4604      	mov	r4, r0
 800489e:	d158      	bne.n	8004952 <_malloc_r+0xf6>
 80048a0:	f8d8 4000 	ldr.w	r4, [r8]
 80048a4:	4627      	mov	r7, r4
 80048a6:	2f00      	cmp	r7, #0
 80048a8:	d143      	bne.n	8004932 <_malloc_r+0xd6>
 80048aa:	2c00      	cmp	r4, #0
 80048ac:	d04b      	beq.n	8004946 <_malloc_r+0xea>
 80048ae:	6823      	ldr	r3, [r4, #0]
 80048b0:	4639      	mov	r1, r7
 80048b2:	4630      	mov	r0, r6
 80048b4:	eb04 0903 	add.w	r9, r4, r3
 80048b8:	f000 fb5e 	bl	8004f78 <_sbrk_r>
 80048bc:	4581      	cmp	r9, r0
 80048be:	d142      	bne.n	8004946 <_malloc_r+0xea>
 80048c0:	6821      	ldr	r1, [r4, #0]
 80048c2:	4630      	mov	r0, r6
 80048c4:	1a6d      	subs	r5, r5, r1
 80048c6:	4629      	mov	r1, r5
 80048c8:	f7ff ffa6 	bl	8004818 <sbrk_aligned>
 80048cc:	3001      	adds	r0, #1
 80048ce:	d03a      	beq.n	8004946 <_malloc_r+0xea>
 80048d0:	6823      	ldr	r3, [r4, #0]
 80048d2:	442b      	add	r3, r5
 80048d4:	6023      	str	r3, [r4, #0]
 80048d6:	f8d8 3000 	ldr.w	r3, [r8]
 80048da:	685a      	ldr	r2, [r3, #4]
 80048dc:	bb62      	cbnz	r2, 8004938 <_malloc_r+0xdc>
 80048de:	f8c8 7000 	str.w	r7, [r8]
 80048e2:	e00f      	b.n	8004904 <_malloc_r+0xa8>
 80048e4:	6822      	ldr	r2, [r4, #0]
 80048e6:	1b52      	subs	r2, r2, r5
 80048e8:	d420      	bmi.n	800492c <_malloc_r+0xd0>
 80048ea:	2a0b      	cmp	r2, #11
 80048ec:	d917      	bls.n	800491e <_malloc_r+0xc2>
 80048ee:	1961      	adds	r1, r4, r5
 80048f0:	42a3      	cmp	r3, r4
 80048f2:	6025      	str	r5, [r4, #0]
 80048f4:	bf18      	it	ne
 80048f6:	6059      	strne	r1, [r3, #4]
 80048f8:	6863      	ldr	r3, [r4, #4]
 80048fa:	bf08      	it	eq
 80048fc:	f8c8 1000 	streq.w	r1, [r8]
 8004900:	5162      	str	r2, [r4, r5]
 8004902:	604b      	str	r3, [r1, #4]
 8004904:	4630      	mov	r0, r6
 8004906:	f000 f82f 	bl	8004968 <__malloc_unlock>
 800490a:	f104 000b 	add.w	r0, r4, #11
 800490e:	1d23      	adds	r3, r4, #4
 8004910:	f020 0007 	bic.w	r0, r0, #7
 8004914:	1ac2      	subs	r2, r0, r3
 8004916:	bf1c      	itt	ne
 8004918:	1a1b      	subne	r3, r3, r0
 800491a:	50a3      	strne	r3, [r4, r2]
 800491c:	e7af      	b.n	800487e <_malloc_r+0x22>
 800491e:	6862      	ldr	r2, [r4, #4]
 8004920:	42a3      	cmp	r3, r4
 8004922:	bf0c      	ite	eq
 8004924:	f8c8 2000 	streq.w	r2, [r8]
 8004928:	605a      	strne	r2, [r3, #4]
 800492a:	e7eb      	b.n	8004904 <_malloc_r+0xa8>
 800492c:	4623      	mov	r3, r4
 800492e:	6864      	ldr	r4, [r4, #4]
 8004930:	e7ae      	b.n	8004890 <_malloc_r+0x34>
 8004932:	463c      	mov	r4, r7
 8004934:	687f      	ldr	r7, [r7, #4]
 8004936:	e7b6      	b.n	80048a6 <_malloc_r+0x4a>
 8004938:	461a      	mov	r2, r3
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	42a3      	cmp	r3, r4
 800493e:	d1fb      	bne.n	8004938 <_malloc_r+0xdc>
 8004940:	2300      	movs	r3, #0
 8004942:	6053      	str	r3, [r2, #4]
 8004944:	e7de      	b.n	8004904 <_malloc_r+0xa8>
 8004946:	230c      	movs	r3, #12
 8004948:	4630      	mov	r0, r6
 800494a:	6033      	str	r3, [r6, #0]
 800494c:	f000 f80c 	bl	8004968 <__malloc_unlock>
 8004950:	e794      	b.n	800487c <_malloc_r+0x20>
 8004952:	6005      	str	r5, [r0, #0]
 8004954:	e7d6      	b.n	8004904 <_malloc_r+0xa8>
 8004956:	bf00      	nop
 8004958:	200002f4 	.word	0x200002f4

0800495c <__malloc_lock>:
 800495c:	4801      	ldr	r0, [pc, #4]	@ (8004964 <__malloc_lock+0x8>)
 800495e:	f7ff bf11 	b.w	8004784 <__retarget_lock_acquire_recursive>
 8004962:	bf00      	nop
 8004964:	200002ec 	.word	0x200002ec

08004968 <__malloc_unlock>:
 8004968:	4801      	ldr	r0, [pc, #4]	@ (8004970 <__malloc_unlock+0x8>)
 800496a:	f7ff bf0c 	b.w	8004786 <__retarget_lock_release_recursive>
 800496e:	bf00      	nop
 8004970:	200002ec 	.word	0x200002ec

08004974 <__ssputs_r>:
 8004974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004978:	461f      	mov	r7, r3
 800497a:	688e      	ldr	r6, [r1, #8]
 800497c:	4682      	mov	sl, r0
 800497e:	42be      	cmp	r6, r7
 8004980:	460c      	mov	r4, r1
 8004982:	4690      	mov	r8, r2
 8004984:	680b      	ldr	r3, [r1, #0]
 8004986:	d82d      	bhi.n	80049e4 <__ssputs_r+0x70>
 8004988:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800498c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004990:	d026      	beq.n	80049e0 <__ssputs_r+0x6c>
 8004992:	6965      	ldr	r5, [r4, #20]
 8004994:	6909      	ldr	r1, [r1, #16]
 8004996:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800499a:	eba3 0901 	sub.w	r9, r3, r1
 800499e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80049a2:	1c7b      	adds	r3, r7, #1
 80049a4:	444b      	add	r3, r9
 80049a6:	106d      	asrs	r5, r5, #1
 80049a8:	429d      	cmp	r5, r3
 80049aa:	bf38      	it	cc
 80049ac:	461d      	movcc	r5, r3
 80049ae:	0553      	lsls	r3, r2, #21
 80049b0:	d527      	bpl.n	8004a02 <__ssputs_r+0x8e>
 80049b2:	4629      	mov	r1, r5
 80049b4:	f7ff ff52 	bl	800485c <_malloc_r>
 80049b8:	4606      	mov	r6, r0
 80049ba:	b360      	cbz	r0, 8004a16 <__ssputs_r+0xa2>
 80049bc:	464a      	mov	r2, r9
 80049be:	6921      	ldr	r1, [r4, #16]
 80049c0:	f000 faf8 	bl	8004fb4 <memcpy>
 80049c4:	89a3      	ldrh	r3, [r4, #12]
 80049c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80049ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049ce:	81a3      	strh	r3, [r4, #12]
 80049d0:	6126      	str	r6, [r4, #16]
 80049d2:	444e      	add	r6, r9
 80049d4:	6026      	str	r6, [r4, #0]
 80049d6:	463e      	mov	r6, r7
 80049d8:	6165      	str	r5, [r4, #20]
 80049da:	eba5 0509 	sub.w	r5, r5, r9
 80049de:	60a5      	str	r5, [r4, #8]
 80049e0:	42be      	cmp	r6, r7
 80049e2:	d900      	bls.n	80049e6 <__ssputs_r+0x72>
 80049e4:	463e      	mov	r6, r7
 80049e6:	4632      	mov	r2, r6
 80049e8:	4641      	mov	r1, r8
 80049ea:	6820      	ldr	r0, [r4, #0]
 80049ec:	f000 faaa 	bl	8004f44 <memmove>
 80049f0:	2000      	movs	r0, #0
 80049f2:	68a3      	ldr	r3, [r4, #8]
 80049f4:	1b9b      	subs	r3, r3, r6
 80049f6:	60a3      	str	r3, [r4, #8]
 80049f8:	6823      	ldr	r3, [r4, #0]
 80049fa:	4433      	add	r3, r6
 80049fc:	6023      	str	r3, [r4, #0]
 80049fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a02:	462a      	mov	r2, r5
 8004a04:	f000 fae4 	bl	8004fd0 <_realloc_r>
 8004a08:	4606      	mov	r6, r0
 8004a0a:	2800      	cmp	r0, #0
 8004a0c:	d1e0      	bne.n	80049d0 <__ssputs_r+0x5c>
 8004a0e:	4650      	mov	r0, sl
 8004a10:	6921      	ldr	r1, [r4, #16]
 8004a12:	f7ff feb9 	bl	8004788 <_free_r>
 8004a16:	230c      	movs	r3, #12
 8004a18:	f8ca 3000 	str.w	r3, [sl]
 8004a1c:	89a3      	ldrh	r3, [r4, #12]
 8004a1e:	f04f 30ff 	mov.w	r0, #4294967295
 8004a22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a26:	81a3      	strh	r3, [r4, #12]
 8004a28:	e7e9      	b.n	80049fe <__ssputs_r+0x8a>
	...

08004a2c <_svfiprintf_r>:
 8004a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a30:	4698      	mov	r8, r3
 8004a32:	898b      	ldrh	r3, [r1, #12]
 8004a34:	4607      	mov	r7, r0
 8004a36:	061b      	lsls	r3, r3, #24
 8004a38:	460d      	mov	r5, r1
 8004a3a:	4614      	mov	r4, r2
 8004a3c:	b09d      	sub	sp, #116	@ 0x74
 8004a3e:	d510      	bpl.n	8004a62 <_svfiprintf_r+0x36>
 8004a40:	690b      	ldr	r3, [r1, #16]
 8004a42:	b973      	cbnz	r3, 8004a62 <_svfiprintf_r+0x36>
 8004a44:	2140      	movs	r1, #64	@ 0x40
 8004a46:	f7ff ff09 	bl	800485c <_malloc_r>
 8004a4a:	6028      	str	r0, [r5, #0]
 8004a4c:	6128      	str	r0, [r5, #16]
 8004a4e:	b930      	cbnz	r0, 8004a5e <_svfiprintf_r+0x32>
 8004a50:	230c      	movs	r3, #12
 8004a52:	603b      	str	r3, [r7, #0]
 8004a54:	f04f 30ff 	mov.w	r0, #4294967295
 8004a58:	b01d      	add	sp, #116	@ 0x74
 8004a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a5e:	2340      	movs	r3, #64	@ 0x40
 8004a60:	616b      	str	r3, [r5, #20]
 8004a62:	2300      	movs	r3, #0
 8004a64:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a66:	2320      	movs	r3, #32
 8004a68:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004a6c:	2330      	movs	r3, #48	@ 0x30
 8004a6e:	f04f 0901 	mov.w	r9, #1
 8004a72:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a76:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004c10 <_svfiprintf_r+0x1e4>
 8004a7a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004a7e:	4623      	mov	r3, r4
 8004a80:	469a      	mov	sl, r3
 8004a82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a86:	b10a      	cbz	r2, 8004a8c <_svfiprintf_r+0x60>
 8004a88:	2a25      	cmp	r2, #37	@ 0x25
 8004a8a:	d1f9      	bne.n	8004a80 <_svfiprintf_r+0x54>
 8004a8c:	ebba 0b04 	subs.w	fp, sl, r4
 8004a90:	d00b      	beq.n	8004aaa <_svfiprintf_r+0x7e>
 8004a92:	465b      	mov	r3, fp
 8004a94:	4622      	mov	r2, r4
 8004a96:	4629      	mov	r1, r5
 8004a98:	4638      	mov	r0, r7
 8004a9a:	f7ff ff6b 	bl	8004974 <__ssputs_r>
 8004a9e:	3001      	adds	r0, #1
 8004aa0:	f000 80a7 	beq.w	8004bf2 <_svfiprintf_r+0x1c6>
 8004aa4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004aa6:	445a      	add	r2, fp
 8004aa8:	9209      	str	r2, [sp, #36]	@ 0x24
 8004aaa:	f89a 3000 	ldrb.w	r3, [sl]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	f000 809f 	beq.w	8004bf2 <_svfiprintf_r+0x1c6>
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	f04f 32ff 	mov.w	r2, #4294967295
 8004aba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004abe:	f10a 0a01 	add.w	sl, sl, #1
 8004ac2:	9304      	str	r3, [sp, #16]
 8004ac4:	9307      	str	r3, [sp, #28]
 8004ac6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004aca:	931a      	str	r3, [sp, #104]	@ 0x68
 8004acc:	4654      	mov	r4, sl
 8004ace:	2205      	movs	r2, #5
 8004ad0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ad4:	484e      	ldr	r0, [pc, #312]	@ (8004c10 <_svfiprintf_r+0x1e4>)
 8004ad6:	f000 fa5f 	bl	8004f98 <memchr>
 8004ada:	9a04      	ldr	r2, [sp, #16]
 8004adc:	b9d8      	cbnz	r0, 8004b16 <_svfiprintf_r+0xea>
 8004ade:	06d0      	lsls	r0, r2, #27
 8004ae0:	bf44      	itt	mi
 8004ae2:	2320      	movmi	r3, #32
 8004ae4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004ae8:	0711      	lsls	r1, r2, #28
 8004aea:	bf44      	itt	mi
 8004aec:	232b      	movmi	r3, #43	@ 0x2b
 8004aee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004af2:	f89a 3000 	ldrb.w	r3, [sl]
 8004af6:	2b2a      	cmp	r3, #42	@ 0x2a
 8004af8:	d015      	beq.n	8004b26 <_svfiprintf_r+0xfa>
 8004afa:	4654      	mov	r4, sl
 8004afc:	2000      	movs	r0, #0
 8004afe:	f04f 0c0a 	mov.w	ip, #10
 8004b02:	9a07      	ldr	r2, [sp, #28]
 8004b04:	4621      	mov	r1, r4
 8004b06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b0a:	3b30      	subs	r3, #48	@ 0x30
 8004b0c:	2b09      	cmp	r3, #9
 8004b0e:	d94b      	bls.n	8004ba8 <_svfiprintf_r+0x17c>
 8004b10:	b1b0      	cbz	r0, 8004b40 <_svfiprintf_r+0x114>
 8004b12:	9207      	str	r2, [sp, #28]
 8004b14:	e014      	b.n	8004b40 <_svfiprintf_r+0x114>
 8004b16:	eba0 0308 	sub.w	r3, r0, r8
 8004b1a:	fa09 f303 	lsl.w	r3, r9, r3
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	46a2      	mov	sl, r4
 8004b22:	9304      	str	r3, [sp, #16]
 8004b24:	e7d2      	b.n	8004acc <_svfiprintf_r+0xa0>
 8004b26:	9b03      	ldr	r3, [sp, #12]
 8004b28:	1d19      	adds	r1, r3, #4
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	9103      	str	r1, [sp, #12]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	bfbb      	ittet	lt
 8004b32:	425b      	neglt	r3, r3
 8004b34:	f042 0202 	orrlt.w	r2, r2, #2
 8004b38:	9307      	strge	r3, [sp, #28]
 8004b3a:	9307      	strlt	r3, [sp, #28]
 8004b3c:	bfb8      	it	lt
 8004b3e:	9204      	strlt	r2, [sp, #16]
 8004b40:	7823      	ldrb	r3, [r4, #0]
 8004b42:	2b2e      	cmp	r3, #46	@ 0x2e
 8004b44:	d10a      	bne.n	8004b5c <_svfiprintf_r+0x130>
 8004b46:	7863      	ldrb	r3, [r4, #1]
 8004b48:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b4a:	d132      	bne.n	8004bb2 <_svfiprintf_r+0x186>
 8004b4c:	9b03      	ldr	r3, [sp, #12]
 8004b4e:	3402      	adds	r4, #2
 8004b50:	1d1a      	adds	r2, r3, #4
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	9203      	str	r2, [sp, #12]
 8004b56:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004b5a:	9305      	str	r3, [sp, #20]
 8004b5c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004c14 <_svfiprintf_r+0x1e8>
 8004b60:	2203      	movs	r2, #3
 8004b62:	4650      	mov	r0, sl
 8004b64:	7821      	ldrb	r1, [r4, #0]
 8004b66:	f000 fa17 	bl	8004f98 <memchr>
 8004b6a:	b138      	cbz	r0, 8004b7c <_svfiprintf_r+0x150>
 8004b6c:	2240      	movs	r2, #64	@ 0x40
 8004b6e:	9b04      	ldr	r3, [sp, #16]
 8004b70:	eba0 000a 	sub.w	r0, r0, sl
 8004b74:	4082      	lsls	r2, r0
 8004b76:	4313      	orrs	r3, r2
 8004b78:	3401      	adds	r4, #1
 8004b7a:	9304      	str	r3, [sp, #16]
 8004b7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b80:	2206      	movs	r2, #6
 8004b82:	4825      	ldr	r0, [pc, #148]	@ (8004c18 <_svfiprintf_r+0x1ec>)
 8004b84:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004b88:	f000 fa06 	bl	8004f98 <memchr>
 8004b8c:	2800      	cmp	r0, #0
 8004b8e:	d036      	beq.n	8004bfe <_svfiprintf_r+0x1d2>
 8004b90:	4b22      	ldr	r3, [pc, #136]	@ (8004c1c <_svfiprintf_r+0x1f0>)
 8004b92:	bb1b      	cbnz	r3, 8004bdc <_svfiprintf_r+0x1b0>
 8004b94:	9b03      	ldr	r3, [sp, #12]
 8004b96:	3307      	adds	r3, #7
 8004b98:	f023 0307 	bic.w	r3, r3, #7
 8004b9c:	3308      	adds	r3, #8
 8004b9e:	9303      	str	r3, [sp, #12]
 8004ba0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ba2:	4433      	add	r3, r6
 8004ba4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ba6:	e76a      	b.n	8004a7e <_svfiprintf_r+0x52>
 8004ba8:	460c      	mov	r4, r1
 8004baa:	2001      	movs	r0, #1
 8004bac:	fb0c 3202 	mla	r2, ip, r2, r3
 8004bb0:	e7a8      	b.n	8004b04 <_svfiprintf_r+0xd8>
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	f04f 0c0a 	mov.w	ip, #10
 8004bb8:	4619      	mov	r1, r3
 8004bba:	3401      	adds	r4, #1
 8004bbc:	9305      	str	r3, [sp, #20]
 8004bbe:	4620      	mov	r0, r4
 8004bc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004bc4:	3a30      	subs	r2, #48	@ 0x30
 8004bc6:	2a09      	cmp	r2, #9
 8004bc8:	d903      	bls.n	8004bd2 <_svfiprintf_r+0x1a6>
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d0c6      	beq.n	8004b5c <_svfiprintf_r+0x130>
 8004bce:	9105      	str	r1, [sp, #20]
 8004bd0:	e7c4      	b.n	8004b5c <_svfiprintf_r+0x130>
 8004bd2:	4604      	mov	r4, r0
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	fb0c 2101 	mla	r1, ip, r1, r2
 8004bda:	e7f0      	b.n	8004bbe <_svfiprintf_r+0x192>
 8004bdc:	ab03      	add	r3, sp, #12
 8004bde:	9300      	str	r3, [sp, #0]
 8004be0:	462a      	mov	r2, r5
 8004be2:	4638      	mov	r0, r7
 8004be4:	4b0e      	ldr	r3, [pc, #56]	@ (8004c20 <_svfiprintf_r+0x1f4>)
 8004be6:	a904      	add	r1, sp, #16
 8004be8:	f3af 8000 	nop.w
 8004bec:	1c42      	adds	r2, r0, #1
 8004bee:	4606      	mov	r6, r0
 8004bf0:	d1d6      	bne.n	8004ba0 <_svfiprintf_r+0x174>
 8004bf2:	89ab      	ldrh	r3, [r5, #12]
 8004bf4:	065b      	lsls	r3, r3, #25
 8004bf6:	f53f af2d 	bmi.w	8004a54 <_svfiprintf_r+0x28>
 8004bfa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004bfc:	e72c      	b.n	8004a58 <_svfiprintf_r+0x2c>
 8004bfe:	ab03      	add	r3, sp, #12
 8004c00:	9300      	str	r3, [sp, #0]
 8004c02:	462a      	mov	r2, r5
 8004c04:	4638      	mov	r0, r7
 8004c06:	4b06      	ldr	r3, [pc, #24]	@ (8004c20 <_svfiprintf_r+0x1f4>)
 8004c08:	a904      	add	r1, sp, #16
 8004c0a:	f000 f87d 	bl	8004d08 <_printf_i>
 8004c0e:	e7ed      	b.n	8004bec <_svfiprintf_r+0x1c0>
 8004c10:	08005092 	.word	0x08005092
 8004c14:	08005098 	.word	0x08005098
 8004c18:	0800509c 	.word	0x0800509c
 8004c1c:	00000000 	.word	0x00000000
 8004c20:	08004975 	.word	0x08004975

08004c24 <_printf_common>:
 8004c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c28:	4616      	mov	r6, r2
 8004c2a:	4698      	mov	r8, r3
 8004c2c:	688a      	ldr	r2, [r1, #8]
 8004c2e:	690b      	ldr	r3, [r1, #16]
 8004c30:	4607      	mov	r7, r0
 8004c32:	4293      	cmp	r3, r2
 8004c34:	bfb8      	it	lt
 8004c36:	4613      	movlt	r3, r2
 8004c38:	6033      	str	r3, [r6, #0]
 8004c3a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004c3e:	460c      	mov	r4, r1
 8004c40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004c44:	b10a      	cbz	r2, 8004c4a <_printf_common+0x26>
 8004c46:	3301      	adds	r3, #1
 8004c48:	6033      	str	r3, [r6, #0]
 8004c4a:	6823      	ldr	r3, [r4, #0]
 8004c4c:	0699      	lsls	r1, r3, #26
 8004c4e:	bf42      	ittt	mi
 8004c50:	6833      	ldrmi	r3, [r6, #0]
 8004c52:	3302      	addmi	r3, #2
 8004c54:	6033      	strmi	r3, [r6, #0]
 8004c56:	6825      	ldr	r5, [r4, #0]
 8004c58:	f015 0506 	ands.w	r5, r5, #6
 8004c5c:	d106      	bne.n	8004c6c <_printf_common+0x48>
 8004c5e:	f104 0a19 	add.w	sl, r4, #25
 8004c62:	68e3      	ldr	r3, [r4, #12]
 8004c64:	6832      	ldr	r2, [r6, #0]
 8004c66:	1a9b      	subs	r3, r3, r2
 8004c68:	42ab      	cmp	r3, r5
 8004c6a:	dc2b      	bgt.n	8004cc4 <_printf_common+0xa0>
 8004c6c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004c70:	6822      	ldr	r2, [r4, #0]
 8004c72:	3b00      	subs	r3, #0
 8004c74:	bf18      	it	ne
 8004c76:	2301      	movne	r3, #1
 8004c78:	0692      	lsls	r2, r2, #26
 8004c7a:	d430      	bmi.n	8004cde <_printf_common+0xba>
 8004c7c:	4641      	mov	r1, r8
 8004c7e:	4638      	mov	r0, r7
 8004c80:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004c84:	47c8      	blx	r9
 8004c86:	3001      	adds	r0, #1
 8004c88:	d023      	beq.n	8004cd2 <_printf_common+0xae>
 8004c8a:	6823      	ldr	r3, [r4, #0]
 8004c8c:	6922      	ldr	r2, [r4, #16]
 8004c8e:	f003 0306 	and.w	r3, r3, #6
 8004c92:	2b04      	cmp	r3, #4
 8004c94:	bf14      	ite	ne
 8004c96:	2500      	movne	r5, #0
 8004c98:	6833      	ldreq	r3, [r6, #0]
 8004c9a:	f04f 0600 	mov.w	r6, #0
 8004c9e:	bf08      	it	eq
 8004ca0:	68e5      	ldreq	r5, [r4, #12]
 8004ca2:	f104 041a 	add.w	r4, r4, #26
 8004ca6:	bf08      	it	eq
 8004ca8:	1aed      	subeq	r5, r5, r3
 8004caa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004cae:	bf08      	it	eq
 8004cb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	bfc4      	itt	gt
 8004cb8:	1a9b      	subgt	r3, r3, r2
 8004cba:	18ed      	addgt	r5, r5, r3
 8004cbc:	42b5      	cmp	r5, r6
 8004cbe:	d11a      	bne.n	8004cf6 <_printf_common+0xd2>
 8004cc0:	2000      	movs	r0, #0
 8004cc2:	e008      	b.n	8004cd6 <_printf_common+0xb2>
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	4652      	mov	r2, sl
 8004cc8:	4641      	mov	r1, r8
 8004cca:	4638      	mov	r0, r7
 8004ccc:	47c8      	blx	r9
 8004cce:	3001      	adds	r0, #1
 8004cd0:	d103      	bne.n	8004cda <_printf_common+0xb6>
 8004cd2:	f04f 30ff 	mov.w	r0, #4294967295
 8004cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cda:	3501      	adds	r5, #1
 8004cdc:	e7c1      	b.n	8004c62 <_printf_common+0x3e>
 8004cde:	2030      	movs	r0, #48	@ 0x30
 8004ce0:	18e1      	adds	r1, r4, r3
 8004ce2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004ce6:	1c5a      	adds	r2, r3, #1
 8004ce8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004cec:	4422      	add	r2, r4
 8004cee:	3302      	adds	r3, #2
 8004cf0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004cf4:	e7c2      	b.n	8004c7c <_printf_common+0x58>
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	4622      	mov	r2, r4
 8004cfa:	4641      	mov	r1, r8
 8004cfc:	4638      	mov	r0, r7
 8004cfe:	47c8      	blx	r9
 8004d00:	3001      	adds	r0, #1
 8004d02:	d0e6      	beq.n	8004cd2 <_printf_common+0xae>
 8004d04:	3601      	adds	r6, #1
 8004d06:	e7d9      	b.n	8004cbc <_printf_common+0x98>

08004d08 <_printf_i>:
 8004d08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d0c:	7e0f      	ldrb	r7, [r1, #24]
 8004d0e:	4691      	mov	r9, r2
 8004d10:	2f78      	cmp	r7, #120	@ 0x78
 8004d12:	4680      	mov	r8, r0
 8004d14:	460c      	mov	r4, r1
 8004d16:	469a      	mov	sl, r3
 8004d18:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004d1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004d1e:	d807      	bhi.n	8004d30 <_printf_i+0x28>
 8004d20:	2f62      	cmp	r7, #98	@ 0x62
 8004d22:	d80a      	bhi.n	8004d3a <_printf_i+0x32>
 8004d24:	2f00      	cmp	r7, #0
 8004d26:	f000 80d1 	beq.w	8004ecc <_printf_i+0x1c4>
 8004d2a:	2f58      	cmp	r7, #88	@ 0x58
 8004d2c:	f000 80b8 	beq.w	8004ea0 <_printf_i+0x198>
 8004d30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004d38:	e03a      	b.n	8004db0 <_printf_i+0xa8>
 8004d3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004d3e:	2b15      	cmp	r3, #21
 8004d40:	d8f6      	bhi.n	8004d30 <_printf_i+0x28>
 8004d42:	a101      	add	r1, pc, #4	@ (adr r1, 8004d48 <_printf_i+0x40>)
 8004d44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d48:	08004da1 	.word	0x08004da1
 8004d4c:	08004db5 	.word	0x08004db5
 8004d50:	08004d31 	.word	0x08004d31
 8004d54:	08004d31 	.word	0x08004d31
 8004d58:	08004d31 	.word	0x08004d31
 8004d5c:	08004d31 	.word	0x08004d31
 8004d60:	08004db5 	.word	0x08004db5
 8004d64:	08004d31 	.word	0x08004d31
 8004d68:	08004d31 	.word	0x08004d31
 8004d6c:	08004d31 	.word	0x08004d31
 8004d70:	08004d31 	.word	0x08004d31
 8004d74:	08004eb3 	.word	0x08004eb3
 8004d78:	08004ddf 	.word	0x08004ddf
 8004d7c:	08004e6d 	.word	0x08004e6d
 8004d80:	08004d31 	.word	0x08004d31
 8004d84:	08004d31 	.word	0x08004d31
 8004d88:	08004ed5 	.word	0x08004ed5
 8004d8c:	08004d31 	.word	0x08004d31
 8004d90:	08004ddf 	.word	0x08004ddf
 8004d94:	08004d31 	.word	0x08004d31
 8004d98:	08004d31 	.word	0x08004d31
 8004d9c:	08004e75 	.word	0x08004e75
 8004da0:	6833      	ldr	r3, [r6, #0]
 8004da2:	1d1a      	adds	r2, r3, #4
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	6032      	str	r2, [r6, #0]
 8004da8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004dac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004db0:	2301      	movs	r3, #1
 8004db2:	e09c      	b.n	8004eee <_printf_i+0x1e6>
 8004db4:	6833      	ldr	r3, [r6, #0]
 8004db6:	6820      	ldr	r0, [r4, #0]
 8004db8:	1d19      	adds	r1, r3, #4
 8004dba:	6031      	str	r1, [r6, #0]
 8004dbc:	0606      	lsls	r6, r0, #24
 8004dbe:	d501      	bpl.n	8004dc4 <_printf_i+0xbc>
 8004dc0:	681d      	ldr	r5, [r3, #0]
 8004dc2:	e003      	b.n	8004dcc <_printf_i+0xc4>
 8004dc4:	0645      	lsls	r5, r0, #25
 8004dc6:	d5fb      	bpl.n	8004dc0 <_printf_i+0xb8>
 8004dc8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004dcc:	2d00      	cmp	r5, #0
 8004dce:	da03      	bge.n	8004dd8 <_printf_i+0xd0>
 8004dd0:	232d      	movs	r3, #45	@ 0x2d
 8004dd2:	426d      	negs	r5, r5
 8004dd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004dd8:	230a      	movs	r3, #10
 8004dda:	4858      	ldr	r0, [pc, #352]	@ (8004f3c <_printf_i+0x234>)
 8004ddc:	e011      	b.n	8004e02 <_printf_i+0xfa>
 8004dde:	6821      	ldr	r1, [r4, #0]
 8004de0:	6833      	ldr	r3, [r6, #0]
 8004de2:	0608      	lsls	r0, r1, #24
 8004de4:	f853 5b04 	ldr.w	r5, [r3], #4
 8004de8:	d402      	bmi.n	8004df0 <_printf_i+0xe8>
 8004dea:	0649      	lsls	r1, r1, #25
 8004dec:	bf48      	it	mi
 8004dee:	b2ad      	uxthmi	r5, r5
 8004df0:	2f6f      	cmp	r7, #111	@ 0x6f
 8004df2:	6033      	str	r3, [r6, #0]
 8004df4:	bf14      	ite	ne
 8004df6:	230a      	movne	r3, #10
 8004df8:	2308      	moveq	r3, #8
 8004dfa:	4850      	ldr	r0, [pc, #320]	@ (8004f3c <_printf_i+0x234>)
 8004dfc:	2100      	movs	r1, #0
 8004dfe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004e02:	6866      	ldr	r6, [r4, #4]
 8004e04:	2e00      	cmp	r6, #0
 8004e06:	60a6      	str	r6, [r4, #8]
 8004e08:	db05      	blt.n	8004e16 <_printf_i+0x10e>
 8004e0a:	6821      	ldr	r1, [r4, #0]
 8004e0c:	432e      	orrs	r6, r5
 8004e0e:	f021 0104 	bic.w	r1, r1, #4
 8004e12:	6021      	str	r1, [r4, #0]
 8004e14:	d04b      	beq.n	8004eae <_printf_i+0x1a6>
 8004e16:	4616      	mov	r6, r2
 8004e18:	fbb5 f1f3 	udiv	r1, r5, r3
 8004e1c:	fb03 5711 	mls	r7, r3, r1, r5
 8004e20:	5dc7      	ldrb	r7, [r0, r7]
 8004e22:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004e26:	462f      	mov	r7, r5
 8004e28:	42bb      	cmp	r3, r7
 8004e2a:	460d      	mov	r5, r1
 8004e2c:	d9f4      	bls.n	8004e18 <_printf_i+0x110>
 8004e2e:	2b08      	cmp	r3, #8
 8004e30:	d10b      	bne.n	8004e4a <_printf_i+0x142>
 8004e32:	6823      	ldr	r3, [r4, #0]
 8004e34:	07df      	lsls	r7, r3, #31
 8004e36:	d508      	bpl.n	8004e4a <_printf_i+0x142>
 8004e38:	6923      	ldr	r3, [r4, #16]
 8004e3a:	6861      	ldr	r1, [r4, #4]
 8004e3c:	4299      	cmp	r1, r3
 8004e3e:	bfde      	ittt	le
 8004e40:	2330      	movle	r3, #48	@ 0x30
 8004e42:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004e46:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004e4a:	1b92      	subs	r2, r2, r6
 8004e4c:	6122      	str	r2, [r4, #16]
 8004e4e:	464b      	mov	r3, r9
 8004e50:	4621      	mov	r1, r4
 8004e52:	4640      	mov	r0, r8
 8004e54:	f8cd a000 	str.w	sl, [sp]
 8004e58:	aa03      	add	r2, sp, #12
 8004e5a:	f7ff fee3 	bl	8004c24 <_printf_common>
 8004e5e:	3001      	adds	r0, #1
 8004e60:	d14a      	bne.n	8004ef8 <_printf_i+0x1f0>
 8004e62:	f04f 30ff 	mov.w	r0, #4294967295
 8004e66:	b004      	add	sp, #16
 8004e68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e6c:	6823      	ldr	r3, [r4, #0]
 8004e6e:	f043 0320 	orr.w	r3, r3, #32
 8004e72:	6023      	str	r3, [r4, #0]
 8004e74:	2778      	movs	r7, #120	@ 0x78
 8004e76:	4832      	ldr	r0, [pc, #200]	@ (8004f40 <_printf_i+0x238>)
 8004e78:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004e7c:	6823      	ldr	r3, [r4, #0]
 8004e7e:	6831      	ldr	r1, [r6, #0]
 8004e80:	061f      	lsls	r7, r3, #24
 8004e82:	f851 5b04 	ldr.w	r5, [r1], #4
 8004e86:	d402      	bmi.n	8004e8e <_printf_i+0x186>
 8004e88:	065f      	lsls	r7, r3, #25
 8004e8a:	bf48      	it	mi
 8004e8c:	b2ad      	uxthmi	r5, r5
 8004e8e:	6031      	str	r1, [r6, #0]
 8004e90:	07d9      	lsls	r1, r3, #31
 8004e92:	bf44      	itt	mi
 8004e94:	f043 0320 	orrmi.w	r3, r3, #32
 8004e98:	6023      	strmi	r3, [r4, #0]
 8004e9a:	b11d      	cbz	r5, 8004ea4 <_printf_i+0x19c>
 8004e9c:	2310      	movs	r3, #16
 8004e9e:	e7ad      	b.n	8004dfc <_printf_i+0xf4>
 8004ea0:	4826      	ldr	r0, [pc, #152]	@ (8004f3c <_printf_i+0x234>)
 8004ea2:	e7e9      	b.n	8004e78 <_printf_i+0x170>
 8004ea4:	6823      	ldr	r3, [r4, #0]
 8004ea6:	f023 0320 	bic.w	r3, r3, #32
 8004eaa:	6023      	str	r3, [r4, #0]
 8004eac:	e7f6      	b.n	8004e9c <_printf_i+0x194>
 8004eae:	4616      	mov	r6, r2
 8004eb0:	e7bd      	b.n	8004e2e <_printf_i+0x126>
 8004eb2:	6833      	ldr	r3, [r6, #0]
 8004eb4:	6825      	ldr	r5, [r4, #0]
 8004eb6:	1d18      	adds	r0, r3, #4
 8004eb8:	6961      	ldr	r1, [r4, #20]
 8004eba:	6030      	str	r0, [r6, #0]
 8004ebc:	062e      	lsls	r6, r5, #24
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	d501      	bpl.n	8004ec6 <_printf_i+0x1be>
 8004ec2:	6019      	str	r1, [r3, #0]
 8004ec4:	e002      	b.n	8004ecc <_printf_i+0x1c4>
 8004ec6:	0668      	lsls	r0, r5, #25
 8004ec8:	d5fb      	bpl.n	8004ec2 <_printf_i+0x1ba>
 8004eca:	8019      	strh	r1, [r3, #0]
 8004ecc:	2300      	movs	r3, #0
 8004ece:	4616      	mov	r6, r2
 8004ed0:	6123      	str	r3, [r4, #16]
 8004ed2:	e7bc      	b.n	8004e4e <_printf_i+0x146>
 8004ed4:	6833      	ldr	r3, [r6, #0]
 8004ed6:	2100      	movs	r1, #0
 8004ed8:	1d1a      	adds	r2, r3, #4
 8004eda:	6032      	str	r2, [r6, #0]
 8004edc:	681e      	ldr	r6, [r3, #0]
 8004ede:	6862      	ldr	r2, [r4, #4]
 8004ee0:	4630      	mov	r0, r6
 8004ee2:	f000 f859 	bl	8004f98 <memchr>
 8004ee6:	b108      	cbz	r0, 8004eec <_printf_i+0x1e4>
 8004ee8:	1b80      	subs	r0, r0, r6
 8004eea:	6060      	str	r0, [r4, #4]
 8004eec:	6863      	ldr	r3, [r4, #4]
 8004eee:	6123      	str	r3, [r4, #16]
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ef6:	e7aa      	b.n	8004e4e <_printf_i+0x146>
 8004ef8:	4632      	mov	r2, r6
 8004efa:	4649      	mov	r1, r9
 8004efc:	4640      	mov	r0, r8
 8004efe:	6923      	ldr	r3, [r4, #16]
 8004f00:	47d0      	blx	sl
 8004f02:	3001      	adds	r0, #1
 8004f04:	d0ad      	beq.n	8004e62 <_printf_i+0x15a>
 8004f06:	6823      	ldr	r3, [r4, #0]
 8004f08:	079b      	lsls	r3, r3, #30
 8004f0a:	d413      	bmi.n	8004f34 <_printf_i+0x22c>
 8004f0c:	68e0      	ldr	r0, [r4, #12]
 8004f0e:	9b03      	ldr	r3, [sp, #12]
 8004f10:	4298      	cmp	r0, r3
 8004f12:	bfb8      	it	lt
 8004f14:	4618      	movlt	r0, r3
 8004f16:	e7a6      	b.n	8004e66 <_printf_i+0x15e>
 8004f18:	2301      	movs	r3, #1
 8004f1a:	4632      	mov	r2, r6
 8004f1c:	4649      	mov	r1, r9
 8004f1e:	4640      	mov	r0, r8
 8004f20:	47d0      	blx	sl
 8004f22:	3001      	adds	r0, #1
 8004f24:	d09d      	beq.n	8004e62 <_printf_i+0x15a>
 8004f26:	3501      	adds	r5, #1
 8004f28:	68e3      	ldr	r3, [r4, #12]
 8004f2a:	9903      	ldr	r1, [sp, #12]
 8004f2c:	1a5b      	subs	r3, r3, r1
 8004f2e:	42ab      	cmp	r3, r5
 8004f30:	dcf2      	bgt.n	8004f18 <_printf_i+0x210>
 8004f32:	e7eb      	b.n	8004f0c <_printf_i+0x204>
 8004f34:	2500      	movs	r5, #0
 8004f36:	f104 0619 	add.w	r6, r4, #25
 8004f3a:	e7f5      	b.n	8004f28 <_printf_i+0x220>
 8004f3c:	080050a3 	.word	0x080050a3
 8004f40:	080050b4 	.word	0x080050b4

08004f44 <memmove>:
 8004f44:	4288      	cmp	r0, r1
 8004f46:	b510      	push	{r4, lr}
 8004f48:	eb01 0402 	add.w	r4, r1, r2
 8004f4c:	d902      	bls.n	8004f54 <memmove+0x10>
 8004f4e:	4284      	cmp	r4, r0
 8004f50:	4623      	mov	r3, r4
 8004f52:	d807      	bhi.n	8004f64 <memmove+0x20>
 8004f54:	1e43      	subs	r3, r0, #1
 8004f56:	42a1      	cmp	r1, r4
 8004f58:	d008      	beq.n	8004f6c <memmove+0x28>
 8004f5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004f62:	e7f8      	b.n	8004f56 <memmove+0x12>
 8004f64:	4601      	mov	r1, r0
 8004f66:	4402      	add	r2, r0
 8004f68:	428a      	cmp	r2, r1
 8004f6a:	d100      	bne.n	8004f6e <memmove+0x2a>
 8004f6c:	bd10      	pop	{r4, pc}
 8004f6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004f72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004f76:	e7f7      	b.n	8004f68 <memmove+0x24>

08004f78 <_sbrk_r>:
 8004f78:	b538      	push	{r3, r4, r5, lr}
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	4d05      	ldr	r5, [pc, #20]	@ (8004f94 <_sbrk_r+0x1c>)
 8004f7e:	4604      	mov	r4, r0
 8004f80:	4608      	mov	r0, r1
 8004f82:	602b      	str	r3, [r5, #0]
 8004f84:	f7fb fec0 	bl	8000d08 <_sbrk>
 8004f88:	1c43      	adds	r3, r0, #1
 8004f8a:	d102      	bne.n	8004f92 <_sbrk_r+0x1a>
 8004f8c:	682b      	ldr	r3, [r5, #0]
 8004f8e:	b103      	cbz	r3, 8004f92 <_sbrk_r+0x1a>
 8004f90:	6023      	str	r3, [r4, #0]
 8004f92:	bd38      	pop	{r3, r4, r5, pc}
 8004f94:	200002e8 	.word	0x200002e8

08004f98 <memchr>:
 8004f98:	4603      	mov	r3, r0
 8004f9a:	b510      	push	{r4, lr}
 8004f9c:	b2c9      	uxtb	r1, r1
 8004f9e:	4402      	add	r2, r0
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	d101      	bne.n	8004faa <memchr+0x12>
 8004fa6:	2000      	movs	r0, #0
 8004fa8:	e003      	b.n	8004fb2 <memchr+0x1a>
 8004faa:	7804      	ldrb	r4, [r0, #0]
 8004fac:	3301      	adds	r3, #1
 8004fae:	428c      	cmp	r4, r1
 8004fb0:	d1f6      	bne.n	8004fa0 <memchr+0x8>
 8004fb2:	bd10      	pop	{r4, pc}

08004fb4 <memcpy>:
 8004fb4:	440a      	add	r2, r1
 8004fb6:	4291      	cmp	r1, r2
 8004fb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004fbc:	d100      	bne.n	8004fc0 <memcpy+0xc>
 8004fbe:	4770      	bx	lr
 8004fc0:	b510      	push	{r4, lr}
 8004fc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004fc6:	4291      	cmp	r1, r2
 8004fc8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004fcc:	d1f9      	bne.n	8004fc2 <memcpy+0xe>
 8004fce:	bd10      	pop	{r4, pc}

08004fd0 <_realloc_r>:
 8004fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fd4:	4607      	mov	r7, r0
 8004fd6:	4614      	mov	r4, r2
 8004fd8:	460d      	mov	r5, r1
 8004fda:	b921      	cbnz	r1, 8004fe6 <_realloc_r+0x16>
 8004fdc:	4611      	mov	r1, r2
 8004fde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004fe2:	f7ff bc3b 	b.w	800485c <_malloc_r>
 8004fe6:	b92a      	cbnz	r2, 8004ff4 <_realloc_r+0x24>
 8004fe8:	f7ff fbce 	bl	8004788 <_free_r>
 8004fec:	4625      	mov	r5, r4
 8004fee:	4628      	mov	r0, r5
 8004ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ff4:	f000 f81a 	bl	800502c <_malloc_usable_size_r>
 8004ff8:	4284      	cmp	r4, r0
 8004ffa:	4606      	mov	r6, r0
 8004ffc:	d802      	bhi.n	8005004 <_realloc_r+0x34>
 8004ffe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005002:	d8f4      	bhi.n	8004fee <_realloc_r+0x1e>
 8005004:	4621      	mov	r1, r4
 8005006:	4638      	mov	r0, r7
 8005008:	f7ff fc28 	bl	800485c <_malloc_r>
 800500c:	4680      	mov	r8, r0
 800500e:	b908      	cbnz	r0, 8005014 <_realloc_r+0x44>
 8005010:	4645      	mov	r5, r8
 8005012:	e7ec      	b.n	8004fee <_realloc_r+0x1e>
 8005014:	42b4      	cmp	r4, r6
 8005016:	4622      	mov	r2, r4
 8005018:	4629      	mov	r1, r5
 800501a:	bf28      	it	cs
 800501c:	4632      	movcs	r2, r6
 800501e:	f7ff ffc9 	bl	8004fb4 <memcpy>
 8005022:	4629      	mov	r1, r5
 8005024:	4638      	mov	r0, r7
 8005026:	f7ff fbaf 	bl	8004788 <_free_r>
 800502a:	e7f1      	b.n	8005010 <_realloc_r+0x40>

0800502c <_malloc_usable_size_r>:
 800502c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005030:	1f18      	subs	r0, r3, #4
 8005032:	2b00      	cmp	r3, #0
 8005034:	bfbc      	itt	lt
 8005036:	580b      	ldrlt	r3, [r1, r0]
 8005038:	18c0      	addlt	r0, r0, r3
 800503a:	4770      	bx	lr

0800503c <_init>:
 800503c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800503e:	bf00      	nop
 8005040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005042:	bc08      	pop	{r3}
 8005044:	469e      	mov	lr, r3
 8005046:	4770      	bx	lr

08005048 <_fini>:
 8005048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800504a:	bf00      	nop
 800504c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800504e:	bc08      	pop	{r3}
 8005050:	469e      	mov	lr, r3
 8005052:	4770      	bx	lr
