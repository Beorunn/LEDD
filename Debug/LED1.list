
LED1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037f8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003904  08003904  00004904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003930  08003930  00005014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003930  08003930  00005014  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003930  08003930  00005014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003930  08003930  00004930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003934  08003934  00004934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08003938  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  20000014  0800394c  00005014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  0800394c  00005124  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000be0f  00000000  00000000  0000503d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b41  00000000  00000000  00010e4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  00012990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000989  00000000  00000000  000135b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c65  00000000  00000000  00013f39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cfd3  00000000  00000000  0002ab9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008691c  00000000  00000000  00037b71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000be48d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032c8  00000000  00000000  000be4d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000040  00000000  00000000  000c1798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	080038ec 	.word	0x080038ec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	080038ec 	.word	0x080038ec

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fcde 	bl	8000b10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f8c4 	bl	80002e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 fa14 	bl	8000584 <MX_GPIO_Init>
  MX_TIM1_Init();
 800015c:	f000 f8fc 	bl	8000358 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000160:	f000 f9e6 	bl	8000530 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000164:	f000 f998 	bl	8000498 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000168:	4856      	ldr	r0, [pc, #344]	@ (80002c4 <main+0x178>)
 800016a:	f001 fd43 	bl	8001bf4 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 800016e:	4856      	ldr	r0, [pc, #344]	@ (80002c8 <main+0x17c>)
 8000170:	f001 fd8a 	bl	8001c88 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8000174:	2100      	movs	r1, #0
 8000176:	4853      	ldr	r0, [pc, #332]	@ (80002c4 <main+0x178>)
 8000178:	f001 fe5e 	bl	8001e38 <HAL_TIM_PWM_Start_IT>
  HAL_UART_Receive_IT(&huart1, (uint8_t*)&Rx, 1);
 800017c:	2201      	movs	r2, #1
 800017e:	4953      	ldr	r1, [pc, #332]	@ (80002cc <main+0x180>)
 8000180:	4853      	ldr	r0, [pc, #332]	@ (80002d0 <main+0x184>)
 8000182:	f002 fe50 	bl	8002e26 <HAL_UART_Receive_IT>
//		  break;
//	  default:
//		  break;
//	  } code sử dụng uart

	  buttonstate = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 8000186:	2108      	movs	r1, #8
 8000188:	4852      	ldr	r0, [pc, #328]	@ (80002d4 <main+0x188>)
 800018a:	f001 f88b 	bl	80012a4 <HAL_GPIO_ReadPin>
 800018e:	4603      	mov	r3, r0
 8000190:	461a      	mov	r2, r3
 8000192:	4b51      	ldr	r3, [pc, #324]	@ (80002d8 <main+0x18c>)
 8000194:	601a      	str	r2, [r3, #0]
	  if(buttonstate == 0 && flag == 0){
 8000196:	4b50      	ldr	r3, [pc, #320]	@ (80002d8 <main+0x18c>)
 8000198:	681b      	ldr	r3, [r3, #0]
 800019a:	2b00      	cmp	r3, #0
 800019c:	d12c      	bne.n	80001f8 <main+0xac>
 800019e:	4b4f      	ldr	r3, [pc, #316]	@ (80002dc <main+0x190>)
 80001a0:	681b      	ldr	r3, [r3, #0]
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	d128      	bne.n	80001f8 <main+0xac>
		  HAL_TIM_Base_Start_IT(&htim2);
 80001a6:	4848      	ldr	r0, [pc, #288]	@ (80002c8 <main+0x17c>)
 80001a8:	f001 fd6e 	bl	8001c88 <HAL_TIM_Base_Start_IT>
		  HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 80001ac:	2100      	movs	r1, #0
 80001ae:	4845      	ldr	r0, [pc, #276]	@ (80002c4 <main+0x178>)
 80001b0:	f001 ff32 	bl	8002018 <HAL_TIM_PWM_Stop_IT>
		  setdelay(3000);
 80001b4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80001b8:	f000 fb14 	bl	80007e4 <setdelay>
		  while(1){
			  buttonstate = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 80001bc:	2108      	movs	r1, #8
 80001be:	4845      	ldr	r0, [pc, #276]	@ (80002d4 <main+0x188>)
 80001c0:	f001 f870 	bl	80012a4 <HAL_GPIO_ReadPin>
 80001c4:	4603      	mov	r3, r0
 80001c6:	461a      	mov	r2, r3
 80001c8:	4b43      	ldr	r3, [pc, #268]	@ (80002d8 <main+0x18c>)
 80001ca:	601a      	str	r2, [r3, #0]
			  if(buttonstate == 1){
 80001cc:	4b42      	ldr	r3, [pc, #264]	@ (80002d8 <main+0x18c>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	2b01      	cmp	r3, #1
 80001d2:	d1f3      	bne.n	80001bc <main+0x70>
				  HAL_Delay(20);
 80001d4:	2014      	movs	r0, #20
 80001d6:	f000 fcfd 	bl	8000bd4 <HAL_Delay>
				  buttonstate = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 80001da:	2108      	movs	r1, #8
 80001dc:	483d      	ldr	r0, [pc, #244]	@ (80002d4 <main+0x188>)
 80001de:	f001 f861 	bl	80012a4 <HAL_GPIO_ReadPin>
 80001e2:	4603      	mov	r3, r0
 80001e4:	461a      	mov	r2, r3
 80001e6:	4b3c      	ldr	r3, [pc, #240]	@ (80002d8 <main+0x18c>)
 80001e8:	601a      	str	r2, [r3, #0]
				  if(buttonstate == 0){
 80001ea:	4b3b      	ldr	r3, [pc, #236]	@ (80002d8 <main+0x18c>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d1e4      	bne.n	80001bc <main+0x70>
					  flag =1;
 80001f2:	4b3a      	ldr	r3, [pc, #232]	@ (80002dc <main+0x190>)
 80001f4:	2201      	movs	r2, #1
 80001f6:	601a      	str	r2, [r3, #0]
			  }
		  }


	  }
	  if (buttonstate == 0 && flag ==1){
 80001f8:	4b37      	ldr	r3, [pc, #220]	@ (80002d8 <main+0x18c>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d129      	bne.n	8000254 <main+0x108>
 8000200:	4b36      	ldr	r3, [pc, #216]	@ (80002dc <main+0x190>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	2b01      	cmp	r3, #1
 8000206:	d125      	bne.n	8000254 <main+0x108>
		  HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000208:	2100      	movs	r1, #0
 800020a:	482e      	ldr	r0, [pc, #184]	@ (80002c4 <main+0x178>)
 800020c:	f001 ff04 	bl	8002018 <HAL_TIM_PWM_Stop_IT>
		  setdelay(1000);
 8000210:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000214:	f000 fae6 	bl	80007e4 <setdelay>

		  while(1){
			  buttonstate = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 8000218:	2108      	movs	r1, #8
 800021a:	482e      	ldr	r0, [pc, #184]	@ (80002d4 <main+0x188>)
 800021c:	f001 f842 	bl	80012a4 <HAL_GPIO_ReadPin>
 8000220:	4603      	mov	r3, r0
 8000222:	461a      	mov	r2, r3
 8000224:	4b2c      	ldr	r3, [pc, #176]	@ (80002d8 <main+0x18c>)
 8000226:	601a      	str	r2, [r3, #0]
			  if(buttonstate == 1){
 8000228:	4b2b      	ldr	r3, [pc, #172]	@ (80002d8 <main+0x18c>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	2b01      	cmp	r3, #1
 800022e:	d1f3      	bne.n	8000218 <main+0xcc>
				  HAL_Delay(20);
 8000230:	2014      	movs	r0, #20
 8000232:	f000 fccf 	bl	8000bd4 <HAL_Delay>
				  buttonstate = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 8000236:	2108      	movs	r1, #8
 8000238:	4826      	ldr	r0, [pc, #152]	@ (80002d4 <main+0x188>)
 800023a:	f001 f833 	bl	80012a4 <HAL_GPIO_ReadPin>
 800023e:	4603      	mov	r3, r0
 8000240:	461a      	mov	r2, r3
 8000242:	4b25      	ldr	r3, [pc, #148]	@ (80002d8 <main+0x18c>)
 8000244:	601a      	str	r2, [r3, #0]
				  if(buttonstate == 0){
 8000246:	4b24      	ldr	r3, [pc, #144]	@ (80002d8 <main+0x18c>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	2b00      	cmp	r3, #0
 800024c:	d1e4      	bne.n	8000218 <main+0xcc>
					  flag =2;
 800024e:	4b23      	ldr	r3, [pc, #140]	@ (80002dc <main+0x190>)
 8000250:	2202      	movs	r2, #2
 8000252:	601a      	str	r2, [r3, #0]

			  }
		  }

	  }
	  if(buttonstate == 0 && flag ==2){
 8000254:	4b20      	ldr	r3, [pc, #128]	@ (80002d8 <main+0x18c>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d194      	bne.n	8000186 <main+0x3a>
 800025c:	4b1f      	ldr	r3, [pc, #124]	@ (80002dc <main+0x190>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	2b02      	cmp	r3, #2
 8000262:	d190      	bne.n	8000186 <main+0x3a>
		  HAL_TIM_Base_Stop_IT(&htim2);
 8000264:	4818      	ldr	r0, [pc, #96]	@ (80002c8 <main+0x17c>)
 8000266:	f001 fd61 	bl	8001d2c <HAL_TIM_Base_Stop_IT>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800026a:	2200      	movs	r2, #0
 800026c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000270:	4818      	ldr	r0, [pc, #96]	@ (80002d4 <main+0x188>)
 8000272:	f001 f82e 	bl	80012d2 <HAL_GPIO_WritePin>
		  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8000276:	2100      	movs	r1, #0
 8000278:	4812      	ldr	r0, [pc, #72]	@ (80002c4 <main+0x178>)
 800027a:	f001 fddd 	bl	8001e38 <HAL_TIM_PWM_Start_IT>
		  mode3();
 800027e:	f000 fa91 	bl	80007a4 <mode3>
		  while(1){
		  			  buttonstate = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 8000282:	2108      	movs	r1, #8
 8000284:	4813      	ldr	r0, [pc, #76]	@ (80002d4 <main+0x188>)
 8000286:	f001 f80d 	bl	80012a4 <HAL_GPIO_ReadPin>
 800028a:	4603      	mov	r3, r0
 800028c:	461a      	mov	r2, r3
 800028e:	4b12      	ldr	r3, [pc, #72]	@ (80002d8 <main+0x18c>)
 8000290:	601a      	str	r2, [r3, #0]
		  			  if(buttonstate == 1){
 8000292:	4b11      	ldr	r3, [pc, #68]	@ (80002d8 <main+0x18c>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	2b01      	cmp	r3, #1
 8000298:	d1f3      	bne.n	8000282 <main+0x136>
		  				  HAL_Delay(20);
 800029a:	2014      	movs	r0, #20
 800029c:	f000 fc9a 	bl	8000bd4 <HAL_Delay>
		  				  buttonstate = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 80002a0:	2108      	movs	r1, #8
 80002a2:	480c      	ldr	r0, [pc, #48]	@ (80002d4 <main+0x188>)
 80002a4:	f000 fffe 	bl	80012a4 <HAL_GPIO_ReadPin>
 80002a8:	4603      	mov	r3, r0
 80002aa:	461a      	mov	r2, r3
 80002ac:	4b0a      	ldr	r3, [pc, #40]	@ (80002d8 <main+0x18c>)
 80002ae:	601a      	str	r2, [r3, #0]
		  				  if(buttonstate == 0){
 80002b0:	4b09      	ldr	r3, [pc, #36]	@ (80002d8 <main+0x18c>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d1e4      	bne.n	8000282 <main+0x136>
			  				  flag =0;
 80002b8:	4b08      	ldr	r3, [pc, #32]	@ (80002dc <main+0x190>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]

			  				  break;
 80002be:	bf00      	nop
	  buttonstate = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 80002c0:	e761      	b.n	8000186 <main+0x3a>
 80002c2:	bf00      	nop
 80002c4:	20000030 	.word	0x20000030
 80002c8:	20000078 	.word	0x20000078
 80002cc:	2000011c 	.word	0x2000011c
 80002d0:	200000c0 	.word	0x200000c0
 80002d4:	40010800 	.word	0x40010800
 80002d8:	20000118 	.word	0x20000118
 80002dc:	20000114 	.word	0x20000114

080002e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b090      	sub	sp, #64	@ 0x40
 80002e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002e6:	f107 0318 	add.w	r3, r7, #24
 80002ea:	2228      	movs	r2, #40	@ 0x28
 80002ec:	2100      	movs	r1, #0
 80002ee:	4618      	mov	r0, r3
 80002f0:	f003 fad0 	bl	8003894 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f4:	1d3b      	adds	r3, r7, #4
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	605a      	str	r2, [r3, #4]
 80002fc:	609a      	str	r2, [r3, #8]
 80002fe:	60da      	str	r2, [r3, #12]
 8000300:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000302:	2302      	movs	r3, #2
 8000304:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000306:	2301      	movs	r3, #1
 8000308:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800030a:	2310      	movs	r3, #16
 800030c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800030e:	2300      	movs	r3, #0
 8000310:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000312:	f107 0318 	add.w	r3, r7, #24
 8000316:	4618      	mov	r0, r3
 8000318:	f001 f80c 	bl	8001334 <HAL_RCC_OscConfig>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000322:	f000 fa6d 	bl	8000800 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000326:	230f      	movs	r3, #15
 8000328:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800032a:	2300      	movs	r3, #0
 800032c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800032e:	2300      	movs	r3, #0
 8000330:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000332:	2300      	movs	r3, #0
 8000334:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000336:	2300      	movs	r3, #0
 8000338:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800033a:	1d3b      	adds	r3, r7, #4
 800033c:	2100      	movs	r1, #0
 800033e:	4618      	mov	r0, r3
 8000340:	f001 fa7a 	bl	8001838 <HAL_RCC_ClockConfig>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800034a:	f000 fa59 	bl	8000800 <Error_Handler>
  }
}
 800034e:	bf00      	nop
 8000350:	3740      	adds	r7, #64	@ 0x40
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
	...

08000358 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b096      	sub	sp, #88	@ 0x58
 800035c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800035e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]
 8000366:	605a      	str	r2, [r3, #4]
 8000368:	609a      	str	r2, [r3, #8]
 800036a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800036c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000370:	2200      	movs	r2, #0
 8000372:	601a      	str	r2, [r3, #0]
 8000374:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000376:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800037a:	2200      	movs	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
 800037e:	605a      	str	r2, [r3, #4]
 8000380:	609a      	str	r2, [r3, #8]
 8000382:	60da      	str	r2, [r3, #12]
 8000384:	611a      	str	r2, [r3, #16]
 8000386:	615a      	str	r2, [r3, #20]
 8000388:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	2220      	movs	r2, #32
 800038e:	2100      	movs	r1, #0
 8000390:	4618      	mov	r0, r3
 8000392:	f003 fa7f 	bl	8003894 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000396:	4b3e      	ldr	r3, [pc, #248]	@ (8000490 <MX_TIM1_Init+0x138>)
 8000398:	4a3e      	ldr	r2, [pc, #248]	@ (8000494 <MX_TIM1_Init+0x13c>)
 800039a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8-1;
 800039c:	4b3c      	ldr	r3, [pc, #240]	@ (8000490 <MX_TIM1_Init+0x138>)
 800039e:	2207      	movs	r2, #7
 80003a0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003a2:	4b3b      	ldr	r3, [pc, #236]	@ (8000490 <MX_TIM1_Init+0x138>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80003a8:	4b39      	ldr	r3, [pc, #228]	@ (8000490 <MX_TIM1_Init+0x138>)
 80003aa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80003ae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003b0:	4b37      	ldr	r3, [pc, #220]	@ (8000490 <MX_TIM1_Init+0x138>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003b6:	4b36      	ldr	r3, [pc, #216]	@ (8000490 <MX_TIM1_Init+0x138>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003bc:	4b34      	ldr	r3, [pc, #208]	@ (8000490 <MX_TIM1_Init+0x138>)
 80003be:	2280      	movs	r2, #128	@ 0x80
 80003c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80003c2:	4833      	ldr	r0, [pc, #204]	@ (8000490 <MX_TIM1_Init+0x138>)
 80003c4:	f001 fbc6 	bl	8001b54 <HAL_TIM_Base_Init>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80003ce:	f000 fa17 	bl	8000800 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80003d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003d8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80003dc:	4619      	mov	r1, r3
 80003de:	482c      	ldr	r0, [pc, #176]	@ (8000490 <MX_TIM1_Init+0x138>)
 80003e0:	f002 f87e 	bl	80024e0 <HAL_TIM_ConfigClockSource>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80003ea:	f000 fa09 	bl	8000800 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80003ee:	4828      	ldr	r0, [pc, #160]	@ (8000490 <MX_TIM1_Init+0x138>)
 80003f0:	f001 fcca 	bl	8001d88 <HAL_TIM_PWM_Init>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80003fa:	f000 fa01 	bl	8000800 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003fe:	2300      	movs	r3, #0
 8000400:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000402:	2300      	movs	r3, #0
 8000404:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000406:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800040a:	4619      	mov	r1, r3
 800040c:	4820      	ldr	r0, [pc, #128]	@ (8000490 <MX_TIM1_Init+0x138>)
 800040e:	f002 fbf9 	bl	8002c04 <HAL_TIMEx_MasterConfigSynchronization>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d001      	beq.n	800041c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000418:	f000 f9f2 	bl	8000800 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800041c:	2360      	movs	r3, #96	@ 0x60
 800041e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000420:	2300      	movs	r3, #0
 8000422:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000424:	2300      	movs	r3, #0
 8000426:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000428:	2300      	movs	r3, #0
 800042a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800042c:	2300      	movs	r3, #0
 800042e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000430:	2300      	movs	r3, #0
 8000432:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000434:	2300      	movs	r3, #0
 8000436:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000438:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800043c:	2200      	movs	r2, #0
 800043e:	4619      	mov	r1, r3
 8000440:	4813      	ldr	r0, [pc, #76]	@ (8000490 <MX_TIM1_Init+0x138>)
 8000442:	f001 ff8b 	bl	800235c <HAL_TIM_PWM_ConfigChannel>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d001      	beq.n	8000450 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800044c:	f000 f9d8 	bl	8000800 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000450:	2300      	movs	r3, #0
 8000452:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000454:	2300      	movs	r3, #0
 8000456:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000458:	2300      	movs	r3, #0
 800045a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800045c:	2300      	movs	r3, #0
 800045e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000460:	2300      	movs	r3, #0
 8000462:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000464:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000468:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800046a:	2300      	movs	r3, #0
 800046c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800046e:	1d3b      	adds	r3, r7, #4
 8000470:	4619      	mov	r1, r3
 8000472:	4807      	ldr	r0, [pc, #28]	@ (8000490 <MX_TIM1_Init+0x138>)
 8000474:	f002 fc24 	bl	8002cc0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d001      	beq.n	8000482 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800047e:	f000 f9bf 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000482:	4803      	ldr	r0, [pc, #12]	@ (8000490 <MX_TIM1_Init+0x138>)
 8000484:	f000 fa3c 	bl	8000900 <HAL_TIM_MspPostInit>

}
 8000488:	bf00      	nop
 800048a:	3758      	adds	r7, #88	@ 0x58
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	20000030 	.word	0x20000030
 8000494:	40012c00 	.word	0x40012c00

08000498 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b086      	sub	sp, #24
 800049c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800049e:	f107 0308 	add.w	r3, r7, #8
 80004a2:	2200      	movs	r2, #0
 80004a4:	601a      	str	r2, [r3, #0]
 80004a6:	605a      	str	r2, [r3, #4]
 80004a8:	609a      	str	r2, [r3, #8]
 80004aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004ac:	463b      	mov	r3, r7
 80004ae:	2200      	movs	r2, #0
 80004b0:	601a      	str	r2, [r3, #0]
 80004b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004b4:	4b1d      	ldr	r3, [pc, #116]	@ (800052c <MX_TIM2_Init+0x94>)
 80004b6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 80004bc:	4b1b      	ldr	r3, [pc, #108]	@ (800052c <MX_TIM2_Init+0x94>)
 80004be:	2207      	movs	r2, #7
 80004c0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004c2:	4b1a      	ldr	r3, [pc, #104]	@ (800052c <MX_TIM2_Init+0x94>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80004c8:	4b18      	ldr	r3, [pc, #96]	@ (800052c <MX_TIM2_Init+0x94>)
 80004ca:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80004ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004d0:	4b16      	ldr	r3, [pc, #88]	@ (800052c <MX_TIM2_Init+0x94>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80004d6:	4b15      	ldr	r3, [pc, #84]	@ (800052c <MX_TIM2_Init+0x94>)
 80004d8:	2280      	movs	r2, #128	@ 0x80
 80004da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80004dc:	4813      	ldr	r0, [pc, #76]	@ (800052c <MX_TIM2_Init+0x94>)
 80004de:	f001 fb39 	bl	8001b54 <HAL_TIM_Base_Init>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80004e8:	f000 f98a 	bl	8000800 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80004f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004f2:	f107 0308 	add.w	r3, r7, #8
 80004f6:	4619      	mov	r1, r3
 80004f8:	480c      	ldr	r0, [pc, #48]	@ (800052c <MX_TIM2_Init+0x94>)
 80004fa:	f001 fff1 	bl	80024e0 <HAL_TIM_ConfigClockSource>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d001      	beq.n	8000508 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000504:	f000 f97c 	bl	8000800 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000508:	2300      	movs	r3, #0
 800050a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800050c:	2300      	movs	r3, #0
 800050e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000510:	463b      	mov	r3, r7
 8000512:	4619      	mov	r1, r3
 8000514:	4805      	ldr	r0, [pc, #20]	@ (800052c <MX_TIM2_Init+0x94>)
 8000516:	f002 fb75 	bl	8002c04 <HAL_TIMEx_MasterConfigSynchronization>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000520:	f000 f96e 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000524:	bf00      	nop
 8000526:	3718      	adds	r7, #24
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	20000078 	.word	0x20000078

08000530 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000534:	4b11      	ldr	r3, [pc, #68]	@ (800057c <MX_USART1_UART_Init+0x4c>)
 8000536:	4a12      	ldr	r2, [pc, #72]	@ (8000580 <MX_USART1_UART_Init+0x50>)
 8000538:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800053a:	4b10      	ldr	r3, [pc, #64]	@ (800057c <MX_USART1_UART_Init+0x4c>)
 800053c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000540:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000542:	4b0e      	ldr	r3, [pc, #56]	@ (800057c <MX_USART1_UART_Init+0x4c>)
 8000544:	2200      	movs	r2, #0
 8000546:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000548:	4b0c      	ldr	r3, [pc, #48]	@ (800057c <MX_USART1_UART_Init+0x4c>)
 800054a:	2200      	movs	r2, #0
 800054c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800054e:	4b0b      	ldr	r3, [pc, #44]	@ (800057c <MX_USART1_UART_Init+0x4c>)
 8000550:	2200      	movs	r2, #0
 8000552:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000554:	4b09      	ldr	r3, [pc, #36]	@ (800057c <MX_USART1_UART_Init+0x4c>)
 8000556:	220c      	movs	r2, #12
 8000558:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800055a:	4b08      	ldr	r3, [pc, #32]	@ (800057c <MX_USART1_UART_Init+0x4c>)
 800055c:	2200      	movs	r2, #0
 800055e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000560:	4b06      	ldr	r3, [pc, #24]	@ (800057c <MX_USART1_UART_Init+0x4c>)
 8000562:	2200      	movs	r2, #0
 8000564:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000566:	4805      	ldr	r0, [pc, #20]	@ (800057c <MX_USART1_UART_Init+0x4c>)
 8000568:	f002 fc0d 	bl	8002d86 <HAL_UART_Init>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000572:	f000 f945 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	200000c0 	.word	0x200000c0
 8000580:	40013800 	.word	0x40013800

08000584 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b088      	sub	sp, #32
 8000588:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058a:	f107 0310 	add.w	r3, r7, #16
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000598:	4b2e      	ldr	r3, [pc, #184]	@ (8000654 <MX_GPIO_Init+0xd0>)
 800059a:	699b      	ldr	r3, [r3, #24]
 800059c:	4a2d      	ldr	r2, [pc, #180]	@ (8000654 <MX_GPIO_Init+0xd0>)
 800059e:	f043 0310 	orr.w	r3, r3, #16
 80005a2:	6193      	str	r3, [r2, #24]
 80005a4:	4b2b      	ldr	r3, [pc, #172]	@ (8000654 <MX_GPIO_Init+0xd0>)
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	f003 0310 	and.w	r3, r3, #16
 80005ac:	60fb      	str	r3, [r7, #12]
 80005ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005b0:	4b28      	ldr	r3, [pc, #160]	@ (8000654 <MX_GPIO_Init+0xd0>)
 80005b2:	699b      	ldr	r3, [r3, #24]
 80005b4:	4a27      	ldr	r2, [pc, #156]	@ (8000654 <MX_GPIO_Init+0xd0>)
 80005b6:	f043 0320 	orr.w	r3, r3, #32
 80005ba:	6193      	str	r3, [r2, #24]
 80005bc:	4b25      	ldr	r3, [pc, #148]	@ (8000654 <MX_GPIO_Init+0xd0>)
 80005be:	699b      	ldr	r3, [r3, #24]
 80005c0:	f003 0320 	and.w	r3, r3, #32
 80005c4:	60bb      	str	r3, [r7, #8]
 80005c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c8:	4b22      	ldr	r3, [pc, #136]	@ (8000654 <MX_GPIO_Init+0xd0>)
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	4a21      	ldr	r2, [pc, #132]	@ (8000654 <MX_GPIO_Init+0xd0>)
 80005ce:	f043 0304 	orr.w	r3, r3, #4
 80005d2:	6193      	str	r3, [r2, #24]
 80005d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000654 <MX_GPIO_Init+0xd0>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	f003 0304 	and.w	r3, r3, #4
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80005e0:	2200      	movs	r2, #0
 80005e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005e6:	481c      	ldr	r0, [pc, #112]	@ (8000658 <MX_GPIO_Init+0xd4>)
 80005e8:	f000 fe73 	bl	80012d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80005ec:	2200      	movs	r2, #0
 80005ee:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80005f2:	481a      	ldr	r0, [pc, #104]	@ (800065c <MX_GPIO_Init+0xd8>)
 80005f4:	f000 fe6d 	bl	80012d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80005f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fe:	2301      	movs	r3, #1
 8000600:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000602:	2300      	movs	r3, #0
 8000604:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000606:	2302      	movs	r3, #2
 8000608:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800060a:	f107 0310 	add.w	r3, r7, #16
 800060e:	4619      	mov	r1, r3
 8000610:	4811      	ldr	r0, [pc, #68]	@ (8000658 <MX_GPIO_Init+0xd4>)
 8000612:	f000 fcc3 	bl	8000f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000616:	2308      	movs	r3, #8
 8000618:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800061a:	2300      	movs	r3, #0
 800061c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800061e:	2301      	movs	r3, #1
 8000620:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000622:	f107 0310 	add.w	r3, r7, #16
 8000626:	4619      	mov	r1, r3
 8000628:	480c      	ldr	r0, [pc, #48]	@ (800065c <MX_GPIO_Init+0xd8>)
 800062a:	f000 fcb7 	bl	8000f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800062e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000632:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000634:	2301      	movs	r3, #1
 8000636:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000638:	2300      	movs	r3, #0
 800063a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063c:	2302      	movs	r3, #2
 800063e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000640:	f107 0310 	add.w	r3, r7, #16
 8000644:	4619      	mov	r1, r3
 8000646:	4805      	ldr	r0, [pc, #20]	@ (800065c <MX_GPIO_Init+0xd8>)
 8000648:	f000 fca8 	bl	8000f9c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800064c:	bf00      	nop
 800064e:	3720      	adds	r7, #32
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40021000 	.word	0x40021000
 8000658:	40011000 	.word	0x40011000
 800065c:	40010800 	.word	0x40010800

08000660 <HAL_TIM_PWM_PulseFinishedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1){
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a12      	ldr	r2, [pc, #72]	@ (80006b8 <HAL_TIM_PWM_PulseFinishedCallback+0x58>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d11d      	bne.n	80006ae <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
		counter ++;
 8000672:	4b12      	ldr	r3, [pc, #72]	@ (80006bc <HAL_TIM_PWM_PulseFinishedCallback+0x5c>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	3301      	adds	r3, #1
 8000678:	4a10      	ldr	r2, [pc, #64]	@ (80006bc <HAL_TIM_PWM_PulseFinishedCallback+0x5c>)
 800067a:	6013      	str	r3, [r2, #0]
		if(counter == 50){
 800067c:	4b0f      	ldr	r3, [pc, #60]	@ (80006bc <HAL_TIM_PWM_PulseFinishedCallback+0x5c>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2b32      	cmp	r3, #50	@ 0x32
 8000682:	d10c      	bne.n	800069e <HAL_TIM_PWM_PulseFinishedCallback+0x3e>
			counter=0;
 8000684:	4b0d      	ldr	r3, [pc, #52]	@ (80006bc <HAL_TIM_PWM_PulseFinishedCallback+0x5c>)
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
			pulse+=10;
 800068a:	4b0d      	ldr	r3, [pc, #52]	@ (80006c0 <HAL_TIM_PWM_PulseFinishedCallback+0x60>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	330a      	adds	r3, #10
 8000690:	4a0b      	ldr	r2, [pc, #44]	@ (80006c0 <HAL_TIM_PWM_PulseFinishedCallback+0x60>)
 8000692:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse);
 8000694:	4b0a      	ldr	r3, [pc, #40]	@ (80006c0 <HAL_TIM_PWM_PulseFinishedCallback+0x60>)
 8000696:	681a      	ldr	r2, [r3, #0]
 8000698:	4b0a      	ldr	r3, [pc, #40]	@ (80006c4 <HAL_TIM_PWM_PulseFinishedCallback+0x64>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	635a      	str	r2, [r3, #52]	@ 0x34
		}
		if(pulse >= 1000){
 800069e:	4b08      	ldr	r3, [pc, #32]	@ (80006c0 <HAL_TIM_PWM_PulseFinishedCallback+0x60>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80006a6:	db02      	blt.n	80006ae <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
			pulse = 0;
 80006a8:	4b05      	ldr	r3, [pc, #20]	@ (80006c0 <HAL_TIM_PWM_PulseFinishedCallback+0x60>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]

		}
	}
}
 80006ae:	bf00      	nop
 80006b0:	370c      	adds	r7, #12
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bc80      	pop	{r7}
 80006b6:	4770      	bx	lr
 80006b8:	40012c00 	.word	0x40012c00
 80006bc:	2000010c 	.word	0x2000010c
 80006c0:	20000108 	.word	0x20000108
 80006c4:	20000030 	.word	0x20000030

080006c8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80006d8:	d112      	bne.n	8000700 <HAL_TIM_PeriodElapsedCallback+0x38>
		counter2++;
 80006da:	4b0b      	ldr	r3, [pc, #44]	@ (8000708 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	3301      	adds	r3, #1
 80006e0:	4a09      	ldr	r2, [pc, #36]	@ (8000708 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80006e2:	6013      	str	r3, [r2, #0]
//		if(buttonstate == 0 && flag ==0)
//			flag+=1;
//		else if(buttonstate == 0 && flag ==1 )
//			flag =0;

		if(counter2 >= delay){
 80006e4:	4b08      	ldr	r3, [pc, #32]	@ (8000708 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	4b08      	ldr	r3, [pc, #32]	@ (800070c <HAL_TIM_PeriodElapsedCallback+0x44>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	db07      	blt.n	8000700 <HAL_TIM_PeriodElapsedCallback+0x38>
			counter2=0;
 80006f0:	4b05      	ldr	r3, [pc, #20]	@ (8000708 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11);
 80006f6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006fa:	4805      	ldr	r0, [pc, #20]	@ (8000710 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80006fc:	f000 fe01 	bl	8001302 <HAL_GPIO_TogglePin>
		}
	}
}
 8000700:	bf00      	nop
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20000110 	.word	0x20000110
 800070c:	20000000 	.word	0x20000000
 8000710:	40010800 	.word	0x40010800

08000714 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
	if( huart->Instance ==huart1.Instance){
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681a      	ldr	r2, [r3, #0]
 8000720:	4b1b      	ldr	r3, [pc, #108]	@ (8000790 <HAL_UART_RxCpltCallback+0x7c>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	429a      	cmp	r2, r3
 8000726:	d12f      	bne.n	8000788 <HAL_UART_RxCpltCallback+0x74>
		switch(Rx){
 8000728:	4b1a      	ldr	r3, [pc, #104]	@ (8000794 <HAL_UART_RxCpltCallback+0x80>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b33      	cmp	r3, #51	@ 0x33
 800072e:	d01e      	beq.n	800076e <HAL_UART_RxCpltCallback+0x5a>
 8000730:	2b33      	cmp	r3, #51	@ 0x33
 8000732:	dc23      	bgt.n	800077c <HAL_UART_RxCpltCallback+0x68>
 8000734:	2b31      	cmp	r3, #49	@ 0x31
 8000736:	d002      	beq.n	800073e <HAL_UART_RxCpltCallback+0x2a>
 8000738:	2b32      	cmp	r3, #50	@ 0x32
 800073a:	d00c      	beq.n	8000756 <HAL_UART_RxCpltCallback+0x42>
		case '3':

			mode = 3;
			HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
		default:
			break;
 800073c:	e01e      	b.n	800077c <HAL_UART_RxCpltCallback+0x68>
			  HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 800073e:	2100      	movs	r1, #0
 8000740:	4815      	ldr	r0, [pc, #84]	@ (8000798 <HAL_UART_RxCpltCallback+0x84>)
 8000742:	f001 fc69 	bl	8002018 <HAL_TIM_PWM_Stop_IT>
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000746:	4b15      	ldr	r3, [pc, #84]	@ (800079c <HAL_UART_RxCpltCallback+0x88>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	2200      	movs	r2, #0
 800074c:	625a      	str	r2, [r3, #36]	@ 0x24
			mode = 1;
 800074e:	4b14      	ldr	r3, [pc, #80]	@ (80007a0 <HAL_UART_RxCpltCallback+0x8c>)
 8000750:	2201      	movs	r2, #1
 8000752:	701a      	strb	r2, [r3, #0]
			break;
 8000754:	e013      	b.n	800077e <HAL_UART_RxCpltCallback+0x6a>
			  HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000756:	2100      	movs	r1, #0
 8000758:	480f      	ldr	r0, [pc, #60]	@ (8000798 <HAL_UART_RxCpltCallback+0x84>)
 800075a:	f001 fc5d 	bl	8002018 <HAL_TIM_PWM_Stop_IT>
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 800075e:	4b0f      	ldr	r3, [pc, #60]	@ (800079c <HAL_UART_RxCpltCallback+0x88>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	2200      	movs	r2, #0
 8000764:	625a      	str	r2, [r3, #36]	@ 0x24
			mode = 2;
 8000766:	4b0e      	ldr	r3, [pc, #56]	@ (80007a0 <HAL_UART_RxCpltCallback+0x8c>)
 8000768:	2202      	movs	r2, #2
 800076a:	701a      	strb	r2, [r3, #0]
			break;
 800076c:	e007      	b.n	800077e <HAL_UART_RxCpltCallback+0x6a>
			mode = 3;
 800076e:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <HAL_UART_RxCpltCallback+0x8c>)
 8000770:	2203      	movs	r2, #3
 8000772:	701a      	strb	r2, [r3, #0]
			HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8000774:	2100      	movs	r1, #0
 8000776:	4808      	ldr	r0, [pc, #32]	@ (8000798 <HAL_UART_RxCpltCallback+0x84>)
 8000778:	f001 fb5e 	bl	8001e38 <HAL_TIM_PWM_Start_IT>
			break;
 800077c:	bf00      	nop
		}
		HAL_UART_Receive_IT(&huart1, (uint8_t*)&Rx, 1);
 800077e:	2201      	movs	r2, #1
 8000780:	4904      	ldr	r1, [pc, #16]	@ (8000794 <HAL_UART_RxCpltCallback+0x80>)
 8000782:	4803      	ldr	r0, [pc, #12]	@ (8000790 <HAL_UART_RxCpltCallback+0x7c>)
 8000784:	f002 fb4f 	bl	8002e26 <HAL_UART_Receive_IT>
	}

}
 8000788:	bf00      	nop
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	200000c0 	.word	0x200000c0
 8000794:	2000011c 	.word	0x2000011c
 8000798:	20000030 	.word	0x20000030
 800079c:	20000078 	.word	0x20000078
 80007a0:	20000004 	.word	0x20000004

080007a4 <mode3>:
void mode3(){
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
	  if(pulse >= 1000) {
 80007a8:	4b0c      	ldr	r3, [pc, #48]	@ (80007dc <mode3+0x38>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80007b0:	db05      	blt.n	80007be <mode3+0x1a>
		  pulse =0;
 80007b2:	4b0a      	ldr	r3, [pc, #40]	@ (80007dc <mode3+0x38>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
		  HAL_Delay(20);
 80007b8:	2014      	movs	r0, #20
 80007ba:	f000 fa0b 	bl	8000bd4 <HAL_Delay>
	  }
	  pulse+=10;
 80007be:	4b07      	ldr	r3, [pc, #28]	@ (80007dc <mode3+0x38>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	330a      	adds	r3, #10
 80007c4:	4a05      	ldr	r2, [pc, #20]	@ (80007dc <mode3+0x38>)
 80007c6:	6013      	str	r3, [r2, #0]
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1 , pulse );
 80007c8:	4b04      	ldr	r3, [pc, #16]	@ (80007dc <mode3+0x38>)
 80007ca:	681a      	ldr	r2, [r3, #0]
 80007cc:	4b04      	ldr	r3, [pc, #16]	@ (80007e0 <mode3+0x3c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	635a      	str	r2, [r3, #52]	@ 0x34
	  HAL_Delay(20);
 80007d2:	2014      	movs	r0, #20
 80007d4:	f000 f9fe 	bl	8000bd4 <HAL_Delay>
}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000108 	.word	0x20000108
 80007e0:	20000030 	.word	0x20000030

080007e4 <setdelay>:
		  __HAL_TIM_SET_COUNTER(&htim2, 0);
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11 );
	  }

}
void setdelay( int time){
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
	delay = time;
 80007ec:	4a03      	ldr	r2, [pc, #12]	@ (80007fc <setdelay+0x18>)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	6013      	str	r3, [r2, #0]
}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr
 80007fc:	20000000 	.word	0x20000000

08000800 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000804:	b672      	cpsid	i
}
 8000806:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000808:	bf00      	nop
 800080a:	e7fd      	b.n	8000808 <Error_Handler+0x8>

0800080c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800080c:	b480      	push	{r7}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000812:	4b15      	ldr	r3, [pc, #84]	@ (8000868 <HAL_MspInit+0x5c>)
 8000814:	699b      	ldr	r3, [r3, #24]
 8000816:	4a14      	ldr	r2, [pc, #80]	@ (8000868 <HAL_MspInit+0x5c>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	6193      	str	r3, [r2, #24]
 800081e:	4b12      	ldr	r3, [pc, #72]	@ (8000868 <HAL_MspInit+0x5c>)
 8000820:	699b      	ldr	r3, [r3, #24]
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	60bb      	str	r3, [r7, #8]
 8000828:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800082a:	4b0f      	ldr	r3, [pc, #60]	@ (8000868 <HAL_MspInit+0x5c>)
 800082c:	69db      	ldr	r3, [r3, #28]
 800082e:	4a0e      	ldr	r2, [pc, #56]	@ (8000868 <HAL_MspInit+0x5c>)
 8000830:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000834:	61d3      	str	r3, [r2, #28]
 8000836:	4b0c      	ldr	r3, [pc, #48]	@ (8000868 <HAL_MspInit+0x5c>)
 8000838:	69db      	ldr	r3, [r3, #28]
 800083a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000842:	4b0a      	ldr	r3, [pc, #40]	@ (800086c <HAL_MspInit+0x60>)
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	4a04      	ldr	r2, [pc, #16]	@ (800086c <HAL_MspInit+0x60>)
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085e:	bf00      	nop
 8000860:	3714      	adds	r7, #20
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr
 8000868:	40021000 	.word	0x40021000
 800086c:	40010000 	.word	0x40010000

08000870 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a1e      	ldr	r2, [pc, #120]	@ (80008f8 <HAL_TIM_Base_MspInit+0x88>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d11c      	bne.n	80008bc <HAL_TIM_Base_MspInit+0x4c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000882:	4b1e      	ldr	r3, [pc, #120]	@ (80008fc <HAL_TIM_Base_MspInit+0x8c>)
 8000884:	699b      	ldr	r3, [r3, #24]
 8000886:	4a1d      	ldr	r2, [pc, #116]	@ (80008fc <HAL_TIM_Base_MspInit+0x8c>)
 8000888:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800088c:	6193      	str	r3, [r2, #24]
 800088e:	4b1b      	ldr	r3, [pc, #108]	@ (80008fc <HAL_TIM_Base_MspInit+0x8c>)
 8000890:	699b      	ldr	r3, [r3, #24]
 8000892:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800089a:	2200      	movs	r2, #0
 800089c:	2100      	movs	r1, #0
 800089e:	2019      	movs	r0, #25
 80008a0:	f000 fa93 	bl	8000dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80008a4:	2019      	movs	r0, #25
 80008a6:	f000 faac 	bl	8000e02 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2100      	movs	r1, #0
 80008ae:	201b      	movs	r0, #27
 80008b0:	f000 fa8b 	bl	8000dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80008b4:	201b      	movs	r0, #27
 80008b6:	f000 faa4 	bl	8000e02 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 80008ba:	e018      	b.n	80008ee <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM2)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80008c4:	d113      	bne.n	80008ee <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008c6:	4b0d      	ldr	r3, [pc, #52]	@ (80008fc <HAL_TIM_Base_MspInit+0x8c>)
 80008c8:	69db      	ldr	r3, [r3, #28]
 80008ca:	4a0c      	ldr	r2, [pc, #48]	@ (80008fc <HAL_TIM_Base_MspInit+0x8c>)
 80008cc:	f043 0301 	orr.w	r3, r3, #1
 80008d0:	61d3      	str	r3, [r2, #28]
 80008d2:	4b0a      	ldr	r3, [pc, #40]	@ (80008fc <HAL_TIM_Base_MspInit+0x8c>)
 80008d4:	69db      	ldr	r3, [r3, #28]
 80008d6:	f003 0301 	and.w	r3, r3, #1
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80008de:	2200      	movs	r2, #0
 80008e0:	2100      	movs	r1, #0
 80008e2:	201c      	movs	r0, #28
 80008e4:	f000 fa71 	bl	8000dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80008e8:	201c      	movs	r0, #28
 80008ea:	f000 fa8a 	bl	8000e02 <HAL_NVIC_EnableIRQ>
}
 80008ee:	bf00      	nop
 80008f0:	3710      	adds	r7, #16
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40012c00 	.word	0x40012c00
 80008fc:	40021000 	.word	0x40021000

08000900 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b088      	sub	sp, #32
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000908:	f107 0310 	add.w	r3, r7, #16
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4a10      	ldr	r2, [pc, #64]	@ (800095c <HAL_TIM_MspPostInit+0x5c>)
 800091c:	4293      	cmp	r3, r2
 800091e:	d118      	bne.n	8000952 <HAL_TIM_MspPostInit+0x52>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000920:	4b0f      	ldr	r3, [pc, #60]	@ (8000960 <HAL_TIM_MspPostInit+0x60>)
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	4a0e      	ldr	r2, [pc, #56]	@ (8000960 <HAL_TIM_MspPostInit+0x60>)
 8000926:	f043 0304 	orr.w	r3, r3, #4
 800092a:	6193      	str	r3, [r2, #24]
 800092c:	4b0c      	ldr	r3, [pc, #48]	@ (8000960 <HAL_TIM_MspPostInit+0x60>)
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	f003 0304 	and.w	r3, r3, #4
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000938:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800093c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093e:	2302      	movs	r3, #2
 8000940:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000942:	2302      	movs	r3, #2
 8000944:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000946:	f107 0310 	add.w	r3, r7, #16
 800094a:	4619      	mov	r1, r3
 800094c:	4805      	ldr	r0, [pc, #20]	@ (8000964 <HAL_TIM_MspPostInit+0x64>)
 800094e:	f000 fb25 	bl	8000f9c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000952:	bf00      	nop
 8000954:	3720      	adds	r7, #32
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40012c00 	.word	0x40012c00
 8000960:	40021000 	.word	0x40021000
 8000964:	40010800 	.word	0x40010800

08000968 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b088      	sub	sp, #32
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000970:	f107 0310 	add.w	r3, r7, #16
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a20      	ldr	r2, [pc, #128]	@ (8000a04 <HAL_UART_MspInit+0x9c>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d139      	bne.n	80009fc <HAL_UART_MspInit+0x94>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000988:	4b1f      	ldr	r3, [pc, #124]	@ (8000a08 <HAL_UART_MspInit+0xa0>)
 800098a:	699b      	ldr	r3, [r3, #24]
 800098c:	4a1e      	ldr	r2, [pc, #120]	@ (8000a08 <HAL_UART_MspInit+0xa0>)
 800098e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000992:	6193      	str	r3, [r2, #24]
 8000994:	4b1c      	ldr	r3, [pc, #112]	@ (8000a08 <HAL_UART_MspInit+0xa0>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a0:	4b19      	ldr	r3, [pc, #100]	@ (8000a08 <HAL_UART_MspInit+0xa0>)
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	4a18      	ldr	r2, [pc, #96]	@ (8000a08 <HAL_UART_MspInit+0xa0>)
 80009a6:	f043 0304 	orr.w	r3, r3, #4
 80009aa:	6193      	str	r3, [r2, #24]
 80009ac:	4b16      	ldr	r3, [pc, #88]	@ (8000a08 <HAL_UART_MspInit+0xa0>)
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	f003 0304 	and.w	r3, r3, #4
 80009b4:	60bb      	str	r3, [r7, #8]
 80009b6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009be:	2302      	movs	r3, #2
 80009c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009c2:	2303      	movs	r3, #3
 80009c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c6:	f107 0310 	add.w	r3, r7, #16
 80009ca:	4619      	mov	r1, r3
 80009cc:	480f      	ldr	r0, [pc, #60]	@ (8000a0c <HAL_UART_MspInit+0xa4>)
 80009ce:	f000 fae5 	bl	8000f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d8:	2300      	movs	r3, #0
 80009da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e0:	f107 0310 	add.w	r3, r7, #16
 80009e4:	4619      	mov	r1, r3
 80009e6:	4809      	ldr	r0, [pc, #36]	@ (8000a0c <HAL_UART_MspInit+0xa4>)
 80009e8:	f000 fad8 	bl	8000f9c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80009ec:	2200      	movs	r2, #0
 80009ee:	2100      	movs	r1, #0
 80009f0:	2025      	movs	r0, #37	@ 0x25
 80009f2:	f000 f9ea 	bl	8000dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009f6:	2025      	movs	r0, #37	@ 0x25
 80009f8:	f000 fa03 	bl	8000e02 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80009fc:	bf00      	nop
 80009fe:	3720      	adds	r7, #32
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40013800 	.word	0x40013800
 8000a08:	40021000 	.word	0x40021000
 8000a0c:	40010800 	.word	0x40010800

08000a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <NMI_Handler+0x4>

08000a18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a1c:	bf00      	nop
 8000a1e:	e7fd      	b.n	8000a1c <HardFault_Handler+0x4>

08000a20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <MemManage_Handler+0x4>

08000a28 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a2c:	bf00      	nop
 8000a2e:	e7fd      	b.n	8000a2c <BusFault_Handler+0x4>

08000a30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a34:	bf00      	nop
 8000a36:	e7fd      	b.n	8000a34 <UsageFault_Handler+0x4>

08000a38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr

08000a44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bc80      	pop	{r7}
 8000a4e:	4770      	bx	lr

08000a50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bc80      	pop	{r7}
 8000a5a:	4770      	bx	lr

08000a5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a60:	f000 f89c 	bl	8000b9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a64:	bf00      	nop
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a6c:	4802      	ldr	r0, [pc, #8]	@ (8000a78 <TIM1_UP_IRQHandler+0x10>)
 8000a6e:	f001 fb85 	bl	800217c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000030 	.word	0x20000030

08000a7c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a80:	4802      	ldr	r0, [pc, #8]	@ (8000a8c <TIM1_CC_IRQHandler+0x10>)
 8000a82:	f001 fb7b 	bl	800217c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000030 	.word	0x20000030

08000a90 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a94:	4802      	ldr	r0, [pc, #8]	@ (8000aa0 <TIM2_IRQHandler+0x10>)
 8000a96:	f001 fb71 	bl	800217c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000078 	.word	0x20000078

08000aa4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000aa8:	4802      	ldr	r0, [pc, #8]	@ (8000ab4 <USART1_IRQHandler+0x10>)
 8000aaa:	f002 f9e1 	bl	8002e70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	200000c0 	.word	0x200000c0

08000ab8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bc80      	pop	{r7}
 8000ac2:	4770      	bx	lr

08000ac4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ac4:	f7ff fff8 	bl	8000ab8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ac8:	480b      	ldr	r0, [pc, #44]	@ (8000af8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000aca:	490c      	ldr	r1, [pc, #48]	@ (8000afc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000acc:	4a0c      	ldr	r2, [pc, #48]	@ (8000b00 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000ace:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad0:	e002      	b.n	8000ad8 <LoopCopyDataInit>

08000ad2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ad2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ad6:	3304      	adds	r3, #4

08000ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ada:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000adc:	d3f9      	bcc.n	8000ad2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ade:	4a09      	ldr	r2, [pc, #36]	@ (8000b04 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ae0:	4c09      	ldr	r4, [pc, #36]	@ (8000b08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ae2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae4:	e001      	b.n	8000aea <LoopFillZerobss>

08000ae6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ae6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae8:	3204      	adds	r2, #4

08000aea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aec:	d3fb      	bcc.n	8000ae6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aee:	f002 fed9 	bl	80038a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000af2:	f7ff fb2b 	bl	800014c <main>
  bx lr
 8000af6:	4770      	bx	lr
  ldr r0, =_sdata
 8000af8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000afc:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000b00:	08003938 	.word	0x08003938
  ldr r2, =_sbss
 8000b04:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000b08:	20000124 	.word	0x20000124

08000b0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b0c:	e7fe      	b.n	8000b0c <ADC1_2_IRQHandler>
	...

08000b10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b14:	4b08      	ldr	r3, [pc, #32]	@ (8000b38 <HAL_Init+0x28>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a07      	ldr	r2, [pc, #28]	@ (8000b38 <HAL_Init+0x28>)
 8000b1a:	f043 0310 	orr.w	r3, r3, #16
 8000b1e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b20:	2003      	movs	r0, #3
 8000b22:	f000 f947 	bl	8000db4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b26:	200f      	movs	r0, #15
 8000b28:	f000 f808 	bl	8000b3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b2c:	f7ff fe6e 	bl	800080c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b30:	2300      	movs	r3, #0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40022000 	.word	0x40022000

08000b3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b44:	4b12      	ldr	r3, [pc, #72]	@ (8000b90 <HAL_InitTick+0x54>)
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	4b12      	ldr	r3, [pc, #72]	@ (8000b94 <HAL_InitTick+0x58>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f000 f95f 	bl	8000e1e <HAL_SYSTICK_Config>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
 8000b68:	e00e      	b.n	8000b88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2b0f      	cmp	r3, #15
 8000b6e:	d80a      	bhi.n	8000b86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b70:	2200      	movs	r2, #0
 8000b72:	6879      	ldr	r1, [r7, #4]
 8000b74:	f04f 30ff 	mov.w	r0, #4294967295
 8000b78:	f000 f927 	bl	8000dca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b7c:	4a06      	ldr	r2, [pc, #24]	@ (8000b98 <HAL_InitTick+0x5c>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b82:	2300      	movs	r3, #0
 8000b84:	e000      	b.n	8000b88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000008 	.word	0x20000008
 8000b94:	20000010 	.word	0x20000010
 8000b98:	2000000c 	.word	0x2000000c

08000b9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ba0:	4b05      	ldr	r3, [pc, #20]	@ (8000bb8 <HAL_IncTick+0x1c>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	4b05      	ldr	r3, [pc, #20]	@ (8000bbc <HAL_IncTick+0x20>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4413      	add	r3, r2
 8000bac:	4a03      	ldr	r2, [pc, #12]	@ (8000bbc <HAL_IncTick+0x20>)
 8000bae:	6013      	str	r3, [r2, #0]
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bc80      	pop	{r7}
 8000bb6:	4770      	bx	lr
 8000bb8:	20000010 	.word	0x20000010
 8000bbc:	20000120 	.word	0x20000120

08000bc0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc4:	4b02      	ldr	r3, [pc, #8]	@ (8000bd0 <HAL_GetTick+0x10>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr
 8000bd0:	20000120 	.word	0x20000120

08000bd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bdc:	f7ff fff0 	bl	8000bc0 <HAL_GetTick>
 8000be0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bec:	d005      	beq.n	8000bfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bee:	4b0a      	ldr	r3, [pc, #40]	@ (8000c18 <HAL_Delay+0x44>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bfa:	bf00      	nop
 8000bfc:	f7ff ffe0 	bl	8000bc0 <HAL_GetTick>
 8000c00:	4602      	mov	r2, r0
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	68fa      	ldr	r2, [r7, #12]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d8f7      	bhi.n	8000bfc <HAL_Delay+0x28>
  {
  }
}
 8000c0c:	bf00      	nop
 8000c0e:	bf00      	nop
 8000c10:	3710      	adds	r7, #16
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000010 	.word	0x20000010

08000c1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	f003 0307 	and.w	r3, r3, #7
 8000c2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c60 <__NVIC_SetPriorityGrouping+0x44>)
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c32:	68ba      	ldr	r2, [r7, #8]
 8000c34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c38:	4013      	ands	r3, r2
 8000c3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c4e:	4a04      	ldr	r2, [pc, #16]	@ (8000c60 <__NVIC_SetPriorityGrouping+0x44>)
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	60d3      	str	r3, [r2, #12]
}
 8000c54:	bf00      	nop
 8000c56:	3714      	adds	r7, #20
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bc80      	pop	{r7}
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c68:	4b04      	ldr	r3, [pc, #16]	@ (8000c7c <__NVIC_GetPriorityGrouping+0x18>)
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	0a1b      	lsrs	r3, r3, #8
 8000c6e:	f003 0307 	and.w	r3, r3, #7
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bc80      	pop	{r7}
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	db0b      	blt.n	8000caa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	f003 021f 	and.w	r2, r3, #31
 8000c98:	4906      	ldr	r1, [pc, #24]	@ (8000cb4 <__NVIC_EnableIRQ+0x34>)
 8000c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9e:	095b      	lsrs	r3, r3, #5
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000caa:	bf00      	nop
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr
 8000cb4:	e000e100 	.word	0xe000e100

08000cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	6039      	str	r1, [r7, #0]
 8000cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	db0a      	blt.n	8000ce2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	b2da      	uxtb	r2, r3
 8000cd0:	490c      	ldr	r1, [pc, #48]	@ (8000d04 <__NVIC_SetPriority+0x4c>)
 8000cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd6:	0112      	lsls	r2, r2, #4
 8000cd8:	b2d2      	uxtb	r2, r2
 8000cda:	440b      	add	r3, r1
 8000cdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ce0:	e00a      	b.n	8000cf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	4908      	ldr	r1, [pc, #32]	@ (8000d08 <__NVIC_SetPriority+0x50>)
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	f003 030f 	and.w	r3, r3, #15
 8000cee:	3b04      	subs	r3, #4
 8000cf0:	0112      	lsls	r2, r2, #4
 8000cf2:	b2d2      	uxtb	r2, r2
 8000cf4:	440b      	add	r3, r1
 8000cf6:	761a      	strb	r2, [r3, #24]
}
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bc80      	pop	{r7}
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	e000e100 	.word	0xe000e100
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b089      	sub	sp, #36	@ 0x24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	f1c3 0307 	rsb	r3, r3, #7
 8000d26:	2b04      	cmp	r3, #4
 8000d28:	bf28      	it	cs
 8000d2a:	2304      	movcs	r3, #4
 8000d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	3304      	adds	r3, #4
 8000d32:	2b06      	cmp	r3, #6
 8000d34:	d902      	bls.n	8000d3c <NVIC_EncodePriority+0x30>
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	3b03      	subs	r3, #3
 8000d3a:	e000      	b.n	8000d3e <NVIC_EncodePriority+0x32>
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d40:	f04f 32ff 	mov.w	r2, #4294967295
 8000d44:	69bb      	ldr	r3, [r7, #24]
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	43da      	mvns	r2, r3
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	401a      	ands	r2, r3
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d54:	f04f 31ff 	mov.w	r1, #4294967295
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5e:	43d9      	mvns	r1, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d64:	4313      	orrs	r3, r2
         );
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3724      	adds	r7, #36	@ 0x24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bc80      	pop	{r7}
 8000d6e:	4770      	bx	lr

08000d70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d80:	d301      	bcc.n	8000d86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d82:	2301      	movs	r3, #1
 8000d84:	e00f      	b.n	8000da6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d86:	4a0a      	ldr	r2, [pc, #40]	@ (8000db0 <SysTick_Config+0x40>)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d8e:	210f      	movs	r1, #15
 8000d90:	f04f 30ff 	mov.w	r0, #4294967295
 8000d94:	f7ff ff90 	bl	8000cb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d98:	4b05      	ldr	r3, [pc, #20]	@ (8000db0 <SysTick_Config+0x40>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d9e:	4b04      	ldr	r3, [pc, #16]	@ (8000db0 <SysTick_Config+0x40>)
 8000da0:	2207      	movs	r2, #7
 8000da2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	e000e010 	.word	0xe000e010

08000db4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f7ff ff2d 	bl	8000c1c <__NVIC_SetPriorityGrouping>
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b086      	sub	sp, #24
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	60b9      	str	r1, [r7, #8]
 8000dd4:	607a      	str	r2, [r7, #4]
 8000dd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ddc:	f7ff ff42 	bl	8000c64 <__NVIC_GetPriorityGrouping>
 8000de0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	68b9      	ldr	r1, [r7, #8]
 8000de6:	6978      	ldr	r0, [r7, #20]
 8000de8:	f7ff ff90 	bl	8000d0c <NVIC_EncodePriority>
 8000dec:	4602      	mov	r2, r0
 8000dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000df2:	4611      	mov	r1, r2
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff ff5f 	bl	8000cb8 <__NVIC_SetPriority>
}
 8000dfa:	bf00      	nop
 8000dfc:	3718      	adds	r7, #24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b082      	sub	sp, #8
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	4603      	mov	r3, r0
 8000e0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff ff35 	bl	8000c80 <__NVIC_EnableIRQ>
}
 8000e16:	bf00      	nop
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b082      	sub	sp, #8
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f7ff ffa2 	bl	8000d70 <SysTick_Config>
 8000e2c:	4603      	mov	r3, r0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e36:	b480      	push	{r7}
 8000e38:	b085      	sub	sp, #20
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	2b02      	cmp	r3, #2
 8000e4c:	d008      	beq.n	8000e60 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2204      	movs	r2, #4
 8000e52:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2200      	movs	r2, #0
 8000e58:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	e020      	b.n	8000ea2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f022 020e 	bic.w	r2, r2, #14
 8000e6e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f022 0201 	bic.w	r2, r2, #1
 8000e7e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e88:	2101      	movs	r1, #1
 8000e8a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e8e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2201      	movs	r2, #1
 8000e94:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3714      	adds	r7, #20
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc80      	pop	{r7}
 8000eaa:	4770      	bx	lr

08000eac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	d005      	beq.n	8000ed0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2204      	movs	r2, #4
 8000ec8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	73fb      	strb	r3, [r7, #15]
 8000ece:	e051      	b.n	8000f74 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f022 020e 	bic.w	r2, r2, #14
 8000ede:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f022 0201 	bic.w	r2, r2, #1
 8000eee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a22      	ldr	r2, [pc, #136]	@ (8000f80 <HAL_DMA_Abort_IT+0xd4>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d029      	beq.n	8000f4e <HAL_DMA_Abort_IT+0xa2>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a21      	ldr	r2, [pc, #132]	@ (8000f84 <HAL_DMA_Abort_IT+0xd8>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d022      	beq.n	8000f4a <HAL_DMA_Abort_IT+0x9e>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a1f      	ldr	r2, [pc, #124]	@ (8000f88 <HAL_DMA_Abort_IT+0xdc>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d01a      	beq.n	8000f44 <HAL_DMA_Abort_IT+0x98>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a1e      	ldr	r2, [pc, #120]	@ (8000f8c <HAL_DMA_Abort_IT+0xe0>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d012      	beq.n	8000f3e <HAL_DMA_Abort_IT+0x92>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a1c      	ldr	r2, [pc, #112]	@ (8000f90 <HAL_DMA_Abort_IT+0xe4>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d00a      	beq.n	8000f38 <HAL_DMA_Abort_IT+0x8c>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a1b      	ldr	r2, [pc, #108]	@ (8000f94 <HAL_DMA_Abort_IT+0xe8>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d102      	bne.n	8000f32 <HAL_DMA_Abort_IT+0x86>
 8000f2c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000f30:	e00e      	b.n	8000f50 <HAL_DMA_Abort_IT+0xa4>
 8000f32:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000f36:	e00b      	b.n	8000f50 <HAL_DMA_Abort_IT+0xa4>
 8000f38:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f3c:	e008      	b.n	8000f50 <HAL_DMA_Abort_IT+0xa4>
 8000f3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f42:	e005      	b.n	8000f50 <HAL_DMA_Abort_IT+0xa4>
 8000f44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f48:	e002      	b.n	8000f50 <HAL_DMA_Abort_IT+0xa4>
 8000f4a:	2310      	movs	r3, #16
 8000f4c:	e000      	b.n	8000f50 <HAL_DMA_Abort_IT+0xa4>
 8000f4e:	2301      	movs	r3, #1
 8000f50:	4a11      	ldr	r2, [pc, #68]	@ (8000f98 <HAL_DMA_Abort_IT+0xec>)
 8000f52:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2201      	movs	r2, #1
 8000f58:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d003      	beq.n	8000f74 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	4798      	blx	r3
    } 
  }
  return status;
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40020008 	.word	0x40020008
 8000f84:	4002001c 	.word	0x4002001c
 8000f88:	40020030 	.word	0x40020030
 8000f8c:	40020044 	.word	0x40020044
 8000f90:	40020058 	.word	0x40020058
 8000f94:	4002006c 	.word	0x4002006c
 8000f98:	40020000 	.word	0x40020000

08000f9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b08b      	sub	sp, #44	@ 0x2c
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000faa:	2300      	movs	r3, #0
 8000fac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fae:	e169      	b.n	8001284 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	69fa      	ldr	r2, [r7, #28]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	f040 8158 	bne.w	800127e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	4a9a      	ldr	r2, [pc, #616]	@ (800123c <HAL_GPIO_Init+0x2a0>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d05e      	beq.n	8001096 <HAL_GPIO_Init+0xfa>
 8000fd8:	4a98      	ldr	r2, [pc, #608]	@ (800123c <HAL_GPIO_Init+0x2a0>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d875      	bhi.n	80010ca <HAL_GPIO_Init+0x12e>
 8000fde:	4a98      	ldr	r2, [pc, #608]	@ (8001240 <HAL_GPIO_Init+0x2a4>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d058      	beq.n	8001096 <HAL_GPIO_Init+0xfa>
 8000fe4:	4a96      	ldr	r2, [pc, #600]	@ (8001240 <HAL_GPIO_Init+0x2a4>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d86f      	bhi.n	80010ca <HAL_GPIO_Init+0x12e>
 8000fea:	4a96      	ldr	r2, [pc, #600]	@ (8001244 <HAL_GPIO_Init+0x2a8>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d052      	beq.n	8001096 <HAL_GPIO_Init+0xfa>
 8000ff0:	4a94      	ldr	r2, [pc, #592]	@ (8001244 <HAL_GPIO_Init+0x2a8>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d869      	bhi.n	80010ca <HAL_GPIO_Init+0x12e>
 8000ff6:	4a94      	ldr	r2, [pc, #592]	@ (8001248 <HAL_GPIO_Init+0x2ac>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d04c      	beq.n	8001096 <HAL_GPIO_Init+0xfa>
 8000ffc:	4a92      	ldr	r2, [pc, #584]	@ (8001248 <HAL_GPIO_Init+0x2ac>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d863      	bhi.n	80010ca <HAL_GPIO_Init+0x12e>
 8001002:	4a92      	ldr	r2, [pc, #584]	@ (800124c <HAL_GPIO_Init+0x2b0>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d046      	beq.n	8001096 <HAL_GPIO_Init+0xfa>
 8001008:	4a90      	ldr	r2, [pc, #576]	@ (800124c <HAL_GPIO_Init+0x2b0>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d85d      	bhi.n	80010ca <HAL_GPIO_Init+0x12e>
 800100e:	2b12      	cmp	r3, #18
 8001010:	d82a      	bhi.n	8001068 <HAL_GPIO_Init+0xcc>
 8001012:	2b12      	cmp	r3, #18
 8001014:	d859      	bhi.n	80010ca <HAL_GPIO_Init+0x12e>
 8001016:	a201      	add	r2, pc, #4	@ (adr r2, 800101c <HAL_GPIO_Init+0x80>)
 8001018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800101c:	08001097 	.word	0x08001097
 8001020:	08001071 	.word	0x08001071
 8001024:	08001083 	.word	0x08001083
 8001028:	080010c5 	.word	0x080010c5
 800102c:	080010cb 	.word	0x080010cb
 8001030:	080010cb 	.word	0x080010cb
 8001034:	080010cb 	.word	0x080010cb
 8001038:	080010cb 	.word	0x080010cb
 800103c:	080010cb 	.word	0x080010cb
 8001040:	080010cb 	.word	0x080010cb
 8001044:	080010cb 	.word	0x080010cb
 8001048:	080010cb 	.word	0x080010cb
 800104c:	080010cb 	.word	0x080010cb
 8001050:	080010cb 	.word	0x080010cb
 8001054:	080010cb 	.word	0x080010cb
 8001058:	080010cb 	.word	0x080010cb
 800105c:	080010cb 	.word	0x080010cb
 8001060:	08001079 	.word	0x08001079
 8001064:	0800108d 	.word	0x0800108d
 8001068:	4a79      	ldr	r2, [pc, #484]	@ (8001250 <HAL_GPIO_Init+0x2b4>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d013      	beq.n	8001096 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800106e:	e02c      	b.n	80010ca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	623b      	str	r3, [r7, #32]
          break;
 8001076:	e029      	b.n	80010cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	3304      	adds	r3, #4
 800107e:	623b      	str	r3, [r7, #32]
          break;
 8001080:	e024      	b.n	80010cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	68db      	ldr	r3, [r3, #12]
 8001086:	3308      	adds	r3, #8
 8001088:	623b      	str	r3, [r7, #32]
          break;
 800108a:	e01f      	b.n	80010cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	330c      	adds	r3, #12
 8001092:	623b      	str	r3, [r7, #32]
          break;
 8001094:	e01a      	b.n	80010cc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d102      	bne.n	80010a4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800109e:	2304      	movs	r3, #4
 80010a0:	623b      	str	r3, [r7, #32]
          break;
 80010a2:	e013      	b.n	80010cc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d105      	bne.n	80010b8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010ac:	2308      	movs	r3, #8
 80010ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	69fa      	ldr	r2, [r7, #28]
 80010b4:	611a      	str	r2, [r3, #16]
          break;
 80010b6:	e009      	b.n	80010cc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010b8:	2308      	movs	r3, #8
 80010ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	69fa      	ldr	r2, [r7, #28]
 80010c0:	615a      	str	r2, [r3, #20]
          break;
 80010c2:	e003      	b.n	80010cc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010c4:	2300      	movs	r3, #0
 80010c6:	623b      	str	r3, [r7, #32]
          break;
 80010c8:	e000      	b.n	80010cc <HAL_GPIO_Init+0x130>
          break;
 80010ca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	2bff      	cmp	r3, #255	@ 0xff
 80010d0:	d801      	bhi.n	80010d6 <HAL_GPIO_Init+0x13a>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	e001      	b.n	80010da <HAL_GPIO_Init+0x13e>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	3304      	adds	r3, #4
 80010da:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	2bff      	cmp	r3, #255	@ 0xff
 80010e0:	d802      	bhi.n	80010e8 <HAL_GPIO_Init+0x14c>
 80010e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	e002      	b.n	80010ee <HAL_GPIO_Init+0x152>
 80010e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ea:	3b08      	subs	r3, #8
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	210f      	movs	r1, #15
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	fa01 f303 	lsl.w	r3, r1, r3
 80010fc:	43db      	mvns	r3, r3
 80010fe:	401a      	ands	r2, r3
 8001100:	6a39      	ldr	r1, [r7, #32]
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	fa01 f303 	lsl.w	r3, r1, r3
 8001108:	431a      	orrs	r2, r3
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001116:	2b00      	cmp	r3, #0
 8001118:	f000 80b1 	beq.w	800127e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800111c:	4b4d      	ldr	r3, [pc, #308]	@ (8001254 <HAL_GPIO_Init+0x2b8>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	4a4c      	ldr	r2, [pc, #304]	@ (8001254 <HAL_GPIO_Init+0x2b8>)
 8001122:	f043 0301 	orr.w	r3, r3, #1
 8001126:	6193      	str	r3, [r2, #24]
 8001128:	4b4a      	ldr	r3, [pc, #296]	@ (8001254 <HAL_GPIO_Init+0x2b8>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	f003 0301 	and.w	r3, r3, #1
 8001130:	60bb      	str	r3, [r7, #8]
 8001132:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001134:	4a48      	ldr	r2, [pc, #288]	@ (8001258 <HAL_GPIO_Init+0x2bc>)
 8001136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001138:	089b      	lsrs	r3, r3, #2
 800113a:	3302      	adds	r3, #2
 800113c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001140:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001144:	f003 0303 	and.w	r3, r3, #3
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	220f      	movs	r2, #15
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	43db      	mvns	r3, r3
 8001152:	68fa      	ldr	r2, [r7, #12]
 8001154:	4013      	ands	r3, r2
 8001156:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4a40      	ldr	r2, [pc, #256]	@ (800125c <HAL_GPIO_Init+0x2c0>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d013      	beq.n	8001188 <HAL_GPIO_Init+0x1ec>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4a3f      	ldr	r2, [pc, #252]	@ (8001260 <HAL_GPIO_Init+0x2c4>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d00d      	beq.n	8001184 <HAL_GPIO_Init+0x1e8>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4a3e      	ldr	r2, [pc, #248]	@ (8001264 <HAL_GPIO_Init+0x2c8>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d007      	beq.n	8001180 <HAL_GPIO_Init+0x1e4>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4a3d      	ldr	r2, [pc, #244]	@ (8001268 <HAL_GPIO_Init+0x2cc>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d101      	bne.n	800117c <HAL_GPIO_Init+0x1e0>
 8001178:	2303      	movs	r3, #3
 800117a:	e006      	b.n	800118a <HAL_GPIO_Init+0x1ee>
 800117c:	2304      	movs	r3, #4
 800117e:	e004      	b.n	800118a <HAL_GPIO_Init+0x1ee>
 8001180:	2302      	movs	r3, #2
 8001182:	e002      	b.n	800118a <HAL_GPIO_Init+0x1ee>
 8001184:	2301      	movs	r3, #1
 8001186:	e000      	b.n	800118a <HAL_GPIO_Init+0x1ee>
 8001188:	2300      	movs	r3, #0
 800118a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800118c:	f002 0203 	and.w	r2, r2, #3
 8001190:	0092      	lsls	r2, r2, #2
 8001192:	4093      	lsls	r3, r2
 8001194:	68fa      	ldr	r2, [r7, #12]
 8001196:	4313      	orrs	r3, r2
 8001198:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800119a:	492f      	ldr	r1, [pc, #188]	@ (8001258 <HAL_GPIO_Init+0x2bc>)
 800119c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800119e:	089b      	lsrs	r3, r3, #2
 80011a0:	3302      	adds	r3, #2
 80011a2:	68fa      	ldr	r2, [r7, #12]
 80011a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d006      	beq.n	80011c2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011b4:	4b2d      	ldr	r3, [pc, #180]	@ (800126c <HAL_GPIO_Init+0x2d0>)
 80011b6:	689a      	ldr	r2, [r3, #8]
 80011b8:	492c      	ldr	r1, [pc, #176]	@ (800126c <HAL_GPIO_Init+0x2d0>)
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	4313      	orrs	r3, r2
 80011be:	608b      	str	r3, [r1, #8]
 80011c0:	e006      	b.n	80011d0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011c2:	4b2a      	ldr	r3, [pc, #168]	@ (800126c <HAL_GPIO_Init+0x2d0>)
 80011c4:	689a      	ldr	r2, [r3, #8]
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	43db      	mvns	r3, r3
 80011ca:	4928      	ldr	r1, [pc, #160]	@ (800126c <HAL_GPIO_Init+0x2d0>)
 80011cc:	4013      	ands	r3, r2
 80011ce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d006      	beq.n	80011ea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011dc:	4b23      	ldr	r3, [pc, #140]	@ (800126c <HAL_GPIO_Init+0x2d0>)
 80011de:	68da      	ldr	r2, [r3, #12]
 80011e0:	4922      	ldr	r1, [pc, #136]	@ (800126c <HAL_GPIO_Init+0x2d0>)
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	60cb      	str	r3, [r1, #12]
 80011e8:	e006      	b.n	80011f8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011ea:	4b20      	ldr	r3, [pc, #128]	@ (800126c <HAL_GPIO_Init+0x2d0>)
 80011ec:	68da      	ldr	r2, [r3, #12]
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	43db      	mvns	r3, r3
 80011f2:	491e      	ldr	r1, [pc, #120]	@ (800126c <HAL_GPIO_Init+0x2d0>)
 80011f4:	4013      	ands	r3, r2
 80011f6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d006      	beq.n	8001212 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001204:	4b19      	ldr	r3, [pc, #100]	@ (800126c <HAL_GPIO_Init+0x2d0>)
 8001206:	685a      	ldr	r2, [r3, #4]
 8001208:	4918      	ldr	r1, [pc, #96]	@ (800126c <HAL_GPIO_Init+0x2d0>)
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	4313      	orrs	r3, r2
 800120e:	604b      	str	r3, [r1, #4]
 8001210:	e006      	b.n	8001220 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001212:	4b16      	ldr	r3, [pc, #88]	@ (800126c <HAL_GPIO_Init+0x2d0>)
 8001214:	685a      	ldr	r2, [r3, #4]
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	43db      	mvns	r3, r3
 800121a:	4914      	ldr	r1, [pc, #80]	@ (800126c <HAL_GPIO_Init+0x2d0>)
 800121c:	4013      	ands	r3, r2
 800121e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d021      	beq.n	8001270 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800122c:	4b0f      	ldr	r3, [pc, #60]	@ (800126c <HAL_GPIO_Init+0x2d0>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	490e      	ldr	r1, [pc, #56]	@ (800126c <HAL_GPIO_Init+0x2d0>)
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	4313      	orrs	r3, r2
 8001236:	600b      	str	r3, [r1, #0]
 8001238:	e021      	b.n	800127e <HAL_GPIO_Init+0x2e2>
 800123a:	bf00      	nop
 800123c:	10320000 	.word	0x10320000
 8001240:	10310000 	.word	0x10310000
 8001244:	10220000 	.word	0x10220000
 8001248:	10210000 	.word	0x10210000
 800124c:	10120000 	.word	0x10120000
 8001250:	10110000 	.word	0x10110000
 8001254:	40021000 	.word	0x40021000
 8001258:	40010000 	.word	0x40010000
 800125c:	40010800 	.word	0x40010800
 8001260:	40010c00 	.word	0x40010c00
 8001264:	40011000 	.word	0x40011000
 8001268:	40011400 	.word	0x40011400
 800126c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001270:	4b0b      	ldr	r3, [pc, #44]	@ (80012a0 <HAL_GPIO_Init+0x304>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	43db      	mvns	r3, r3
 8001278:	4909      	ldr	r1, [pc, #36]	@ (80012a0 <HAL_GPIO_Init+0x304>)
 800127a:	4013      	ands	r3, r2
 800127c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800127e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001280:	3301      	adds	r3, #1
 8001282:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800128a:	fa22 f303 	lsr.w	r3, r2, r3
 800128e:	2b00      	cmp	r3, #0
 8001290:	f47f ae8e 	bne.w	8000fb0 <HAL_GPIO_Init+0x14>
  }
}
 8001294:	bf00      	nop
 8001296:	bf00      	nop
 8001298:	372c      	adds	r7, #44	@ 0x2c
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr
 80012a0:	40010400 	.word	0x40010400

080012a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	460b      	mov	r3, r1
 80012ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	689a      	ldr	r2, [r3, #8]
 80012b4:	887b      	ldrh	r3, [r7, #2]
 80012b6:	4013      	ands	r3, r2
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d002      	beq.n	80012c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012bc:	2301      	movs	r3, #1
 80012be:	73fb      	strb	r3, [r7, #15]
 80012c0:	e001      	b.n	80012c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012c2:	2300      	movs	r3, #0
 80012c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3714      	adds	r7, #20
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bc80      	pop	{r7}
 80012d0:	4770      	bx	lr

080012d2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
 80012da:	460b      	mov	r3, r1
 80012dc:	807b      	strh	r3, [r7, #2]
 80012de:	4613      	mov	r3, r2
 80012e0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012e2:	787b      	ldrb	r3, [r7, #1]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d003      	beq.n	80012f0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012e8:	887a      	ldrh	r2, [r7, #2]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012ee:	e003      	b.n	80012f8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012f0:	887b      	ldrh	r3, [r7, #2]
 80012f2:	041a      	lsls	r2, r3, #16
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	611a      	str	r2, [r3, #16]
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr

08001302 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001302:	b480      	push	{r7}
 8001304:	b085      	sub	sp, #20
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
 800130a:	460b      	mov	r3, r1
 800130c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	68db      	ldr	r3, [r3, #12]
 8001312:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001314:	887a      	ldrh	r2, [r7, #2]
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	4013      	ands	r3, r2
 800131a:	041a      	lsls	r2, r3, #16
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	43d9      	mvns	r1, r3
 8001320:	887b      	ldrh	r3, [r7, #2]
 8001322:	400b      	ands	r3, r1
 8001324:	431a      	orrs	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	611a      	str	r2, [r3, #16]
}
 800132a:	bf00      	nop
 800132c:	3714      	adds	r7, #20
 800132e:	46bd      	mov	sp, r7
 8001330:	bc80      	pop	{r7}
 8001332:	4770      	bx	lr

08001334 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d101      	bne.n	8001346 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e272      	b.n	800182c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	2b00      	cmp	r3, #0
 8001350:	f000 8087 	beq.w	8001462 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001354:	4b92      	ldr	r3, [pc, #584]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f003 030c 	and.w	r3, r3, #12
 800135c:	2b04      	cmp	r3, #4
 800135e:	d00c      	beq.n	800137a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001360:	4b8f      	ldr	r3, [pc, #572]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f003 030c 	and.w	r3, r3, #12
 8001368:	2b08      	cmp	r3, #8
 800136a:	d112      	bne.n	8001392 <HAL_RCC_OscConfig+0x5e>
 800136c:	4b8c      	ldr	r3, [pc, #560]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001374:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001378:	d10b      	bne.n	8001392 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800137a:	4b89      	ldr	r3, [pc, #548]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d06c      	beq.n	8001460 <HAL_RCC_OscConfig+0x12c>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d168      	bne.n	8001460 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e24c      	b.n	800182c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800139a:	d106      	bne.n	80013aa <HAL_RCC_OscConfig+0x76>
 800139c:	4b80      	ldr	r3, [pc, #512]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a7f      	ldr	r2, [pc, #508]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80013a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013a6:	6013      	str	r3, [r2, #0]
 80013a8:	e02e      	b.n	8001408 <HAL_RCC_OscConfig+0xd4>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d10c      	bne.n	80013cc <HAL_RCC_OscConfig+0x98>
 80013b2:	4b7b      	ldr	r3, [pc, #492]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a7a      	ldr	r2, [pc, #488]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80013b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013bc:	6013      	str	r3, [r2, #0]
 80013be:	4b78      	ldr	r3, [pc, #480]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a77      	ldr	r2, [pc, #476]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80013c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013c8:	6013      	str	r3, [r2, #0]
 80013ca:	e01d      	b.n	8001408 <HAL_RCC_OscConfig+0xd4>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013d4:	d10c      	bne.n	80013f0 <HAL_RCC_OscConfig+0xbc>
 80013d6:	4b72      	ldr	r3, [pc, #456]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a71      	ldr	r2, [pc, #452]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80013dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013e0:	6013      	str	r3, [r2, #0]
 80013e2:	4b6f      	ldr	r3, [pc, #444]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a6e      	ldr	r2, [pc, #440]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80013e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013ec:	6013      	str	r3, [r2, #0]
 80013ee:	e00b      	b.n	8001408 <HAL_RCC_OscConfig+0xd4>
 80013f0:	4b6b      	ldr	r3, [pc, #428]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a6a      	ldr	r2, [pc, #424]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80013f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013fa:	6013      	str	r3, [r2, #0]
 80013fc:	4b68      	ldr	r3, [pc, #416]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a67      	ldr	r2, [pc, #412]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 8001402:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001406:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d013      	beq.n	8001438 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001410:	f7ff fbd6 	bl	8000bc0 <HAL_GetTick>
 8001414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001416:	e008      	b.n	800142a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001418:	f7ff fbd2 	bl	8000bc0 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b64      	cmp	r3, #100	@ 0x64
 8001424:	d901      	bls.n	800142a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e200      	b.n	800182c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800142a:	4b5d      	ldr	r3, [pc, #372]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d0f0      	beq.n	8001418 <HAL_RCC_OscConfig+0xe4>
 8001436:	e014      	b.n	8001462 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001438:	f7ff fbc2 	bl	8000bc0 <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001440:	f7ff fbbe 	bl	8000bc0 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b64      	cmp	r3, #100	@ 0x64
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e1ec      	b.n	800182c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001452:	4b53      	ldr	r3, [pc, #332]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1f0      	bne.n	8001440 <HAL_RCC_OscConfig+0x10c>
 800145e:	e000      	b.n	8001462 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001460:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d063      	beq.n	8001536 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800146e:	4b4c      	ldr	r3, [pc, #304]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f003 030c 	and.w	r3, r3, #12
 8001476:	2b00      	cmp	r3, #0
 8001478:	d00b      	beq.n	8001492 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800147a:	4b49      	ldr	r3, [pc, #292]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f003 030c 	and.w	r3, r3, #12
 8001482:	2b08      	cmp	r3, #8
 8001484:	d11c      	bne.n	80014c0 <HAL_RCC_OscConfig+0x18c>
 8001486:	4b46      	ldr	r3, [pc, #280]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d116      	bne.n	80014c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001492:	4b43      	ldr	r3, [pc, #268]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d005      	beq.n	80014aa <HAL_RCC_OscConfig+0x176>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	691b      	ldr	r3, [r3, #16]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d001      	beq.n	80014aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e1c0      	b.n	800182c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014aa:	4b3d      	ldr	r3, [pc, #244]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	695b      	ldr	r3, [r3, #20]
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	4939      	ldr	r1, [pc, #228]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80014ba:	4313      	orrs	r3, r2
 80014bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014be:	e03a      	b.n	8001536 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	691b      	ldr	r3, [r3, #16]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d020      	beq.n	800150a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014c8:	4b36      	ldr	r3, [pc, #216]	@ (80015a4 <HAL_RCC_OscConfig+0x270>)
 80014ca:	2201      	movs	r2, #1
 80014cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ce:	f7ff fb77 	bl	8000bc0 <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d4:	e008      	b.n	80014e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014d6:	f7ff fb73 	bl	8000bc0 <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e1a1      	b.n	800182c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014e8:	4b2d      	ldr	r3, [pc, #180]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d0f0      	beq.n	80014d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f4:	4b2a      	ldr	r3, [pc, #168]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	695b      	ldr	r3, [r3, #20]
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	4927      	ldr	r1, [pc, #156]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 8001504:	4313      	orrs	r3, r2
 8001506:	600b      	str	r3, [r1, #0]
 8001508:	e015      	b.n	8001536 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800150a:	4b26      	ldr	r3, [pc, #152]	@ (80015a4 <HAL_RCC_OscConfig+0x270>)
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001510:	f7ff fb56 	bl	8000bc0 <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001518:	f7ff fb52 	bl	8000bc0 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e180      	b.n	800182c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800152a:	4b1d      	ldr	r3, [pc, #116]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1f0      	bne.n	8001518 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0308 	and.w	r3, r3, #8
 800153e:	2b00      	cmp	r3, #0
 8001540:	d03a      	beq.n	80015b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d019      	beq.n	800157e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800154a:	4b17      	ldr	r3, [pc, #92]	@ (80015a8 <HAL_RCC_OscConfig+0x274>)
 800154c:	2201      	movs	r2, #1
 800154e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001550:	f7ff fb36 	bl	8000bc0 <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001558:	f7ff fb32 	bl	8000bc0 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e160      	b.n	800182c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800156a:	4b0d      	ldr	r3, [pc, #52]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 800156c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d0f0      	beq.n	8001558 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001576:	2001      	movs	r0, #1
 8001578:	f000 face 	bl	8001b18 <RCC_Delay>
 800157c:	e01c      	b.n	80015b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800157e:	4b0a      	ldr	r3, [pc, #40]	@ (80015a8 <HAL_RCC_OscConfig+0x274>)
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001584:	f7ff fb1c 	bl	8000bc0 <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800158a:	e00f      	b.n	80015ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800158c:	f7ff fb18 	bl	8000bc0 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b02      	cmp	r3, #2
 8001598:	d908      	bls.n	80015ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e146      	b.n	800182c <HAL_RCC_OscConfig+0x4f8>
 800159e:	bf00      	nop
 80015a0:	40021000 	.word	0x40021000
 80015a4:	42420000 	.word	0x42420000
 80015a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ac:	4b92      	ldr	r3, [pc, #584]	@ (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 80015ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d1e9      	bne.n	800158c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0304 	and.w	r3, r3, #4
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	f000 80a6 	beq.w	8001712 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015c6:	2300      	movs	r3, #0
 80015c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ca:	4b8b      	ldr	r3, [pc, #556]	@ (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d10d      	bne.n	80015f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015d6:	4b88      	ldr	r3, [pc, #544]	@ (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	4a87      	ldr	r2, [pc, #540]	@ (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 80015dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015e0:	61d3      	str	r3, [r2, #28]
 80015e2:	4b85      	ldr	r3, [pc, #532]	@ (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 80015e4:	69db      	ldr	r3, [r3, #28]
 80015e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ea:	60bb      	str	r3, [r7, #8]
 80015ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015ee:	2301      	movs	r3, #1
 80015f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f2:	4b82      	ldr	r3, [pc, #520]	@ (80017fc <HAL_RCC_OscConfig+0x4c8>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d118      	bne.n	8001630 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015fe:	4b7f      	ldr	r3, [pc, #508]	@ (80017fc <HAL_RCC_OscConfig+0x4c8>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a7e      	ldr	r2, [pc, #504]	@ (80017fc <HAL_RCC_OscConfig+0x4c8>)
 8001604:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001608:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800160a:	f7ff fad9 	bl	8000bc0 <HAL_GetTick>
 800160e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001610:	e008      	b.n	8001624 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001612:	f7ff fad5 	bl	8000bc0 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b64      	cmp	r3, #100	@ 0x64
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e103      	b.n	800182c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001624:	4b75      	ldr	r3, [pc, #468]	@ (80017fc <HAL_RCC_OscConfig+0x4c8>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800162c:	2b00      	cmp	r3, #0
 800162e:	d0f0      	beq.n	8001612 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d106      	bne.n	8001646 <HAL_RCC_OscConfig+0x312>
 8001638:	4b6f      	ldr	r3, [pc, #444]	@ (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 800163a:	6a1b      	ldr	r3, [r3, #32]
 800163c:	4a6e      	ldr	r2, [pc, #440]	@ (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 800163e:	f043 0301 	orr.w	r3, r3, #1
 8001642:	6213      	str	r3, [r2, #32]
 8001644:	e02d      	b.n	80016a2 <HAL_RCC_OscConfig+0x36e>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d10c      	bne.n	8001668 <HAL_RCC_OscConfig+0x334>
 800164e:	4b6a      	ldr	r3, [pc, #424]	@ (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 8001650:	6a1b      	ldr	r3, [r3, #32]
 8001652:	4a69      	ldr	r2, [pc, #420]	@ (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 8001654:	f023 0301 	bic.w	r3, r3, #1
 8001658:	6213      	str	r3, [r2, #32]
 800165a:	4b67      	ldr	r3, [pc, #412]	@ (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 800165c:	6a1b      	ldr	r3, [r3, #32]
 800165e:	4a66      	ldr	r2, [pc, #408]	@ (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 8001660:	f023 0304 	bic.w	r3, r3, #4
 8001664:	6213      	str	r3, [r2, #32]
 8001666:	e01c      	b.n	80016a2 <HAL_RCC_OscConfig+0x36e>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	2b05      	cmp	r3, #5
 800166e:	d10c      	bne.n	800168a <HAL_RCC_OscConfig+0x356>
 8001670:	4b61      	ldr	r3, [pc, #388]	@ (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 8001672:	6a1b      	ldr	r3, [r3, #32]
 8001674:	4a60      	ldr	r2, [pc, #384]	@ (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 8001676:	f043 0304 	orr.w	r3, r3, #4
 800167a:	6213      	str	r3, [r2, #32]
 800167c:	4b5e      	ldr	r3, [pc, #376]	@ (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 800167e:	6a1b      	ldr	r3, [r3, #32]
 8001680:	4a5d      	ldr	r2, [pc, #372]	@ (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 8001682:	f043 0301 	orr.w	r3, r3, #1
 8001686:	6213      	str	r3, [r2, #32]
 8001688:	e00b      	b.n	80016a2 <HAL_RCC_OscConfig+0x36e>
 800168a:	4b5b      	ldr	r3, [pc, #364]	@ (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 800168c:	6a1b      	ldr	r3, [r3, #32]
 800168e:	4a5a      	ldr	r2, [pc, #360]	@ (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 8001690:	f023 0301 	bic.w	r3, r3, #1
 8001694:	6213      	str	r3, [r2, #32]
 8001696:	4b58      	ldr	r3, [pc, #352]	@ (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 8001698:	6a1b      	ldr	r3, [r3, #32]
 800169a:	4a57      	ldr	r2, [pc, #348]	@ (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 800169c:	f023 0304 	bic.w	r3, r3, #4
 80016a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d015      	beq.n	80016d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016aa:	f7ff fa89 	bl	8000bc0 <HAL_GetTick>
 80016ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016b0:	e00a      	b.n	80016c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016b2:	f7ff fa85 	bl	8000bc0 <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e0b1      	b.n	800182c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016c8:	4b4b      	ldr	r3, [pc, #300]	@ (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 80016ca:	6a1b      	ldr	r3, [r3, #32]
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d0ee      	beq.n	80016b2 <HAL_RCC_OscConfig+0x37e>
 80016d4:	e014      	b.n	8001700 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016d6:	f7ff fa73 	bl	8000bc0 <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016dc:	e00a      	b.n	80016f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016de:	f7ff fa6f 	bl	8000bc0 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e09b      	b.n	800182c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016f4:	4b40      	ldr	r3, [pc, #256]	@ (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 80016f6:	6a1b      	ldr	r3, [r3, #32]
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d1ee      	bne.n	80016de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001700:	7dfb      	ldrb	r3, [r7, #23]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d105      	bne.n	8001712 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001706:	4b3c      	ldr	r3, [pc, #240]	@ (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	4a3b      	ldr	r2, [pc, #236]	@ (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 800170c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001710:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	2b00      	cmp	r3, #0
 8001718:	f000 8087 	beq.w	800182a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800171c:	4b36      	ldr	r3, [pc, #216]	@ (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f003 030c 	and.w	r3, r3, #12
 8001724:	2b08      	cmp	r3, #8
 8001726:	d061      	beq.n	80017ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	69db      	ldr	r3, [r3, #28]
 800172c:	2b02      	cmp	r3, #2
 800172e:	d146      	bne.n	80017be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001730:	4b33      	ldr	r3, [pc, #204]	@ (8001800 <HAL_RCC_OscConfig+0x4cc>)
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001736:	f7ff fa43 	bl	8000bc0 <HAL_GetTick>
 800173a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800173c:	e008      	b.n	8001750 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800173e:	f7ff fa3f 	bl	8000bc0 <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	2b02      	cmp	r3, #2
 800174a:	d901      	bls.n	8001750 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e06d      	b.n	800182c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001750:	4b29      	ldr	r3, [pc, #164]	@ (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d1f0      	bne.n	800173e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a1b      	ldr	r3, [r3, #32]
 8001760:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001764:	d108      	bne.n	8001778 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001766:	4b24      	ldr	r3, [pc, #144]	@ (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	4921      	ldr	r1, [pc, #132]	@ (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 8001774:	4313      	orrs	r3, r2
 8001776:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001778:	4b1f      	ldr	r3, [pc, #124]	@ (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a19      	ldr	r1, [r3, #32]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001788:	430b      	orrs	r3, r1
 800178a:	491b      	ldr	r1, [pc, #108]	@ (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 800178c:	4313      	orrs	r3, r2
 800178e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001790:	4b1b      	ldr	r3, [pc, #108]	@ (8001800 <HAL_RCC_OscConfig+0x4cc>)
 8001792:	2201      	movs	r2, #1
 8001794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001796:	f7ff fa13 	bl	8000bc0 <HAL_GetTick>
 800179a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800179c:	e008      	b.n	80017b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800179e:	f7ff fa0f 	bl	8000bc0 <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e03d      	b.n	800182c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017b0:	4b11      	ldr	r3, [pc, #68]	@ (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d0f0      	beq.n	800179e <HAL_RCC_OscConfig+0x46a>
 80017bc:	e035      	b.n	800182a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017be:	4b10      	ldr	r3, [pc, #64]	@ (8001800 <HAL_RCC_OscConfig+0x4cc>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c4:	f7ff f9fc 	bl	8000bc0 <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017cc:	f7ff f9f8 	bl	8000bc0 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e026      	b.n	800182c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017de:	4b06      	ldr	r3, [pc, #24]	@ (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1f0      	bne.n	80017cc <HAL_RCC_OscConfig+0x498>
 80017ea:	e01e      	b.n	800182a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	69db      	ldr	r3, [r3, #28]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d107      	bne.n	8001804 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e019      	b.n	800182c <HAL_RCC_OscConfig+0x4f8>
 80017f8:	40021000 	.word	0x40021000
 80017fc:	40007000 	.word	0x40007000
 8001800:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001804:	4b0b      	ldr	r3, [pc, #44]	@ (8001834 <HAL_RCC_OscConfig+0x500>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a1b      	ldr	r3, [r3, #32]
 8001814:	429a      	cmp	r2, r3
 8001816:	d106      	bne.n	8001826 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001822:	429a      	cmp	r2, r3
 8001824:	d001      	beq.n	800182a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e000      	b.n	800182c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800182a:	2300      	movs	r3, #0
}
 800182c:	4618      	mov	r0, r3
 800182e:	3718      	adds	r7, #24
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40021000 	.word	0x40021000

08001838 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d101      	bne.n	800184c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e0d0      	b.n	80019ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800184c:	4b6a      	ldr	r3, [pc, #424]	@ (80019f8 <HAL_RCC_ClockConfig+0x1c0>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0307 	and.w	r3, r3, #7
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	429a      	cmp	r2, r3
 8001858:	d910      	bls.n	800187c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800185a:	4b67      	ldr	r3, [pc, #412]	@ (80019f8 <HAL_RCC_ClockConfig+0x1c0>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f023 0207 	bic.w	r2, r3, #7
 8001862:	4965      	ldr	r1, [pc, #404]	@ (80019f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	4313      	orrs	r3, r2
 8001868:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800186a:	4b63      	ldr	r3, [pc, #396]	@ (80019f8 <HAL_RCC_ClockConfig+0x1c0>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	429a      	cmp	r2, r3
 8001876:	d001      	beq.n	800187c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e0b8      	b.n	80019ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0302 	and.w	r3, r3, #2
 8001884:	2b00      	cmp	r3, #0
 8001886:	d020      	beq.n	80018ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0304 	and.w	r3, r3, #4
 8001890:	2b00      	cmp	r3, #0
 8001892:	d005      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001894:	4b59      	ldr	r3, [pc, #356]	@ (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	4a58      	ldr	r2, [pc, #352]	@ (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 800189a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800189e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0308 	and.w	r3, r3, #8
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d005      	beq.n	80018b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018ac:	4b53      	ldr	r3, [pc, #332]	@ (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	4a52      	ldr	r2, [pc, #328]	@ (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 80018b2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80018b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018b8:	4b50      	ldr	r3, [pc, #320]	@ (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	494d      	ldr	r1, [pc, #308]	@ (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 80018c6:	4313      	orrs	r3, r2
 80018c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d040      	beq.n	8001958 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d107      	bne.n	80018ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018de:	4b47      	ldr	r3, [pc, #284]	@ (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d115      	bne.n	8001916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e07f      	b.n	80019ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d107      	bne.n	8001906 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018f6:	4b41      	ldr	r3, [pc, #260]	@ (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d109      	bne.n	8001916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e073      	b.n	80019ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001906:	4b3d      	ldr	r3, [pc, #244]	@ (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e06b      	b.n	80019ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001916:	4b39      	ldr	r3, [pc, #228]	@ (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f023 0203 	bic.w	r2, r3, #3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	4936      	ldr	r1, [pc, #216]	@ (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 8001924:	4313      	orrs	r3, r2
 8001926:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001928:	f7ff f94a 	bl	8000bc0 <HAL_GetTick>
 800192c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800192e:	e00a      	b.n	8001946 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001930:	f7ff f946 	bl	8000bc0 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800193e:	4293      	cmp	r3, r2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e053      	b.n	80019ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001946:	4b2d      	ldr	r3, [pc, #180]	@ (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f003 020c 	and.w	r2, r3, #12
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	429a      	cmp	r2, r3
 8001956:	d1eb      	bne.n	8001930 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001958:	4b27      	ldr	r3, [pc, #156]	@ (80019f8 <HAL_RCC_ClockConfig+0x1c0>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0307 	and.w	r3, r3, #7
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	429a      	cmp	r2, r3
 8001964:	d210      	bcs.n	8001988 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001966:	4b24      	ldr	r3, [pc, #144]	@ (80019f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f023 0207 	bic.w	r2, r3, #7
 800196e:	4922      	ldr	r1, [pc, #136]	@ (80019f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	4313      	orrs	r3, r2
 8001974:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001976:	4b20      	ldr	r3, [pc, #128]	@ (80019f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	683a      	ldr	r2, [r7, #0]
 8001980:	429a      	cmp	r2, r3
 8001982:	d001      	beq.n	8001988 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e032      	b.n	80019ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0304 	and.w	r3, r3, #4
 8001990:	2b00      	cmp	r3, #0
 8001992:	d008      	beq.n	80019a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001994:	4b19      	ldr	r3, [pc, #100]	@ (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	4916      	ldr	r1, [pc, #88]	@ (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0308 	and.w	r3, r3, #8
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d009      	beq.n	80019c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019b2:	4b12      	ldr	r3, [pc, #72]	@ (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	691b      	ldr	r3, [r3, #16]
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	490e      	ldr	r1, [pc, #56]	@ (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 80019c2:	4313      	orrs	r3, r2
 80019c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019c6:	f000 f821 	bl	8001a0c <HAL_RCC_GetSysClockFreq>
 80019ca:	4602      	mov	r2, r0
 80019cc:	4b0b      	ldr	r3, [pc, #44]	@ (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	091b      	lsrs	r3, r3, #4
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	490a      	ldr	r1, [pc, #40]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c8>)
 80019d8:	5ccb      	ldrb	r3, [r1, r3]
 80019da:	fa22 f303 	lsr.w	r3, r2, r3
 80019de:	4a09      	ldr	r2, [pc, #36]	@ (8001a04 <HAL_RCC_ClockConfig+0x1cc>)
 80019e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019e2:	4b09      	ldr	r3, [pc, #36]	@ (8001a08 <HAL_RCC_ClockConfig+0x1d0>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff f8a8 	bl	8000b3c <HAL_InitTick>

  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40022000 	.word	0x40022000
 80019fc:	40021000 	.word	0x40021000
 8001a00:	08003904 	.word	0x08003904
 8001a04:	20000008 	.word	0x20000008
 8001a08:	2000000c 	.word	0x2000000c

08001a0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b087      	sub	sp, #28
 8001a10:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a12:	2300      	movs	r3, #0
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	2300      	movs	r3, #0
 8001a18:	60bb      	str	r3, [r7, #8]
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	617b      	str	r3, [r7, #20]
 8001a1e:	2300      	movs	r3, #0
 8001a20:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001a22:	2300      	movs	r3, #0
 8001a24:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a26:	4b1e      	ldr	r3, [pc, #120]	@ (8001aa0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f003 030c 	and.w	r3, r3, #12
 8001a32:	2b04      	cmp	r3, #4
 8001a34:	d002      	beq.n	8001a3c <HAL_RCC_GetSysClockFreq+0x30>
 8001a36:	2b08      	cmp	r3, #8
 8001a38:	d003      	beq.n	8001a42 <HAL_RCC_GetSysClockFreq+0x36>
 8001a3a:	e027      	b.n	8001a8c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a3c:	4b19      	ldr	r3, [pc, #100]	@ (8001aa4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a3e:	613b      	str	r3, [r7, #16]
      break;
 8001a40:	e027      	b.n	8001a92 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	0c9b      	lsrs	r3, r3, #18
 8001a46:	f003 030f 	and.w	r3, r3, #15
 8001a4a:	4a17      	ldr	r2, [pc, #92]	@ (8001aa8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a4c:	5cd3      	ldrb	r3, [r2, r3]
 8001a4e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d010      	beq.n	8001a7c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a5a:	4b11      	ldr	r3, [pc, #68]	@ (8001aa0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	0c5b      	lsrs	r3, r3, #17
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	4a11      	ldr	r2, [pc, #68]	@ (8001aac <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a66:	5cd3      	ldrb	r3, [r2, r3]
 8001a68:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a0d      	ldr	r2, [pc, #52]	@ (8001aa4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a6e:	fb03 f202 	mul.w	r2, r3, r2
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a78:	617b      	str	r3, [r7, #20]
 8001a7a:	e004      	b.n	8001a86 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4a0c      	ldr	r2, [pc, #48]	@ (8001ab0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a80:	fb02 f303 	mul.w	r3, r2, r3
 8001a84:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	613b      	str	r3, [r7, #16]
      break;
 8001a8a:	e002      	b.n	8001a92 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a8c:	4b05      	ldr	r3, [pc, #20]	@ (8001aa4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a8e:	613b      	str	r3, [r7, #16]
      break;
 8001a90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a92:	693b      	ldr	r3, [r7, #16]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	371c      	adds	r7, #28
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bc80      	pop	{r7}
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	007a1200 	.word	0x007a1200
 8001aa8:	0800391c 	.word	0x0800391c
 8001aac:	0800392c 	.word	0x0800392c
 8001ab0:	003d0900 	.word	0x003d0900

08001ab4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ab8:	4b02      	ldr	r3, [pc, #8]	@ (8001ac4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001aba:	681b      	ldr	r3, [r3, #0]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr
 8001ac4:	20000008 	.word	0x20000008

08001ac8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001acc:	f7ff fff2 	bl	8001ab4 <HAL_RCC_GetHCLKFreq>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	4b05      	ldr	r3, [pc, #20]	@ (8001ae8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	0a1b      	lsrs	r3, r3, #8
 8001ad8:	f003 0307 	and.w	r3, r3, #7
 8001adc:	4903      	ldr	r1, [pc, #12]	@ (8001aec <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ade:	5ccb      	ldrb	r3, [r1, r3]
 8001ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	08003914 	.word	0x08003914

08001af0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001af4:	f7ff ffde 	bl	8001ab4 <HAL_RCC_GetHCLKFreq>
 8001af8:	4602      	mov	r2, r0
 8001afa:	4b05      	ldr	r3, [pc, #20]	@ (8001b10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	0adb      	lsrs	r3, r3, #11
 8001b00:	f003 0307 	and.w	r3, r3, #7
 8001b04:	4903      	ldr	r1, [pc, #12]	@ (8001b14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b06:	5ccb      	ldrb	r3, [r1, r3]
 8001b08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40021000 	.word	0x40021000
 8001b14:	08003914 	.word	0x08003914

08001b18 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b20:	4b0a      	ldr	r3, [pc, #40]	@ (8001b4c <RCC_Delay+0x34>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a0a      	ldr	r2, [pc, #40]	@ (8001b50 <RCC_Delay+0x38>)
 8001b26:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2a:	0a5b      	lsrs	r3, r3, #9
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	fb02 f303 	mul.w	r3, r2, r3
 8001b32:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b34:	bf00      	nop
  }
  while (Delay --);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	1e5a      	subs	r2, r3, #1
 8001b3a:	60fa      	str	r2, [r7, #12]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d1f9      	bne.n	8001b34 <RCC_Delay+0x1c>
}
 8001b40:	bf00      	nop
 8001b42:	bf00      	nop
 8001b44:	3714      	adds	r7, #20
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bc80      	pop	{r7}
 8001b4a:	4770      	bx	lr
 8001b4c:	20000008 	.word	0x20000008
 8001b50:	10624dd3 	.word	0x10624dd3

08001b54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d101      	bne.n	8001b66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e041      	b.n	8001bea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d106      	bne.n	8001b80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7fe fe78 	bl	8000870 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2202      	movs	r2, #2
 8001b84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3304      	adds	r3, #4
 8001b90:	4619      	mov	r1, r3
 8001b92:	4610      	mov	r0, r2
 8001b94:	f000 fd86 	bl	80026a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
	...

08001bf4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d001      	beq.n	8001c0c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e032      	b.n	8001c72 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2202      	movs	r2, #2
 8001c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a18      	ldr	r2, [pc, #96]	@ (8001c7c <HAL_TIM_Base_Start+0x88>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d00e      	beq.n	8001c3c <HAL_TIM_Base_Start+0x48>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c26:	d009      	beq.n	8001c3c <HAL_TIM_Base_Start+0x48>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a14      	ldr	r2, [pc, #80]	@ (8001c80 <HAL_TIM_Base_Start+0x8c>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d004      	beq.n	8001c3c <HAL_TIM_Base_Start+0x48>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a13      	ldr	r2, [pc, #76]	@ (8001c84 <HAL_TIM_Base_Start+0x90>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d111      	bne.n	8001c60 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f003 0307 	and.w	r3, r3, #7
 8001c46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2b06      	cmp	r3, #6
 8001c4c:	d010      	beq.n	8001c70 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f042 0201 	orr.w	r2, r2, #1
 8001c5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c5e:	e007      	b.n	8001c70 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f042 0201 	orr.w	r2, r2, #1
 8001c6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3714      	adds	r7, #20
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr
 8001c7c:	40012c00 	.word	0x40012c00
 8001c80:	40000400 	.word	0x40000400
 8001c84:	40000800 	.word	0x40000800

08001c88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d001      	beq.n	8001ca0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e03a      	b.n	8001d16 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2202      	movs	r2, #2
 8001ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	68da      	ldr	r2, [r3, #12]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f042 0201 	orr.w	r2, r2, #1
 8001cb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a18      	ldr	r2, [pc, #96]	@ (8001d20 <HAL_TIM_Base_Start_IT+0x98>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d00e      	beq.n	8001ce0 <HAL_TIM_Base_Start_IT+0x58>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cca:	d009      	beq.n	8001ce0 <HAL_TIM_Base_Start_IT+0x58>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a14      	ldr	r2, [pc, #80]	@ (8001d24 <HAL_TIM_Base_Start_IT+0x9c>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d004      	beq.n	8001ce0 <HAL_TIM_Base_Start_IT+0x58>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a13      	ldr	r2, [pc, #76]	@ (8001d28 <HAL_TIM_Base_Start_IT+0xa0>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d111      	bne.n	8001d04 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2b06      	cmp	r3, #6
 8001cf0:	d010      	beq.n	8001d14 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f042 0201 	orr.w	r2, r2, #1
 8001d00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d02:	e007      	b.n	8001d14 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f042 0201 	orr.w	r2, r2, #1
 8001d12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3714      	adds	r7, #20
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr
 8001d20:	40012c00 	.word	0x40012c00
 8001d24:	40000400 	.word	0x40000400
 8001d28:	40000800 	.word	0x40000800

08001d2c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68da      	ldr	r2, [r3, #12]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f022 0201 	bic.w	r2, r2, #1
 8001d42:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6a1a      	ldr	r2, [r3, #32]
 8001d4a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001d4e:	4013      	ands	r3, r2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d10f      	bne.n	8001d74 <HAL_TIM_Base_Stop_IT+0x48>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6a1a      	ldr	r2, [r3, #32]
 8001d5a:	f240 4344 	movw	r3, #1092	@ 0x444
 8001d5e:	4013      	ands	r3, r2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d107      	bne.n	8001d74 <HAL_TIM_Base_Stop_IT+0x48>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f022 0201 	bic.w	r2, r2, #1
 8001d72:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr

08001d88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e041      	b.n	8001e1e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d106      	bne.n	8001db4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f839 	bl	8001e26 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2202      	movs	r2, #2
 8001db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3304      	adds	r3, #4
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4610      	mov	r0, r2
 8001dc8:	f000 fc6c 	bl	80026a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001e26:	b480      	push	{r7}
 8001e28:	b083      	sub	sp, #12
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bc80      	pop	{r7}
 8001e36:	4770      	bx	lr

08001e38 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e42:	2300      	movs	r3, #0
 8001e44:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d109      	bne.n	8001e60 <HAL_TIM_PWM_Start_IT+0x28>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	bf14      	ite	ne
 8001e58:	2301      	movne	r3, #1
 8001e5a:	2300      	moveq	r3, #0
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	e022      	b.n	8001ea6 <HAL_TIM_PWM_Start_IT+0x6e>
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	2b04      	cmp	r3, #4
 8001e64:	d109      	bne.n	8001e7a <HAL_TIM_PWM_Start_IT+0x42>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	bf14      	ite	ne
 8001e72:	2301      	movne	r3, #1
 8001e74:	2300      	moveq	r3, #0
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	e015      	b.n	8001ea6 <HAL_TIM_PWM_Start_IT+0x6e>
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	2b08      	cmp	r3, #8
 8001e7e:	d109      	bne.n	8001e94 <HAL_TIM_PWM_Start_IT+0x5c>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	bf14      	ite	ne
 8001e8c:	2301      	movne	r3, #1
 8001e8e:	2300      	moveq	r3, #0
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	e008      	b.n	8001ea6 <HAL_TIM_PWM_Start_IT+0x6e>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	bf14      	ite	ne
 8001ea0:	2301      	movne	r3, #1
 8001ea2:	2300      	moveq	r3, #0
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e0a9      	b.n	8002002 <HAL_TIM_PWM_Start_IT+0x1ca>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d104      	bne.n	8001ebe <HAL_TIM_PWM_Start_IT+0x86>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2202      	movs	r2, #2
 8001eb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ebc:	e013      	b.n	8001ee6 <HAL_TIM_PWM_Start_IT+0xae>
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	2b04      	cmp	r3, #4
 8001ec2:	d104      	bne.n	8001ece <HAL_TIM_PWM_Start_IT+0x96>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001ecc:	e00b      	b.n	8001ee6 <HAL_TIM_PWM_Start_IT+0xae>
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	2b08      	cmp	r3, #8
 8001ed2:	d104      	bne.n	8001ede <HAL_TIM_PWM_Start_IT+0xa6>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2202      	movs	r2, #2
 8001ed8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001edc:	e003      	b.n	8001ee6 <HAL_TIM_PWM_Start_IT+0xae>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2202      	movs	r2, #2
 8001ee2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	2b0c      	cmp	r3, #12
 8001eea:	d841      	bhi.n	8001f70 <HAL_TIM_PWM_Start_IT+0x138>
 8001eec:	a201      	add	r2, pc, #4	@ (adr r2, 8001ef4 <HAL_TIM_PWM_Start_IT+0xbc>)
 8001eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ef2:	bf00      	nop
 8001ef4:	08001f29 	.word	0x08001f29
 8001ef8:	08001f71 	.word	0x08001f71
 8001efc:	08001f71 	.word	0x08001f71
 8001f00:	08001f71 	.word	0x08001f71
 8001f04:	08001f3b 	.word	0x08001f3b
 8001f08:	08001f71 	.word	0x08001f71
 8001f0c:	08001f71 	.word	0x08001f71
 8001f10:	08001f71 	.word	0x08001f71
 8001f14:	08001f4d 	.word	0x08001f4d
 8001f18:	08001f71 	.word	0x08001f71
 8001f1c:	08001f71 	.word	0x08001f71
 8001f20:	08001f71 	.word	0x08001f71
 8001f24:	08001f5f 	.word	0x08001f5f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	68da      	ldr	r2, [r3, #12]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f042 0202 	orr.w	r2, r2, #2
 8001f36:	60da      	str	r2, [r3, #12]
      break;
 8001f38:	e01d      	b.n	8001f76 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68da      	ldr	r2, [r3, #12]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f042 0204 	orr.w	r2, r2, #4
 8001f48:	60da      	str	r2, [r3, #12]
      break;
 8001f4a:	e014      	b.n	8001f76 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	68da      	ldr	r2, [r3, #12]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f042 0208 	orr.w	r2, r2, #8
 8001f5a:	60da      	str	r2, [r3, #12]
      break;
 8001f5c:	e00b      	b.n	8001f76 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68da      	ldr	r2, [r3, #12]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f042 0210 	orr.w	r2, r2, #16
 8001f6c:	60da      	str	r2, [r3, #12]
      break;
 8001f6e:	e002      	b.n	8001f76 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	73fb      	strb	r3, [r7, #15]
      break;
 8001f74:	bf00      	nop
  }

  if (status == HAL_OK)
 8001f76:	7bfb      	ldrb	r3, [r7, #15]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d141      	bne.n	8002000 <HAL_TIM_PWM_Start_IT+0x1c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2201      	movs	r2, #1
 8001f82:	6839      	ldr	r1, [r7, #0]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f000 fe19 	bl	8002bbc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a1f      	ldr	r2, [pc, #124]	@ (800200c <HAL_TIM_PWM_Start_IT+0x1d4>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d107      	bne.n	8001fa4 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001fa2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a18      	ldr	r2, [pc, #96]	@ (800200c <HAL_TIM_PWM_Start_IT+0x1d4>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d00e      	beq.n	8001fcc <HAL_TIM_PWM_Start_IT+0x194>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fb6:	d009      	beq.n	8001fcc <HAL_TIM_PWM_Start_IT+0x194>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a14      	ldr	r2, [pc, #80]	@ (8002010 <HAL_TIM_PWM_Start_IT+0x1d8>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d004      	beq.n	8001fcc <HAL_TIM_PWM_Start_IT+0x194>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a13      	ldr	r2, [pc, #76]	@ (8002014 <HAL_TIM_PWM_Start_IT+0x1dc>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d111      	bne.n	8001ff0 <HAL_TIM_PWM_Start_IT+0x1b8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	2b06      	cmp	r3, #6
 8001fdc:	d010      	beq.n	8002000 <HAL_TIM_PWM_Start_IT+0x1c8>
      {
        __HAL_TIM_ENABLE(htim);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f042 0201 	orr.w	r2, r2, #1
 8001fec:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fee:	e007      	b.n	8002000 <HAL_TIM_PWM_Start_IT+0x1c8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f042 0201 	orr.w	r2, r2, #1
 8001ffe:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002000:	7bfb      	ldrb	r3, [r7, #15]
}
 8002002:	4618      	mov	r0, r3
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40012c00 	.word	0x40012c00
 8002010:	40000400 	.word	0x40000400
 8002014:	40000800 	.word	0x40000800

08002018 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002022:	2300      	movs	r3, #0
 8002024:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	2b0c      	cmp	r3, #12
 800202a:	d841      	bhi.n	80020b0 <HAL_TIM_PWM_Stop_IT+0x98>
 800202c:	a201      	add	r2, pc, #4	@ (adr r2, 8002034 <HAL_TIM_PWM_Stop_IT+0x1c>)
 800202e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002032:	bf00      	nop
 8002034:	08002069 	.word	0x08002069
 8002038:	080020b1 	.word	0x080020b1
 800203c:	080020b1 	.word	0x080020b1
 8002040:	080020b1 	.word	0x080020b1
 8002044:	0800207b 	.word	0x0800207b
 8002048:	080020b1 	.word	0x080020b1
 800204c:	080020b1 	.word	0x080020b1
 8002050:	080020b1 	.word	0x080020b1
 8002054:	0800208d 	.word	0x0800208d
 8002058:	080020b1 	.word	0x080020b1
 800205c:	080020b1 	.word	0x080020b1
 8002060:	080020b1 	.word	0x080020b1
 8002064:	0800209f 	.word	0x0800209f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68da      	ldr	r2, [r3, #12]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f022 0202 	bic.w	r2, r2, #2
 8002076:	60da      	str	r2, [r3, #12]
      break;
 8002078:	e01d      	b.n	80020b6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68da      	ldr	r2, [r3, #12]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f022 0204 	bic.w	r2, r2, #4
 8002088:	60da      	str	r2, [r3, #12]
      break;
 800208a:	e014      	b.n	80020b6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68da      	ldr	r2, [r3, #12]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f022 0208 	bic.w	r2, r2, #8
 800209a:	60da      	str	r2, [r3, #12]
      break;
 800209c:	e00b      	b.n	80020b6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68da      	ldr	r2, [r3, #12]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f022 0210 	bic.w	r2, r2, #16
 80020ac:	60da      	str	r2, [r3, #12]
      break;
 80020ae:	e002      	b.n	80020b6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	73fb      	strb	r3, [r7, #15]
      break;
 80020b4:	bf00      	nop
  }

  if (status == HAL_OK)
 80020b6:	7bfb      	ldrb	r3, [r7, #15]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d157      	bne.n	800216c <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2200      	movs	r2, #0
 80020c2:	6839      	ldr	r1, [r7, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f000 fd79 	bl	8002bbc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a2a      	ldr	r2, [pc, #168]	@ (8002178 <HAL_TIM_PWM_Stop_IT+0x160>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d117      	bne.n	8002104 <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6a1a      	ldr	r2, [r3, #32]
 80020da:	f241 1311 	movw	r3, #4369	@ 0x1111
 80020de:	4013      	ands	r3, r2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d10f      	bne.n	8002104 <HAL_TIM_PWM_Stop_IT+0xec>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6a1a      	ldr	r2, [r3, #32]
 80020ea:	f240 4344 	movw	r3, #1092	@ 0x444
 80020ee:	4013      	ands	r3, r2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d107      	bne.n	8002104 <HAL_TIM_PWM_Stop_IT+0xec>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002102:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6a1a      	ldr	r2, [r3, #32]
 800210a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800210e:	4013      	ands	r3, r2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d10f      	bne.n	8002134 <HAL_TIM_PWM_Stop_IT+0x11c>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6a1a      	ldr	r2, [r3, #32]
 800211a:	f240 4344 	movw	r3, #1092	@ 0x444
 800211e:	4013      	ands	r3, r2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d107      	bne.n	8002134 <HAL_TIM_PWM_Stop_IT+0x11c>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 0201 	bic.w	r2, r2, #1
 8002132:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d104      	bne.n	8002144 <HAL_TIM_PWM_Stop_IT+0x12c>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2201      	movs	r2, #1
 800213e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002142:	e013      	b.n	800216c <HAL_TIM_PWM_Stop_IT+0x154>
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	2b04      	cmp	r3, #4
 8002148:	d104      	bne.n	8002154 <HAL_TIM_PWM_Stop_IT+0x13c>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2201      	movs	r2, #1
 800214e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002152:	e00b      	b.n	800216c <HAL_TIM_PWM_Stop_IT+0x154>
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	2b08      	cmp	r3, #8
 8002158:	d104      	bne.n	8002164 <HAL_TIM_PWM_Stop_IT+0x14c>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2201      	movs	r2, #1
 800215e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002162:	e003      	b.n	800216c <HAL_TIM_PWM_Stop_IT+0x154>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 800216c:	7bfb      	ldrb	r3, [r7, #15]
}
 800216e:	4618      	mov	r0, r3
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	40012c00 	.word	0x40012c00

0800217c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d020      	beq.n	80021e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d01b      	beq.n	80021e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f06f 0202 	mvn.w	r2, #2
 80021b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2201      	movs	r2, #1
 80021b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	f003 0303 	and.w	r3, r3, #3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 fa5a 	bl	8002680 <HAL_TIM_IC_CaptureCallback>
 80021cc:	e005      	b.n	80021da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 fa4d 	bl	800266e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f7fe fa43 	bl	8000660 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	f003 0304 	and.w	r3, r3, #4
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d020      	beq.n	800222c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f003 0304 	and.w	r3, r3, #4
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d01b      	beq.n	800222c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f06f 0204 	mvn.w	r2, #4
 80021fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2202      	movs	r2, #2
 8002202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800220e:	2b00      	cmp	r3, #0
 8002210:	d003      	beq.n	800221a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 fa34 	bl	8002680 <HAL_TIM_IC_CaptureCallback>
 8002218:	e005      	b.n	8002226 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 fa27 	bl	800266e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f7fe fa1d 	bl	8000660 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	f003 0308 	and.w	r3, r3, #8
 8002232:	2b00      	cmp	r3, #0
 8002234:	d020      	beq.n	8002278 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f003 0308 	and.w	r3, r3, #8
 800223c:	2b00      	cmp	r3, #0
 800223e:	d01b      	beq.n	8002278 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f06f 0208 	mvn.w	r2, #8
 8002248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2204      	movs	r2, #4
 800224e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	f003 0303 	and.w	r3, r3, #3
 800225a:	2b00      	cmp	r3, #0
 800225c:	d003      	beq.n	8002266 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 fa0e 	bl	8002680 <HAL_TIM_IC_CaptureCallback>
 8002264:	e005      	b.n	8002272 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 fa01 	bl	800266e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f7fe f9f7 	bl	8000660 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	f003 0310 	and.w	r3, r3, #16
 800227e:	2b00      	cmp	r3, #0
 8002280:	d020      	beq.n	80022c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f003 0310 	and.w	r3, r3, #16
 8002288:	2b00      	cmp	r3, #0
 800228a:	d01b      	beq.n	80022c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f06f 0210 	mvn.w	r2, #16
 8002294:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2208      	movs	r2, #8
 800229a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d003      	beq.n	80022b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 f9e8 	bl	8002680 <HAL_TIM_IC_CaptureCallback>
 80022b0:	e005      	b.n	80022be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 f9db 	bl	800266e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f7fe f9d1 	bl	8000660 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d00c      	beq.n	80022e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f003 0301 	and.w	r3, r3, #1
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d007      	beq.n	80022e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f06f 0201 	mvn.w	r2, #1
 80022e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f7fe f9f0 	bl	80006c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d00c      	beq.n	800230c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d007      	beq.n	800230c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 fd34 	bl	8002d74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00c      	beq.n	8002330 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800231c:	2b00      	cmp	r3, #0
 800231e:	d007      	beq.n	8002330 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002328:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f000 f9b1 	bl	8002692 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	f003 0320 	and.w	r3, r3, #32
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00c      	beq.n	8002354 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f003 0320 	and.w	r3, r3, #32
 8002340:	2b00      	cmp	r3, #0
 8002342:	d007      	beq.n	8002354 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f06f 0220 	mvn.w	r2, #32
 800234c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f000 fd07 	bl	8002d62 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002354:	bf00      	nop
 8002356:	3710      	adds	r7, #16
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002368:	2300      	movs	r3, #0
 800236a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002372:	2b01      	cmp	r3, #1
 8002374:	d101      	bne.n	800237a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002376:	2302      	movs	r3, #2
 8002378:	e0ae      	b.n	80024d8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2b0c      	cmp	r3, #12
 8002386:	f200 809f 	bhi.w	80024c8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800238a:	a201      	add	r2, pc, #4	@ (adr r2, 8002390 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800238c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002390:	080023c5 	.word	0x080023c5
 8002394:	080024c9 	.word	0x080024c9
 8002398:	080024c9 	.word	0x080024c9
 800239c:	080024c9 	.word	0x080024c9
 80023a0:	08002405 	.word	0x08002405
 80023a4:	080024c9 	.word	0x080024c9
 80023a8:	080024c9 	.word	0x080024c9
 80023ac:	080024c9 	.word	0x080024c9
 80023b0:	08002447 	.word	0x08002447
 80023b4:	080024c9 	.word	0x080024c9
 80023b8:	080024c9 	.word	0x080024c9
 80023bc:	080024c9 	.word	0x080024c9
 80023c0:	08002487 	.word	0x08002487
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68b9      	ldr	r1, [r7, #8]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f000 f9d8 	bl	8002780 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	699a      	ldr	r2, [r3, #24]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f042 0208 	orr.w	r2, r2, #8
 80023de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	699a      	ldr	r2, [r3, #24]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f022 0204 	bic.w	r2, r2, #4
 80023ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6999      	ldr	r1, [r3, #24]
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	691a      	ldr	r2, [r3, #16]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	430a      	orrs	r2, r1
 8002400:	619a      	str	r2, [r3, #24]
      break;
 8002402:	e064      	b.n	80024ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68b9      	ldr	r1, [r7, #8]
 800240a:	4618      	mov	r0, r3
 800240c:	f000 fa1e 	bl	800284c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	699a      	ldr	r2, [r3, #24]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800241e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	699a      	ldr	r2, [r3, #24]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800242e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6999      	ldr	r1, [r3, #24]
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	021a      	lsls	r2, r3, #8
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	430a      	orrs	r2, r1
 8002442:	619a      	str	r2, [r3, #24]
      break;
 8002444:	e043      	b.n	80024ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68b9      	ldr	r1, [r7, #8]
 800244c:	4618      	mov	r0, r3
 800244e:	f000 fa67 	bl	8002920 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	69da      	ldr	r2, [r3, #28]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f042 0208 	orr.w	r2, r2, #8
 8002460:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	69da      	ldr	r2, [r3, #28]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f022 0204 	bic.w	r2, r2, #4
 8002470:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	69d9      	ldr	r1, [r3, #28]
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	691a      	ldr	r2, [r3, #16]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	430a      	orrs	r2, r1
 8002482:	61da      	str	r2, [r3, #28]
      break;
 8002484:	e023      	b.n	80024ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68b9      	ldr	r1, [r7, #8]
 800248c:	4618      	mov	r0, r3
 800248e:	f000 fab1 	bl	80029f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	69da      	ldr	r2, [r3, #28]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80024a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	69da      	ldr	r2, [r3, #28]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	69d9      	ldr	r1, [r3, #28]
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	021a      	lsls	r2, r3, #8
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	430a      	orrs	r2, r1
 80024c4:	61da      	str	r2, [r3, #28]
      break;
 80024c6:	e002      	b.n	80024ce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	75fb      	strb	r3, [r7, #23]
      break;
 80024cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80024d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3718      	adds	r7, #24
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024ea:	2300      	movs	r3, #0
 80024ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d101      	bne.n	80024fc <HAL_TIM_ConfigClockSource+0x1c>
 80024f8:	2302      	movs	r3, #2
 80024fa:	e0b4      	b.n	8002666 <HAL_TIM_ConfigClockSource+0x186>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2202      	movs	r2, #2
 8002508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800251a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002522:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68ba      	ldr	r2, [r7, #8]
 800252a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002534:	d03e      	beq.n	80025b4 <HAL_TIM_ConfigClockSource+0xd4>
 8002536:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800253a:	f200 8087 	bhi.w	800264c <HAL_TIM_ConfigClockSource+0x16c>
 800253e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002542:	f000 8086 	beq.w	8002652 <HAL_TIM_ConfigClockSource+0x172>
 8002546:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800254a:	d87f      	bhi.n	800264c <HAL_TIM_ConfigClockSource+0x16c>
 800254c:	2b70      	cmp	r3, #112	@ 0x70
 800254e:	d01a      	beq.n	8002586 <HAL_TIM_ConfigClockSource+0xa6>
 8002550:	2b70      	cmp	r3, #112	@ 0x70
 8002552:	d87b      	bhi.n	800264c <HAL_TIM_ConfigClockSource+0x16c>
 8002554:	2b60      	cmp	r3, #96	@ 0x60
 8002556:	d050      	beq.n	80025fa <HAL_TIM_ConfigClockSource+0x11a>
 8002558:	2b60      	cmp	r3, #96	@ 0x60
 800255a:	d877      	bhi.n	800264c <HAL_TIM_ConfigClockSource+0x16c>
 800255c:	2b50      	cmp	r3, #80	@ 0x50
 800255e:	d03c      	beq.n	80025da <HAL_TIM_ConfigClockSource+0xfa>
 8002560:	2b50      	cmp	r3, #80	@ 0x50
 8002562:	d873      	bhi.n	800264c <HAL_TIM_ConfigClockSource+0x16c>
 8002564:	2b40      	cmp	r3, #64	@ 0x40
 8002566:	d058      	beq.n	800261a <HAL_TIM_ConfigClockSource+0x13a>
 8002568:	2b40      	cmp	r3, #64	@ 0x40
 800256a:	d86f      	bhi.n	800264c <HAL_TIM_ConfigClockSource+0x16c>
 800256c:	2b30      	cmp	r3, #48	@ 0x30
 800256e:	d064      	beq.n	800263a <HAL_TIM_ConfigClockSource+0x15a>
 8002570:	2b30      	cmp	r3, #48	@ 0x30
 8002572:	d86b      	bhi.n	800264c <HAL_TIM_ConfigClockSource+0x16c>
 8002574:	2b20      	cmp	r3, #32
 8002576:	d060      	beq.n	800263a <HAL_TIM_ConfigClockSource+0x15a>
 8002578:	2b20      	cmp	r3, #32
 800257a:	d867      	bhi.n	800264c <HAL_TIM_ConfigClockSource+0x16c>
 800257c:	2b00      	cmp	r3, #0
 800257e:	d05c      	beq.n	800263a <HAL_TIM_ConfigClockSource+0x15a>
 8002580:	2b10      	cmp	r3, #16
 8002582:	d05a      	beq.n	800263a <HAL_TIM_ConfigClockSource+0x15a>
 8002584:	e062      	b.n	800264c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002596:	f000 faf2 	bl	8002b7e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80025a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68ba      	ldr	r2, [r7, #8]
 80025b0:	609a      	str	r2, [r3, #8]
      break;
 80025b2:	e04f      	b.n	8002654 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80025c4:	f000 fadb 	bl	8002b7e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	689a      	ldr	r2, [r3, #8]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80025d6:	609a      	str	r2, [r3, #8]
      break;
 80025d8:	e03c      	b.n	8002654 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025e6:	461a      	mov	r2, r3
 80025e8:	f000 fa52 	bl	8002a90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2150      	movs	r1, #80	@ 0x50
 80025f2:	4618      	mov	r0, r3
 80025f4:	f000 faa9 	bl	8002b4a <TIM_ITRx_SetConfig>
      break;
 80025f8:	e02c      	b.n	8002654 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002606:	461a      	mov	r2, r3
 8002608:	f000 fa70 	bl	8002aec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2160      	movs	r1, #96	@ 0x60
 8002612:	4618      	mov	r0, r3
 8002614:	f000 fa99 	bl	8002b4a <TIM_ITRx_SetConfig>
      break;
 8002618:	e01c      	b.n	8002654 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002626:	461a      	mov	r2, r3
 8002628:	f000 fa32 	bl	8002a90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2140      	movs	r1, #64	@ 0x40
 8002632:	4618      	mov	r0, r3
 8002634:	f000 fa89 	bl	8002b4a <TIM_ITRx_SetConfig>
      break;
 8002638:	e00c      	b.n	8002654 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4619      	mov	r1, r3
 8002644:	4610      	mov	r0, r2
 8002646:	f000 fa80 	bl	8002b4a <TIM_ITRx_SetConfig>
      break;
 800264a:	e003      	b.n	8002654 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	73fb      	strb	r3, [r7, #15]
      break;
 8002650:	e000      	b.n	8002654 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002652:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002664:	7bfb      	ldrb	r3, [r7, #15]
}
 8002666:	4618      	mov	r0, r3
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800266e:	b480      	push	{r7}
 8002670:	b083      	sub	sp, #12
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002676:	bf00      	nop
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	bc80      	pop	{r7}
 800267e:	4770      	bx	lr

08002680 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	bc80      	pop	{r7}
 8002690:	4770      	bx	lr

08002692 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002692:	b480      	push	{r7}
 8002694:	b083      	sub	sp, #12
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr

080026a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a2f      	ldr	r2, [pc, #188]	@ (8002774 <TIM_Base_SetConfig+0xd0>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d00b      	beq.n	80026d4 <TIM_Base_SetConfig+0x30>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026c2:	d007      	beq.n	80026d4 <TIM_Base_SetConfig+0x30>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4a2c      	ldr	r2, [pc, #176]	@ (8002778 <TIM_Base_SetConfig+0xd4>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d003      	beq.n	80026d4 <TIM_Base_SetConfig+0x30>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4a2b      	ldr	r2, [pc, #172]	@ (800277c <TIM_Base_SetConfig+0xd8>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d108      	bne.n	80026e6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a22      	ldr	r2, [pc, #136]	@ (8002774 <TIM_Base_SetConfig+0xd0>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d00b      	beq.n	8002706 <TIM_Base_SetConfig+0x62>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026f4:	d007      	beq.n	8002706 <TIM_Base_SetConfig+0x62>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a1f      	ldr	r2, [pc, #124]	@ (8002778 <TIM_Base_SetConfig+0xd4>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d003      	beq.n	8002706 <TIM_Base_SetConfig+0x62>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a1e      	ldr	r2, [pc, #120]	@ (800277c <TIM_Base_SetConfig+0xd8>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d108      	bne.n	8002718 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800270c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	4313      	orrs	r3, r2
 8002716:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	4313      	orrs	r3, r2
 8002724:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	689a      	ldr	r2, [r3, #8]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4a0d      	ldr	r2, [pc, #52]	@ (8002774 <TIM_Base_SetConfig+0xd0>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d103      	bne.n	800274c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	691a      	ldr	r2, [r3, #16]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b00      	cmp	r3, #0
 800275c:	d005      	beq.n	800276a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	f023 0201 	bic.w	r2, r3, #1
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	611a      	str	r2, [r3, #16]
  }
}
 800276a:	bf00      	nop
 800276c:	3714      	adds	r7, #20
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr
 8002774:	40012c00 	.word	0x40012c00
 8002778:	40000400 	.word	0x40000400
 800277c:	40000800 	.word	0x40000800

08002780 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002780:	b480      	push	{r7}
 8002782:	b087      	sub	sp, #28
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a1b      	ldr	r3, [r3, #32]
 800278e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	f023 0201 	bic.w	r2, r3, #1
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f023 0303 	bic.w	r3, r3, #3
 80027b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	4313      	orrs	r3, r2
 80027c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	f023 0302 	bic.w	r3, r3, #2
 80027c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a1c      	ldr	r2, [pc, #112]	@ (8002848 <TIM_OC1_SetConfig+0xc8>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d10c      	bne.n	80027f6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	f023 0308 	bic.w	r3, r3, #8
 80027e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	697a      	ldr	r2, [r7, #20]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f023 0304 	bic.w	r3, r3, #4
 80027f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a13      	ldr	r2, [pc, #76]	@ (8002848 <TIM_OC1_SetConfig+0xc8>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d111      	bne.n	8002822 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002804:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800280c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	4313      	orrs	r3, r2
 8002816:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	4313      	orrs	r3, r2
 8002820:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	697a      	ldr	r2, [r7, #20]
 800283a:	621a      	str	r2, [r3, #32]
}
 800283c:	bf00      	nop
 800283e:	371c      	adds	r7, #28
 8002840:	46bd      	mov	sp, r7
 8002842:	bc80      	pop	{r7}
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	40012c00 	.word	0x40012c00

0800284c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800284c:	b480      	push	{r7}
 800284e:	b087      	sub	sp, #28
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	f023 0210 	bic.w	r2, r3, #16
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800287a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002882:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	021b      	lsls	r3, r3, #8
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	4313      	orrs	r3, r2
 800288e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	f023 0320 	bic.w	r3, r3, #32
 8002896:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	011b      	lsls	r3, r3, #4
 800289e:	697a      	ldr	r2, [r7, #20]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a1d      	ldr	r2, [pc, #116]	@ (800291c <TIM_OC2_SetConfig+0xd0>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d10d      	bne.n	80028c8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80028b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	011b      	lsls	r3, r3, #4
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	4313      	orrs	r3, r2
 80028be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80028c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a14      	ldr	r2, [pc, #80]	@ (800291c <TIM_OC2_SetConfig+0xd0>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d113      	bne.n	80028f8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80028d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80028de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	695b      	ldr	r3, [r3, #20]
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	693a      	ldr	r2, [r7, #16]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685a      	ldr	r2, [r3, #4]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	621a      	str	r2, [r3, #32]
}
 8002912:	bf00      	nop
 8002914:	371c      	adds	r7, #28
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr
 800291c:	40012c00 	.word	0x40012c00

08002920 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002920:	b480      	push	{r7}
 8002922:	b087      	sub	sp, #28
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a1b      	ldr	r3, [r3, #32]
 8002934:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	69db      	ldr	r3, [r3, #28]
 8002946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800294e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f023 0303 	bic.w	r3, r3, #3
 8002956:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	4313      	orrs	r3, r2
 8002960:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002968:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	021b      	lsls	r3, r3, #8
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	4313      	orrs	r3, r2
 8002974:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a1d      	ldr	r2, [pc, #116]	@ (80029f0 <TIM_OC3_SetConfig+0xd0>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d10d      	bne.n	800299a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002984:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	021b      	lsls	r3, r3, #8
 800298c:	697a      	ldr	r2, [r7, #20]
 800298e:	4313      	orrs	r3, r2
 8002990:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002998:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a14      	ldr	r2, [pc, #80]	@ (80029f0 <TIM_OC3_SetConfig+0xd0>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d113      	bne.n	80029ca <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80029a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80029b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	011b      	lsls	r3, r3, #4
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	011b      	lsls	r3, r3, #4
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685a      	ldr	r2, [r3, #4]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	697a      	ldr	r2, [r7, #20]
 80029e2:	621a      	str	r2, [r3, #32]
}
 80029e4:	bf00      	nop
 80029e6:	371c      	adds	r7, #28
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bc80      	pop	{r7}
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	40012c00 	.word	0x40012c00

080029f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b087      	sub	sp, #28
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a1b      	ldr	r3, [r3, #32]
 8002a02:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a1b      	ldr	r3, [r3, #32]
 8002a08:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	021b      	lsls	r3, r3, #8
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002a3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	031b      	lsls	r3, r3, #12
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4a0f      	ldr	r2, [pc, #60]	@ (8002a8c <TIM_OC4_SetConfig+0x98>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d109      	bne.n	8002a68 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002a5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	019b      	lsls	r3, r3, #6
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	697a      	ldr	r2, [r7, #20]
 8002a6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	621a      	str	r2, [r3, #32]
}
 8002a82:	bf00      	nop
 8002a84:	371c      	adds	r7, #28
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bc80      	pop	{r7}
 8002a8a:	4770      	bx	lr
 8002a8c:	40012c00 	.word	0x40012c00

08002a90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b087      	sub	sp, #28
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6a1b      	ldr	r3, [r3, #32]
 8002aa6:	f023 0201 	bic.w	r2, r3, #1
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002aba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	011b      	lsls	r3, r3, #4
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	f023 030a 	bic.w	r3, r3, #10
 8002acc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	697a      	ldr	r2, [r7, #20]
 8002ae0:	621a      	str	r2, [r3, #32]
}
 8002ae2:	bf00      	nop
 8002ae4:	371c      	adds	r7, #28
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bc80      	pop	{r7}
 8002aea:	4770      	bx	lr

08002aec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b087      	sub	sp, #28
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6a1b      	ldr	r3, [r3, #32]
 8002afc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6a1b      	ldr	r3, [r3, #32]
 8002b02:	f023 0210 	bic.w	r2, r3, #16
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002b16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	031b      	lsls	r3, r3, #12
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002b28:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	011b      	lsls	r3, r3, #4
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	697a      	ldr	r2, [r7, #20]
 8002b3e:	621a      	str	r2, [r3, #32]
}
 8002b40:	bf00      	nop
 8002b42:	371c      	adds	r7, #28
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bc80      	pop	{r7}
 8002b48:	4770      	bx	lr

08002b4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b085      	sub	sp, #20
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
 8002b52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	f043 0307 	orr.w	r3, r3, #7
 8002b6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	609a      	str	r2, [r3, #8]
}
 8002b74:	bf00      	nop
 8002b76:	3714      	adds	r7, #20
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bc80      	pop	{r7}
 8002b7c:	4770      	bx	lr

08002b7e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b7e:	b480      	push	{r7}
 8002b80:	b087      	sub	sp, #28
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	60f8      	str	r0, [r7, #12]
 8002b86:	60b9      	str	r1, [r7, #8]
 8002b88:	607a      	str	r2, [r7, #4]
 8002b8a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002b98:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	021a      	lsls	r2, r3, #8
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	697a      	ldr	r2, [r7, #20]
 8002bb0:	609a      	str	r2, [r3, #8]
}
 8002bb2:	bf00      	nop
 8002bb4:	371c      	adds	r7, #28
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bc80      	pop	{r7}
 8002bba:	4770      	bx	lr

08002bbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b087      	sub	sp, #28
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	f003 031f 	and.w	r3, r3, #31
 8002bce:	2201      	movs	r2, #1
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6a1a      	ldr	r2, [r3, #32]
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	401a      	ands	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6a1a      	ldr	r2, [r3, #32]
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	f003 031f 	and.w	r3, r3, #31
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf4:	431a      	orrs	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	621a      	str	r2, [r3, #32]
}
 8002bfa:	bf00      	nop
 8002bfc:	371c      	adds	r7, #28
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bc80      	pop	{r7}
 8002c02:	4770      	bx	lr

08002c04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d101      	bne.n	8002c1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c18:	2302      	movs	r3, #2
 8002c1a:	e046      	b.n	8002caa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2202      	movs	r2, #2
 8002c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a16      	ldr	r2, [pc, #88]	@ (8002cb4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d00e      	beq.n	8002c7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c68:	d009      	beq.n	8002c7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a12      	ldr	r2, [pc, #72]	@ (8002cb8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d004      	beq.n	8002c7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a10      	ldr	r2, [pc, #64]	@ (8002cbc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d10c      	bne.n	8002c98 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	68ba      	ldr	r2, [r7, #8]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68ba      	ldr	r2, [r7, #8]
 8002c96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3714      	adds	r7, #20
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bc80      	pop	{r7}
 8002cb2:	4770      	bx	lr
 8002cb4:	40012c00 	.word	0x40012c00
 8002cb8:	40000400 	.word	0x40000400
 8002cbc:	40000800 	.word	0x40000800

08002cc0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d101      	bne.n	8002cdc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002cd8:	2302      	movs	r3, #2
 8002cda:	e03d      	b.n	8002d58 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	695b      	ldr	r3, [r3, #20]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	69db      	ldr	r3, [r3, #28]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3714      	adds	r7, #20
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bc80      	pop	{r7}
 8002d60:	4770      	bx	lr

08002d62 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d62:	b480      	push	{r7}
 8002d64:	b083      	sub	sp, #12
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bc80      	pop	{r7}
 8002d72:	4770      	bx	lr

08002d74 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bc80      	pop	{r7}
 8002d84:	4770      	bx	lr

08002d86 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b082      	sub	sp, #8
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d101      	bne.n	8002d98 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e042      	b.n	8002e1e <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d106      	bne.n	8002db2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f7fd fddb 	bl	8000968 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2224      	movs	r2, #36	@ 0x24
 8002db6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68da      	ldr	r2, [r3, #12]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002dc8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 fcd4 	bl	8003778 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	691a      	ldr	r2, [r3, #16]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002dde:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	695a      	ldr	r2, [r3, #20]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002dee:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68da      	ldr	r2, [r3, #12]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002dfe:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2220      	movs	r2, #32
 8002e0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2220      	movs	r2, #32
 8002e12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b084      	sub	sp, #16
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	60f8      	str	r0, [r7, #12]
 8002e2e:	60b9      	str	r1, [r7, #8]
 8002e30:	4613      	mov	r3, r2
 8002e32:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	2b20      	cmp	r3, #32
 8002e3e:	d112      	bne.n	8002e66 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d002      	beq.n	8002e4c <HAL_UART_Receive_IT+0x26>
 8002e46:	88fb      	ldrh	r3, [r7, #6]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e00b      	b.n	8002e68 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002e56:	88fb      	ldrh	r3, [r7, #6]
 8002e58:	461a      	mov	r2, r3
 8002e5a:	68b9      	ldr	r1, [r7, #8]
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f000 fab6 	bl	80033ce <UART_Start_Receive_IT>
 8002e62:	4603      	mov	r3, r0
 8002e64:	e000      	b.n	8002e68 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002e66:	2302      	movs	r3, #2
  }
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3710      	adds	r7, #16
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b0ba      	sub	sp, #232	@ 0xe8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002e96:	2300      	movs	r3, #0
 8002e98:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ea6:	f003 030f 	and.w	r3, r3, #15
 8002eaa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002eae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10f      	bne.n	8002ed6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002eba:	f003 0320 	and.w	r3, r3, #32
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d009      	beq.n	8002ed6 <HAL_UART_IRQHandler+0x66>
 8002ec2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ec6:	f003 0320 	and.w	r3, r3, #32
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 fb93 	bl	80035fa <UART_Receive_IT>
      return;
 8002ed4:	e25b      	b.n	800338e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002ed6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f000 80de 	beq.w	800309c <HAL_UART_IRQHandler+0x22c>
 8002ee0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d106      	bne.n	8002efa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ef0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f000 80d1 	beq.w	800309c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00b      	beq.n	8002f1e <HAL_UART_IRQHandler+0xae>
 8002f06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d005      	beq.n	8002f1e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f16:	f043 0201 	orr.w	r2, r3, #1
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f22:	f003 0304 	and.w	r3, r3, #4
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00b      	beq.n	8002f42 <HAL_UART_IRQHandler+0xd2>
 8002f2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d005      	beq.n	8002f42 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f3a:	f043 0202 	orr.w	r2, r3, #2
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00b      	beq.n	8002f66 <HAL_UART_IRQHandler+0xf6>
 8002f4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d005      	beq.n	8002f66 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f5e:	f043 0204 	orr.w	r2, r3, #4
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f6a:	f003 0308 	and.w	r3, r3, #8
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d011      	beq.n	8002f96 <HAL_UART_IRQHandler+0x126>
 8002f72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f76:	f003 0320 	and.w	r3, r3, #32
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d105      	bne.n	8002f8a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002f7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d005      	beq.n	8002f96 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f8e:	f043 0208 	orr.w	r2, r3, #8
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f000 81f2 	beq.w	8003384 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002fa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fa4:	f003 0320 	and.w	r3, r3, #32
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d008      	beq.n	8002fbe <HAL_UART_IRQHandler+0x14e>
 8002fac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fb0:	f003 0320 	and.w	r3, r3, #32
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d002      	beq.n	8002fbe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f000 fb1e 	bl	80035fa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	695b      	ldr	r3, [r3, #20]
 8002fc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	bf14      	ite	ne
 8002fcc:	2301      	movne	r3, #1
 8002fce:	2300      	moveq	r3, #0
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fda:	f003 0308 	and.w	r3, r3, #8
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d103      	bne.n	8002fea <HAL_UART_IRQHandler+0x17a>
 8002fe2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d04f      	beq.n	800308a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 fa28 	bl	8003440 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d041      	beq.n	8003082 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	3314      	adds	r3, #20
 8003004:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003008:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800300c:	e853 3f00 	ldrex	r3, [r3]
 8003010:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003014:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003018:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800301c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	3314      	adds	r3, #20
 8003026:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800302a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800302e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003032:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003036:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800303a:	e841 2300 	strex	r3, r2, [r1]
 800303e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003042:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1d9      	bne.n	8002ffe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800304e:	2b00      	cmp	r3, #0
 8003050:	d013      	beq.n	800307a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003056:	4a7e      	ldr	r2, [pc, #504]	@ (8003250 <HAL_UART_IRQHandler+0x3e0>)
 8003058:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800305e:	4618      	mov	r0, r3
 8003060:	f7fd ff24 	bl	8000eac <HAL_DMA_Abort_IT>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d016      	beq.n	8003098 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800306e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003074:	4610      	mov	r0, r2
 8003076:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003078:	e00e      	b.n	8003098 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 f993 	bl	80033a6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003080:	e00a      	b.n	8003098 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f98f 	bl	80033a6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003088:	e006      	b.n	8003098 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 f98b 	bl	80033a6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003096:	e175      	b.n	8003384 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003098:	bf00      	nop
    return;
 800309a:	e173      	b.n	8003384 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	f040 814f 	bne.w	8003344 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80030a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030aa:	f003 0310 	and.w	r3, r3, #16
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	f000 8148 	beq.w	8003344 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80030b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030b8:	f003 0310 	and.w	r3, r3, #16
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 8141 	beq.w	8003344 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80030c2:	2300      	movs	r3, #0
 80030c4:	60bb      	str	r3, [r7, #8]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	60bb      	str	r3, [r7, #8]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	60bb      	str	r3, [r7, #8]
 80030d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f000 80b6 	beq.w	8003254 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80030f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 8145 	beq.w	8003388 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003102:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003106:	429a      	cmp	r2, r3
 8003108:	f080 813e 	bcs.w	8003388 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003112:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	2b20      	cmp	r3, #32
 800311c:	f000 8088 	beq.w	8003230 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	330c      	adds	r3, #12
 8003126:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800312a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800312e:	e853 3f00 	ldrex	r3, [r3]
 8003132:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003136:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800313a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800313e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	330c      	adds	r3, #12
 8003148:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800314c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003150:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003154:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003158:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800315c:	e841 2300 	strex	r3, r2, [r1]
 8003160:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003164:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003168:	2b00      	cmp	r3, #0
 800316a:	d1d9      	bne.n	8003120 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	3314      	adds	r3, #20
 8003172:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003174:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003176:	e853 3f00 	ldrex	r3, [r3]
 800317a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800317c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800317e:	f023 0301 	bic.w	r3, r3, #1
 8003182:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	3314      	adds	r3, #20
 800318c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003190:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003194:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003196:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003198:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800319c:	e841 2300 	strex	r3, r2, [r1]
 80031a0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80031a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d1e1      	bne.n	800316c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	3314      	adds	r3, #20
 80031ae:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80031b2:	e853 3f00 	ldrex	r3, [r3]
 80031b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80031b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	3314      	adds	r3, #20
 80031c8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80031cc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80031ce:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80031d2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80031d4:	e841 2300 	strex	r3, r2, [r1]
 80031d8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80031da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1e3      	bne.n	80031a8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2220      	movs	r2, #32
 80031e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	330c      	adds	r3, #12
 80031f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031f8:	e853 3f00 	ldrex	r3, [r3]
 80031fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80031fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003200:	f023 0310 	bic.w	r3, r3, #16
 8003204:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	330c      	adds	r3, #12
 800320e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003212:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003214:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003216:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003218:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800321a:	e841 2300 	strex	r3, r2, [r1]
 800321e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003220:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1e3      	bne.n	80031ee <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800322a:	4618      	mov	r0, r3
 800322c:	f7fd fe03 	bl	8000e36 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2202      	movs	r2, #2
 8003234:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800323e:	b29b      	uxth	r3, r3
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	b29b      	uxth	r3, r3
 8003244:	4619      	mov	r1, r3
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f8b6 	bl	80033b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800324c:	e09c      	b.n	8003388 <HAL_UART_IRQHandler+0x518>
 800324e:	bf00      	nop
 8003250:	08003505 	.word	0x08003505
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800325c:	b29b      	uxth	r3, r3
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003268:	b29b      	uxth	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	f000 808e 	beq.w	800338c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003270:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003274:	2b00      	cmp	r3, #0
 8003276:	f000 8089 	beq.w	800338c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	330c      	adds	r3, #12
 8003280:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003284:	e853 3f00 	ldrex	r3, [r3]
 8003288:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800328a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800328c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003290:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	330c      	adds	r3, #12
 800329a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800329e:	647a      	str	r2, [r7, #68]	@ 0x44
 80032a0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032a2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80032a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80032a6:	e841 2300 	strex	r3, r2, [r1]
 80032aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80032ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1e3      	bne.n	800327a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	3314      	adds	r3, #20
 80032b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032bc:	e853 3f00 	ldrex	r3, [r3]
 80032c0:	623b      	str	r3, [r7, #32]
   return(result);
 80032c2:	6a3b      	ldr	r3, [r7, #32]
 80032c4:	f023 0301 	bic.w	r3, r3, #1
 80032c8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	3314      	adds	r3, #20
 80032d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80032d6:	633a      	str	r2, [r7, #48]	@ 0x30
 80032d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80032dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032de:	e841 2300 	strex	r3, r2, [r1]
 80032e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80032e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1e3      	bne.n	80032b2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2220      	movs	r2, #32
 80032ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	330c      	adds	r3, #12
 80032fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	e853 3f00 	ldrex	r3, [r3]
 8003306:	60fb      	str	r3, [r7, #12]
   return(result);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f023 0310 	bic.w	r3, r3, #16
 800330e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	330c      	adds	r3, #12
 8003318:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800331c:	61fa      	str	r2, [r7, #28]
 800331e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003320:	69b9      	ldr	r1, [r7, #24]
 8003322:	69fa      	ldr	r2, [r7, #28]
 8003324:	e841 2300 	strex	r3, r2, [r1]
 8003328:	617b      	str	r3, [r7, #20]
   return(result);
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1e3      	bne.n	80032f8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2202      	movs	r2, #2
 8003334:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003336:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800333a:	4619      	mov	r1, r3
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f000 f83b 	bl	80033b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003342:	e023      	b.n	800338c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003348:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800334c:	2b00      	cmp	r3, #0
 800334e:	d009      	beq.n	8003364 <HAL_UART_IRQHandler+0x4f4>
 8003350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003354:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003358:	2b00      	cmp	r3, #0
 800335a:	d003      	beq.n	8003364 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 f8e5 	bl	800352c <UART_Transmit_IT>
    return;
 8003362:	e014      	b.n	800338e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003368:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00e      	beq.n	800338e <HAL_UART_IRQHandler+0x51e>
 8003370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003374:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003378:	2b00      	cmp	r3, #0
 800337a:	d008      	beq.n	800338e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f000 f924 	bl	80035ca <UART_EndTransmit_IT>
    return;
 8003382:	e004      	b.n	800338e <HAL_UART_IRQHandler+0x51e>
    return;
 8003384:	bf00      	nop
 8003386:	e002      	b.n	800338e <HAL_UART_IRQHandler+0x51e>
      return;
 8003388:	bf00      	nop
 800338a:	e000      	b.n	800338e <HAL_UART_IRQHandler+0x51e>
      return;
 800338c:	bf00      	nop
  }
}
 800338e:	37e8      	adds	r7, #232	@ 0xe8
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bc80      	pop	{r7}
 80033a4:	4770      	bx	lr

080033a6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80033a6:	b480      	push	{r7}
 80033a8:	b083      	sub	sp, #12
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80033ae:	bf00      	nop
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bc80      	pop	{r7}
 80033b6:	4770      	bx	lr

080033b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	460b      	mov	r3, r1
 80033c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bc80      	pop	{r7}
 80033cc:	4770      	bx	lr

080033ce <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033ce:	b480      	push	{r7}
 80033d0:	b085      	sub	sp, #20
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	60f8      	str	r0, [r7, #12]
 80033d6:	60b9      	str	r1, [r7, #8]
 80033d8:	4613      	mov	r3, r2
 80033da:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	68ba      	ldr	r2, [r7, #8]
 80033e0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	88fa      	ldrh	r2, [r7, #6]
 80033e6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	88fa      	ldrh	r2, [r7, #6]
 80033ec:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2222      	movs	r2, #34	@ 0x22
 80033f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d007      	beq.n	8003414 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68da      	ldr	r2, [r3, #12]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003412:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	695a      	ldr	r2, [r3, #20]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f042 0201 	orr.w	r2, r2, #1
 8003422:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68da      	ldr	r2, [r3, #12]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f042 0220 	orr.w	r2, r2, #32
 8003432:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3714      	adds	r7, #20
 800343a:	46bd      	mov	sp, r7
 800343c:	bc80      	pop	{r7}
 800343e:	4770      	bx	lr

08003440 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003440:	b480      	push	{r7}
 8003442:	b095      	sub	sp, #84	@ 0x54
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	330c      	adds	r3, #12
 800344e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003450:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003452:	e853 3f00 	ldrex	r3, [r3]
 8003456:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800345a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800345e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	330c      	adds	r3, #12
 8003466:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003468:	643a      	str	r2, [r7, #64]	@ 0x40
 800346a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800346c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800346e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003470:	e841 2300 	strex	r3, r2, [r1]
 8003474:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003478:	2b00      	cmp	r3, #0
 800347a:	d1e5      	bne.n	8003448 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	3314      	adds	r3, #20
 8003482:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003484:	6a3b      	ldr	r3, [r7, #32]
 8003486:	e853 3f00 	ldrex	r3, [r3]
 800348a:	61fb      	str	r3, [r7, #28]
   return(result);
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	f023 0301 	bic.w	r3, r3, #1
 8003492:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	3314      	adds	r3, #20
 800349a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800349c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800349e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034a4:	e841 2300 	strex	r3, r2, [r1]
 80034a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80034aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d1e5      	bne.n	800347c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d119      	bne.n	80034ec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	330c      	adds	r3, #12
 80034be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	e853 3f00 	ldrex	r3, [r3]
 80034c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	f023 0310 	bic.w	r3, r3, #16
 80034ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	330c      	adds	r3, #12
 80034d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034d8:	61ba      	str	r2, [r7, #24]
 80034da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034dc:	6979      	ldr	r1, [r7, #20]
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	e841 2300 	strex	r3, r2, [r1]
 80034e4:	613b      	str	r3, [r7, #16]
   return(result);
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d1e5      	bne.n	80034b8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2220      	movs	r2, #32
 80034f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80034fa:	bf00      	nop
 80034fc:	3754      	adds	r7, #84	@ 0x54
 80034fe:	46bd      	mov	sp, r7
 8003500:	bc80      	pop	{r7}
 8003502:	4770      	bx	lr

08003504 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003510:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f7ff ff41 	bl	80033a6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003524:	bf00      	nop
 8003526:	3710      	adds	r7, #16
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b21      	cmp	r3, #33	@ 0x21
 800353e:	d13e      	bne.n	80035be <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003548:	d114      	bne.n	8003574 <UART_Transmit_IT+0x48>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d110      	bne.n	8003574 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	881b      	ldrh	r3, [r3, #0]
 800355c:	461a      	mov	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003566:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a1b      	ldr	r3, [r3, #32]
 800356c:	1c9a      	adds	r2, r3, #2
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	621a      	str	r2, [r3, #32]
 8003572:	e008      	b.n	8003586 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a1b      	ldr	r3, [r3, #32]
 8003578:	1c59      	adds	r1, r3, #1
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	6211      	str	r1, [r2, #32]
 800357e:	781a      	ldrb	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800358a:	b29b      	uxth	r3, r3
 800358c:	3b01      	subs	r3, #1
 800358e:	b29b      	uxth	r3, r3
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	4619      	mov	r1, r3
 8003594:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10f      	bne.n	80035ba <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68da      	ldr	r2, [r3, #12]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80035a8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68da      	ldr	r2, [r3, #12]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80035b8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80035ba:	2300      	movs	r3, #0
 80035bc:	e000      	b.n	80035c0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80035be:	2302      	movs	r3, #2
  }
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3714      	adds	r7, #20
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bc80      	pop	{r7}
 80035c8:	4770      	bx	lr

080035ca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b082      	sub	sp, #8
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68da      	ldr	r2, [r3, #12]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035e0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2220      	movs	r2, #32
 80035e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f7ff fed2 	bl	8003394 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b08c      	sub	sp, #48	@ 0x30
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b22      	cmp	r3, #34	@ 0x22
 800360c:	f040 80ae 	bne.w	800376c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003618:	d117      	bne.n	800364a <UART_Receive_IT+0x50>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d113      	bne.n	800364a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003622:	2300      	movs	r3, #0
 8003624:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800362a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	b29b      	uxth	r3, r3
 8003634:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003638:	b29a      	uxth	r2, r3
 800363a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800363c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003642:	1c9a      	adds	r2, r3, #2
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	629a      	str	r2, [r3, #40]	@ 0x28
 8003648:	e026      	b.n	8003698 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800364e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003650:	2300      	movs	r3, #0
 8003652:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800365c:	d007      	beq.n	800366e <UART_Receive_IT+0x74>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10a      	bne.n	800367c <UART_Receive_IT+0x82>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d106      	bne.n	800367c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	b2da      	uxtb	r2, r3
 8003676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003678:	701a      	strb	r2, [r3, #0]
 800367a:	e008      	b.n	800368e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	b2db      	uxtb	r3, r3
 8003684:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003688:	b2da      	uxtb	r2, r3
 800368a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800368c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003692:	1c5a      	adds	r2, r3, #1
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800369c:	b29b      	uxth	r3, r3
 800369e:	3b01      	subs	r3, #1
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	4619      	mov	r1, r3
 80036a6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d15d      	bne.n	8003768 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68da      	ldr	r2, [r3, #12]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 0220 	bic.w	r2, r2, #32
 80036ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68da      	ldr	r2, [r3, #12]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80036ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	695a      	ldr	r2, [r3, #20]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f022 0201 	bic.w	r2, r2, #1
 80036da:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2220      	movs	r2, #32
 80036e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d135      	bne.n	800375e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	330c      	adds	r3, #12
 80036fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	e853 3f00 	ldrex	r3, [r3]
 8003706:	613b      	str	r3, [r7, #16]
   return(result);
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	f023 0310 	bic.w	r3, r3, #16
 800370e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	330c      	adds	r3, #12
 8003716:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003718:	623a      	str	r2, [r7, #32]
 800371a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800371c:	69f9      	ldr	r1, [r7, #28]
 800371e:	6a3a      	ldr	r2, [r7, #32]
 8003720:	e841 2300 	strex	r3, r2, [r1]
 8003724:	61bb      	str	r3, [r7, #24]
   return(result);
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1e5      	bne.n	80036f8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0310 	and.w	r3, r3, #16
 8003736:	2b10      	cmp	r3, #16
 8003738:	d10a      	bne.n	8003750 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800373a:	2300      	movs	r3, #0
 800373c:	60fb      	str	r3, [r7, #12]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	60fb      	str	r3, [r7, #12]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	60fb      	str	r3, [r7, #12]
 800374e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003754:	4619      	mov	r1, r3
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f7ff fe2e 	bl	80033b8 <HAL_UARTEx_RxEventCallback>
 800375c:	e002      	b.n	8003764 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f7fc ffd8 	bl	8000714 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003764:	2300      	movs	r3, #0
 8003766:	e002      	b.n	800376e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003768:	2300      	movs	r3, #0
 800376a:	e000      	b.n	800376e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800376c:	2302      	movs	r3, #2
  }
}
 800376e:	4618      	mov	r0, r3
 8003770:	3730      	adds	r7, #48	@ 0x30
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
	...

08003778 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68da      	ldr	r2, [r3, #12]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	430a      	orrs	r2, r1
 8003794:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	689a      	ldr	r2, [r3, #8]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	431a      	orrs	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	695b      	ldr	r3, [r3, #20]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80037b2:	f023 030c 	bic.w	r3, r3, #12
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	6812      	ldr	r2, [r2, #0]
 80037ba:	68b9      	ldr	r1, [r7, #8]
 80037bc:	430b      	orrs	r3, r1
 80037be:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	699a      	ldr	r2, [r3, #24]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	430a      	orrs	r2, r1
 80037d4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a2c      	ldr	r2, [pc, #176]	@ (800388c <UART_SetConfig+0x114>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d103      	bne.n	80037e8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80037e0:	f7fe f986 	bl	8001af0 <HAL_RCC_GetPCLK2Freq>
 80037e4:	60f8      	str	r0, [r7, #12]
 80037e6:	e002      	b.n	80037ee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80037e8:	f7fe f96e 	bl	8001ac8 <HAL_RCC_GetPCLK1Freq>
 80037ec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	4613      	mov	r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	4413      	add	r3, r2
 80037f6:	009a      	lsls	r2, r3, #2
 80037f8:	441a      	add	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	fbb2 f3f3 	udiv	r3, r2, r3
 8003804:	4a22      	ldr	r2, [pc, #136]	@ (8003890 <UART_SetConfig+0x118>)
 8003806:	fba2 2303 	umull	r2, r3, r2, r3
 800380a:	095b      	lsrs	r3, r3, #5
 800380c:	0119      	lsls	r1, r3, #4
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	4613      	mov	r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	4413      	add	r3, r2
 8003816:	009a      	lsls	r2, r3, #2
 8003818:	441a      	add	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	fbb2 f2f3 	udiv	r2, r2, r3
 8003824:	4b1a      	ldr	r3, [pc, #104]	@ (8003890 <UART_SetConfig+0x118>)
 8003826:	fba3 0302 	umull	r0, r3, r3, r2
 800382a:	095b      	lsrs	r3, r3, #5
 800382c:	2064      	movs	r0, #100	@ 0x64
 800382e:	fb00 f303 	mul.w	r3, r0, r3
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	011b      	lsls	r3, r3, #4
 8003836:	3332      	adds	r3, #50	@ 0x32
 8003838:	4a15      	ldr	r2, [pc, #84]	@ (8003890 <UART_SetConfig+0x118>)
 800383a:	fba2 2303 	umull	r2, r3, r2, r3
 800383e:	095b      	lsrs	r3, r3, #5
 8003840:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003844:	4419      	add	r1, r3
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	4613      	mov	r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	4413      	add	r3, r2
 800384e:	009a      	lsls	r2, r3, #2
 8003850:	441a      	add	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	fbb2 f2f3 	udiv	r2, r2, r3
 800385c:	4b0c      	ldr	r3, [pc, #48]	@ (8003890 <UART_SetConfig+0x118>)
 800385e:	fba3 0302 	umull	r0, r3, r3, r2
 8003862:	095b      	lsrs	r3, r3, #5
 8003864:	2064      	movs	r0, #100	@ 0x64
 8003866:	fb00 f303 	mul.w	r3, r0, r3
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	011b      	lsls	r3, r3, #4
 800386e:	3332      	adds	r3, #50	@ 0x32
 8003870:	4a07      	ldr	r2, [pc, #28]	@ (8003890 <UART_SetConfig+0x118>)
 8003872:	fba2 2303 	umull	r2, r3, r2, r3
 8003876:	095b      	lsrs	r3, r3, #5
 8003878:	f003 020f 	and.w	r2, r3, #15
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	440a      	add	r2, r1
 8003882:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003884:	bf00      	nop
 8003886:	3710      	adds	r7, #16
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	40013800 	.word	0x40013800
 8003890:	51eb851f 	.word	0x51eb851f

08003894 <memset>:
 8003894:	4603      	mov	r3, r0
 8003896:	4402      	add	r2, r0
 8003898:	4293      	cmp	r3, r2
 800389a:	d100      	bne.n	800389e <memset+0xa>
 800389c:	4770      	bx	lr
 800389e:	f803 1b01 	strb.w	r1, [r3], #1
 80038a2:	e7f9      	b.n	8003898 <memset+0x4>

080038a4 <__libc_init_array>:
 80038a4:	b570      	push	{r4, r5, r6, lr}
 80038a6:	2600      	movs	r6, #0
 80038a8:	4d0c      	ldr	r5, [pc, #48]	@ (80038dc <__libc_init_array+0x38>)
 80038aa:	4c0d      	ldr	r4, [pc, #52]	@ (80038e0 <__libc_init_array+0x3c>)
 80038ac:	1b64      	subs	r4, r4, r5
 80038ae:	10a4      	asrs	r4, r4, #2
 80038b0:	42a6      	cmp	r6, r4
 80038b2:	d109      	bne.n	80038c8 <__libc_init_array+0x24>
 80038b4:	f000 f81a 	bl	80038ec <_init>
 80038b8:	2600      	movs	r6, #0
 80038ba:	4d0a      	ldr	r5, [pc, #40]	@ (80038e4 <__libc_init_array+0x40>)
 80038bc:	4c0a      	ldr	r4, [pc, #40]	@ (80038e8 <__libc_init_array+0x44>)
 80038be:	1b64      	subs	r4, r4, r5
 80038c0:	10a4      	asrs	r4, r4, #2
 80038c2:	42a6      	cmp	r6, r4
 80038c4:	d105      	bne.n	80038d2 <__libc_init_array+0x2e>
 80038c6:	bd70      	pop	{r4, r5, r6, pc}
 80038c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80038cc:	4798      	blx	r3
 80038ce:	3601      	adds	r6, #1
 80038d0:	e7ee      	b.n	80038b0 <__libc_init_array+0xc>
 80038d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80038d6:	4798      	blx	r3
 80038d8:	3601      	adds	r6, #1
 80038da:	e7f2      	b.n	80038c2 <__libc_init_array+0x1e>
 80038dc:	08003930 	.word	0x08003930
 80038e0:	08003930 	.word	0x08003930
 80038e4:	08003930 	.word	0x08003930
 80038e8:	08003934 	.word	0x08003934

080038ec <_init>:
 80038ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ee:	bf00      	nop
 80038f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038f2:	bc08      	pop	{r3}
 80038f4:	469e      	mov	lr, r3
 80038f6:	4770      	bx	lr

080038f8 <_fini>:
 80038f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038fa:	bf00      	nop
 80038fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038fe:	bc08      	pop	{r3}
 8003900:	469e      	mov	lr, r3
 8003902:	4770      	bx	lr
